{"root":"0:0","crate_version":"0.14.14","includes_private":false,"index":{"b:39:166-0:931":{"id":"b:39:166-0:931","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2760":{"id":"20:2760","crate_id":20,"name":"MAX_FORWARDS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the max number of intermediaries the request should be sent\nthrough.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::MaxForwards),}","value":null,"is_literal":false}},"34:399":{"id":"34:399","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[240,4],"end":[240,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:376":{"id":"34:376","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[154,0],"end":[183,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3228","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Target","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["34:378","34:379","34:380","34:381","34:382","34:383"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:452":{"id":"0:452","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[483,4],"end":[489,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1183":{"id":"22:1183","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1184":{"id":"22:1184","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5463":{"id":"1:5463","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5464","1:5465","1:5466","1:5467"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7002":{"id":"2:7002","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7003","2:7004","2:7005","2:7006","2:7007","2:7008","2:7009"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2937-0:421":{"id":"b:2:2937-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2783":{"id":"20:2783","crate_id":20,"name":"USER_AGENT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains a string that allows identifying the requesting client's\nsoftware.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UserAgent),}","value":null,"is_literal":false}},"34:212":{"id":"34:212","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[37,4],"end":[37,18]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"24:306":{"id":"24:306","crate_id":24,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:307","24:308","24:309","24:310","24:313"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:90":{"id":"22:90","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1023,4],"end":[1023,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:768":{"id":"a:2:3045-0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"36:18":{"id":"36:18","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[257,4],"end":[257,84]},"visibility":"default","docs":"Returns `Poll::Ready(Ok(()))` when the service is able to process requests.\n\nIf the service is at capacity, then `Poll::Pending` is returned and the task\nis notified when the service becomes ready again. This function is\nexpected to be called while on a task. Generally, this can be done with\na simple `futures::future::poll_fn` call.\n\nIf `Poll::Ready(Err(_))` is returned, the service is no longer able to service requests\nand the caller should discard the service instance.\n\nOnce `poll_ready` returns `Poll::Ready(Ok(()))`, a request may be dispatched to the\nservice using `call`. Until a request is dispatched, repeated calls to\n`poll_ready` must return either `Poll::Ready(Ok(()))` or `Poll::Ready(Err(_))`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:3012":{"id":"2:3012","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:1195":{"id":"22:1195","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:374":{"id":"34:374","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[145,4],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:365":{"id":"0:365","crate_id":0,"name":"send_trailers","span":{"filename":"src/body/body.rs","begin":[573,4],"end":[579,5]},"visibility":"public","docs":"Send trailers on trailers channel.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["trailers",{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","binding":{"equality":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["async"],"abi":"\"Rust\"","has_body":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[614,0],"end":[629,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:373"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12003":{"id":"2:12003","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12005","2:12006","2:12007","2:12008"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12467":{"id":"2:12467","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:43":{"id":"22:43","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[102,4],"end":[102,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"b:30:237-0:768":{"id":"b:30:237-0:768","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/future/future/mod.rs","begin":[119,0],"end":[119,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["never_error","flatten_stream","map_into","fuse","then","unit_error","flatten","right_future","now_or_never","into_stream","poll_unpin","inspect","left_future","boxed","boxed_local","map"],"trait":{"kind":"resolved_path","inner":{"name":"FutureExt","id":"30:239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1162":{"id":"22:1162","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,47],"end":[65,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Response","name":"Response","id":"20:1488","glob":false}},"b:2:2612-0:297":{"id":"b:2:2612-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3118":{"id":"2:3118","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3120"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:378":{"id":"34:378","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[159,4],"end":[159,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"qualified_path","inner":{"name":"Target","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:2839":{"id":"2:2839","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:400":{"id":"34:400","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[245,0],"end":[276,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:402","34:403","34:404","34:405","34:406","34:407"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5397":{"id":"1:5397","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5398","1:5399"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"41:160":{"id":"41:160","crate_id":41,"name":"Log","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["41:161","41:162","41:163"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:371":{"id":"34:371","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[129,4],"end":[129,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"22:1158":{"id":"22:1158","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2782":{"id":"20:2782","crate_id":20,"name":"TRANSFER_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Specifies the form of encoding used to safely transfer the entity to the\nclient.\n\n`transfer-encoding` is a hop-by-hop header, that is applying to a\nmessage between two nodes, not to a resource itself. Each segment of a\nmulti-node connection can use different `transfer-encoding` values. If\nyou want to compress data over the whole connection, use the end-to-end\nheader `content-encoding` header instead.\n\nWhen present on a response to a `HEAD` request that has no body, it\nindicates the value that would have applied to the corresponding `GET`\nmessage.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::TransferEncoding),}","value":null,"is_literal":false}},"34:386":{"id":"34:386","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[186,4],"end":[186,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:481":{"id":"0:481","crate_id":0,"name":"Executor","span":{"filename":"src/rt.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"An executor of futures.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:483"],"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:2341":{"id":"1:2341","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2342","1:2344","1:2345","1:2346"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9388","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:390":{"id":"34:390","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[203,4],"end":[203,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3045":{"id":"2:3045","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:110":{"id":"34:110","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[40,4],"end":[43,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:413","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:413","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2469":{"id":"20:2469","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[159,13],"end":[159,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"36:27":{"id":"36:27","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[282,4],"end":[282,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:67":{"id":"22:67","crate_id":22,"name":"get_i128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[633,4],"end":[633,37]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12353":{"id":"2:12353","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1171":{"id":"22:1171","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2952":{"id":"2:2952","crate_id":2,"name":"try_from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5391":{"id":"1:5391","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5392","1:5393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2947":{"id":"2:2947","crate_id":2,"name":"try_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12448":{"id":"2:12448","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:75":{"id":"22:75","crate_id":22,"name":"get_f64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[797,4],"end":[797,35]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1153":{"id":"22:1153","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6430":{"id":"1:6430","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6431","1:6432","1:6433","1:6434","1:6435","1:6436","1:6437","1:6438","1:6439","1:6440","1:6441","1:6442","1:6443","1:6444","1:6445","1:6446","1:6447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:1150":{"id":"22:1150","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:1488":{"id":"20:1488","crate_id":20,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/response.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Represents an HTTP response\n\nAn HTTP response consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\nTypically you'll work with responses on the client side as the result of\nsending a `Request` and on the server you'll be generating a `Response` to\nsend back to the client.\n\n# Examples\n\nCreating a `Response` to return\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    let mut builder = Response::builder()\n        .header(\"Foo\", \"Bar\")\n        .status(StatusCode::OK);\n\n    if req.headers().contains_key(\"Another-Header\") {\n        builder = builder.header(\"Another-Header\", \"Ack\");\n    }\n\n    builder.body(())\n}\n```\n\nA simple 404 handler\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn not_found(_req: Request<()>) -> http::Result<Response<()>> {\n    Response::builder()\n        .status(StatusCode::NOT_FOUND)\n        .body(())\n}\n```\n\nOr otherwise inspecting the result of a request:\n\n```no_run\nuse http::{Request, Response};\n\nfn get(url: &str) -> http::Result<Response<()>> {\n    // ...\n# panic!()\n}\n\nlet response = get(\"https://www.rust-lang.org/\").unwrap();\n\nif !response.status().is_success() {\n    panic!(\"failed to get a successful response status!\");\n}\n\nif let Some(date) = response.headers().get(\"Date\") {\n    // we've got a `Date` header!\n}\n\nlet body = response.body();\n// ...\n```\n\nDeserialize a response of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::de;\n\nfn deserialize<T>(res: Response<Vec<u8>>) -> serde_json::Result<Response<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a response to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::ser;\n\nfn serialize<T>(res: Response<T>) -> serde_json::Result<Response<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:560":{"id":"22:560","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[526,0],"end":[560,1]},"visibility":{"restricted":{"parent":"22:458","path":"::bytes"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:561","22:562","22:563","22:564"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:556":{"id":"20:556","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3407,4],"end":[3407,39]},"visibility":{"restricted":{"parent":"20:526","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1175":{"id":"22:1175","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12413":{"id":"2:12413","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15269","self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:46556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:931":{"id":"a:2:8351-0:931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2937-0:297":{"id":"b:2:2937-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12350":{"id":"2:12350","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11455","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12351","2:12352","2:12353","2:12354","2:12355","2:12356","2:12357","2:12358","2:12360","2:12362","2:12364","2:12366","2:12367","2:12368","2:12369","2:12370","2:12371","2:12372","2:12373","2:12374","2:12375","2:12376","2:12377","2:12378","2:12381","2:12384","2:12387","2:12391","2:12395","2:12398","2:12401","2:12404","2:12407","2:12410","2:12413","2:12416","2:12419","2:12422","2:12425","2:12428","2:12431","2:12434","2:12436","2:12438","2:12440","2:12441","2:12442","2:12445","2:12448","2:12451","2:12454","2:12457","2:12460","2:12463","2:12465","2:12466","2:12467","2:12468","2:12469","2:12471","2:12472"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:352":{"id":"0:352","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[533,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:663","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9390":{"id":"2:9390","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12364":{"id":"2:12364","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"20:2728":{"id":"20:2728","crate_id":20,"name":"AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the time in seconds the object has been in a proxy cache.\n\nThe Age header is usually close to zero. If it is Age: 0, it was\nprobably just fetched from the origin server; otherwise It is usually\ncalculated as a difference between the proxy's current date and the Date\ngeneral header included in the HTTP response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Age),}","value":null,"is_literal":false}},"22:92":{"id":"22:92","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1033,4],"end":[1033,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12407":{"id":"2:12407","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15264","str::split":"1:15269","self::pattern":"2:11984","str::split_terminator":"1:15269"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:46502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[118,0],"end":[344,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:319","0:320"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6604":{"id":"1:6604","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6605"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:766":{"id":"a:2:3016-0:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"24:185":{"id":"24:185","crate_id":24,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:186","24:187"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:227","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:341":{"id":"22:341","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[148,4],"end":[148,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2750":{"id":"20:2750","crate_id":20,"name":"FROM","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains an Internet email address for a human user who controls the\nrequesting user agent.\n\nIf you are running a robotic user agent (e.g. a crawler), the From\nheader should be sent, so you can be contacted if problems occur on\nservers, such as if the robot is sending excessive, unwanted, or invalid\nrequests.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::From),}","value":null,"is_literal":false}},"22:839":{"id":"22:839","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[944,4],"end":[944,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:235":{"id":"22:235","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[168,4],"end":[168,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:842":{"id":"22:842","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[966,4],"end":[966,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:766":{"id":"a:2:3004-0:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3248":{"id":"2:3248","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3250","2:3251"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:1177":{"id":"22:1177","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3669":{"id":"2:3669","crate_id":2,"name":"type_id","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:43283","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:46":{"id":"34:46","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[26,4],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:36067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"a:2:8351-0:768":{"id":"a:2:8351-0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"20:2381":{"id":"20:2381","crate_id":20,"name":"HeaderMap","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[45,0],"end":[52,1]},"visibility":"public","docs":"A set of HTTP headers\n\n`HeaderMap` is an multimap of [`HeaderName`] to values.\n\n[`HeaderName`]: struct.HeaderName.html\n\n# Examples\n\nBasic usage\n\n```\n# use http::HeaderMap;\n# use http::header::{CONTENT_LENGTH, HOST, LOCATION};\nlet mut headers = HeaderMap::new();\n\nheaders.insert(HOST, \"example.com\".parse().unwrap());\nheaders.insert(CONTENT_LENGTH, \"123\".parse().unwrap());\n\nassert!(headers.contains_key(HOST));\nassert!(!headers.contains_key(LOCATION));\n\nassert_eq!(headers[HOST], \"example.com\");\n\nheaders.remove(HOST);\n\nassert!(!headers.contains_key(HOST));\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:7453":{"id":"2:7453","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7454","2:7455","2:7456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:782":{"id":"0:782","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/upgrade.rs","begin":[145,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:339":{"id":"22:339","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[137,4],"end":[137,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:358":{"id":"34:358","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[79,4],"end":[79,35]},"visibility":"default","docs":"Returns the bounds on the remaining length of the stream.\n\nWhen the **exact** remaining length of the stream is known, the upper bound will be set and\nwill equal the lower bound.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1152":{"id":"22:1152","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1147":{"id":"22:1147","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:20":{"id":"36:20","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[274,0],"end":[289,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"S"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"S"}}},"items":["36:24","36:25","36:26","36:27","36:28"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:63":{"id":"22:63","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[553,4],"end":[553,35]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:71":{"id":"22:71","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[713,4],"end":[713,50]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2977":{"id":"20:2977","crate_id":20,"name":"ToStrError","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/value.rs","begin":[36,0],"end":[38,1]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` to a string representation.\n\nHeader field values may contain opaque bytes, in which case it is not\npossible to represent the value as a string.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:5519":{"id":"1:5519","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520","1:5521","1:5522","1:5523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:53":{"id":"22:53","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[353,4],"end":[353,35]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:4101":{"id":"24:4101","crate_id":24,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4102","24:4104","24:4106","24:4109","24:4116","24:4118","24:4120","24:4122","24:4124","24:4126","24:4128","24:4130","24:4132","24:4134","24:4136","24:4138","24:4140","24:4142","24:4144","24:4146","24:4148","24:4150","24:4152","24:4154","24:4156","24:4158","24:4111","24:4113","24:4115"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:227","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:95":{"id":"22:95","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1040,4],"end":[1040,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:766":{"id":"a:2:8351-0:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:12441":{"id":"2:12441","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3158":{"id":"2:3158","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3160"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[500,0],"end":[505,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:344"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2758":{"id":"20:2758","crate_id":20,"name":"LINK","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Allows the server to point an interested client to another resource\ncontaining metadata about the requested resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Link),}","value":null,"is_literal":false}},"2:2625":{"id":"2:2625","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2626","2:2627"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:421":{"id":"b:2:2943-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:429":{"id":"0:429","crate_id":0,"name":"is_parse_status","span":{"filename":"src/error.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by an invalid response status code or\nreason phrase.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2743":{"id":"20:2743","crate_id":20,"name":"COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains stored HTTP cookies previously sent by the server with the\nSet-Cookie header.\n\nThe Cookie header might be omitted entirely, if the privacy setting of\nthe browser are set to block them, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Cookie),}","value":null,"is_literal":false}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[144,0],"end":[469,1]},"visibility":{"restricted":{"parent":"0:411","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:427","0:428","0:429","0:430","0:431","0:432","0:433","0:434","0:435","0:436","0:437"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12469":{"id":"2:12469","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15264"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:46733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1181":{"id":"22:1181","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:340":{"id":"22:340","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[142,4],"end":[142,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2787":{"id":"20:2787","crate_id":20,"name":"VIA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Added by proxies to track routing.\n\nThe `via` general header is added by proxies, both forward and reverse\nproxies, and can appear in the request headers and the response headers.\nIt is used for tracking message forwards, avoiding request loops, and\nidentifying the protocol capabilities of senders along the\nrequest/response chain.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Via),}","value":null,"is_literal":false}},"22:62":{"id":"22:62","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[533,4],"end":[533,32]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:112":{"id":"34:112","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[54,4],"end":[54,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2725":{"id":"20:2725","crate_id":20,"name":"ACCESS_CONTROL_MAX_AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates how long the results of a preflight request can be cached.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlMaxAge),}","value":null,"is_literal":false}},"0:778":{"id":"0:778","crate_id":0,"name":"poll_write","span":{"filename":"src/upgrade.rs","begin":[121,4],"end":[127,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"39:109":{"id":"39:109","crate_id":39,"name":"AsField","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["39:110"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"39:424","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2948-0:766":{"id":"b:2:2948-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:344":{"id":"0:344","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12465":{"id":"2:12465","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:297":{"id":"a:2:3004-0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9381":{"id":"2:9381","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9382"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"36:33":{"id":"36:33","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[296,4],"end":[296,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"34:43":{"id":"34:43","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[24,0],"end":[51,1]},"visibility":{"restricted":{"parent":"34:3","path":"::empty"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:45","34:46","34:47","34:48","34:49","34:50"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:353":{"id":"34:353","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[45,4],"end":[45,19]},"visibility":"default","docs":"Values yielded by the `Body`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:780":{"id":"0:780","crate_id":0,"name":"poll_flush","span":{"filename":"src/upgrade.rs","begin":[137,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:430":{"id":"0:430","crate_id":0,"name":"is_user","span":{"filename":"src/error.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Returns true if this error was caused by user code.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:348":{"id":"0:348","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[519,4],"end":[521,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,38],"end":[65,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Request","name":"Request","id":"20:1355","glob":false}},"22:60":{"id":"22:60","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[493,4],"end":[493,32]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2455":{"id":"20:2455","crate_id":20,"name":"GetAll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[150,0],"end":[153,1]},"visibility":"public","docs":"A view to all values stored in a single entry.\n\nThis struct is returned by `HeaderMap::get_all`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1155":{"id":"22:1155","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3162":{"id":"2:3162","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:342":{"id":"0:342","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7060","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3009":{"id":"2:3009","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2727":{"id":"20:2727","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_METHOD","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Informs the server know which HTTP method will be used when the actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlRequestMethod),}","value":null,"is_literal":false}},"31:44":{"id":"31:44","crate_id":31,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:45","31:46","31:47"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:39","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12401":{"id":"2:12401","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15269","`DoubleEndedIterator`":"2:7497","self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:46452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:39:166-0:768":{"id":"b:39:166-0:768","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1149":{"id":"22:1149","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:70":{"id":"22:70","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[693,4],"end":[693,47]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3081":{"id":"2:3081","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3083","2:3084"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2771":{"id":"20:2771","crate_id":20,"name":"RETRY_AFTER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The Retry-After response HTTP header indicates how long the user agent\nshould wait before making a follow-up request. There are two main cases\nthis header is used:\n\n* When sent with a 503 (Service Unavailable) response, it indicates how\nlong the service is expected to be unavailable.\n\n* When sent with a redirect response, such as 301 (Moved Permanently),\nit indicates the minimum time that the user agent is asked to wait\nbefore issuing the redirected request.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::RetryAfter),}","value":null,"is_literal":false}},"0:938":{"id":"0:938","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:379":{"id":"34:379","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[160,4],"end":[160,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"qualified_path","inner":{"name":"Target","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2612-0:931":{"id":"b:2:2612-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:371":{"id":"0:371","crate_id":0,"name":"abort","span":{"filename":"src/body/body.rs","begin":[600,4],"end":[606,5]},"visibility":"public","docs":"Aborts the body in an abnormal fashion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12381":{"id":"2:12381","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12366":{"id":"2:12366","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15269","crate::ops::Index":"2:3300","str::slice_mut_unchecked":"1:15269"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"20:2434":{"id":"20:2434","crate_id":20,"name":"ValuesMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[130,0],"end":[132,1]},"visibility":"public","docs":"`HeaderMap` mutable value iterator","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:12695":{"id":"2:12695","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12696","2:12697"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2784":{"id":"20:2784","crate_id":20,"name":"UPGRADE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Used as part of the exchange to upgrade the protocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Upgrade),}","value":null,"is_literal":false}},"34:405":{"id":"34:405","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[259,4],"end":[262,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"30:3351":{"id":"30:3351","crate_id":30,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:3352","30:3353","30:3354","30:3357","30:3358","30:3361","30:3365","30:3368","30:3370","30:3375","30:3376","30:3377","30:3381","30:3384","30:3387","30:3388","30:3391","30:3396","30:3399","30:3402","30:3404","30:3407","30:3411","30:3412","30:3413","30:3414","30:3415","30:3417","30:3419","30:3420","30:3421","30:3423","30:3425","30:3426","30:3427","30:3428","30:3430","30:3432","30:3434","30:3435"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"5:5723":{"id":"5:5723","crate_id":5,"name":"to_string","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2997":{"id":"20:2997","crate_id":20,"name":"Method","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/method.rs","begin":[46,0],"end":[46,25]},"visibility":"public","docs":"The Request Method (VERB)\n\nThis type also contains constants for a number of common HTTP methods such\nas GET, POST, etc.\n\nCurrently includes 8 variants representing the 8 methods defined in\n[RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH,\nand an Extension variant for all extensions.\n\n# Examples\n\n```\nuse http::Method;\n\nassert_eq!(Method::GET, Method::from_bytes(b\"GET\").unwrap());\nassert!(Method::GET.is_idempotent());\nassert_eq!(Method::POST.as_str(), \"POST\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2391":{"id":"20:2391","crate_id":20,"name":"Iter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"`HeaderMap` entry iterator.\n\nYields `(&HeaderName, &value)` tuples. The same header name may be yielded\nmore than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1185":{"id":"22:1185","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:421":{"id":"a:2:3016-0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3667-0:312":{"id":"b:2:3667-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:766":{"id":"0:766","crate_id":0,"name":"Upgraded","span":{"filename":"src/upgrade.rs","begin":[31,0],"end":[33,1]},"visibility":"public","docs":"An upgraded HTTP connection.\n\nThis type holds a trait object internally of the original IO that\nwas used to speak HTTP before the upgrade. It can be used directly\nas a `Read` or `Write` for convenience.\n\nAlternatively, if the exact type is known, this can be deconstructed\ninto its parts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:772","a:2:3004-0:766","a:2:3016-0:766","a:2:3045-0:766","a:2:8351-0:766","a:2:8352-0:766","b:2:2937-0:766","b:2:2933-0:766","b:2:2948-0:766","b:2:2943-0:766","b:2:2609-0:766","b:2:2612-0:766","b:2:3667-0:766","b:24:2490-0:766","b:24:2642-0:766","b:39:166-0:766","b:39:181-0:766","0:783","0:775","0:777"]}},"2:12422":{"id":"2:12422","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15264","`DoubleEndedIterator`":"2:7497","self::pattern":"2:11984","str::matches":"1:15269"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:46638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2426":{"id":"20:2426","crate_id":20,"name":"Values","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[124,0],"end":[126,1]},"visibility":"public","docs":"`HeaderMap` value iterator.\n\nEach value contained in the `HeaderMap` will be yielded.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:2:2612-0:766":{"id":"b:2:2612-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2792":{"id":"20:2792","crate_id":20,"name":"X_FRAME_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates whether or not a browser should be allowed to render a page in\na frame.\n\nSites can use this to avoid clickjacking attacks, by ensuring that their\ncontent is not embedded into other sites.\n\nThe added security is only provided if the user accessing the document\nis using a browser supporting `x-frame-options`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XFrameOptions),}","value":null,"is_literal":false}},"2:7522":{"id":"2:7522","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7523","2:7524"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:260":{"id":"34:260","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[77,4],"end":[77,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:34":{"id":"36:34","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[297,4],"end":[297,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,21],"end":[18,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Bytes","name":"Bytes","id":"22:526","glob":false}},"1:7478":{"id":"1:7478","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7479"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:369":{"id":"0:369","crate_id":0,"name":"try_send_data","span":{"filename":"src/body/body.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Try to send data on this channel.\n\n# Errors\n\nReturns `Err(Bytes)` if the channel could not (currently) accept\nanother `Bytes`.\n\n# Note\n\nThis is mostly useful for when trying to send from some other thread\nthat doesn't have an async context. If in an async context, prefer\n`send_data()` instead.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:312":{"id":"b:2:2609-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[492,0],"end":[499,1]},"visibility":{"restricted":{"parent":"0:411","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","backtrace","description","source","type_id"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:454"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:80":{"id":"22:80","crate_id":22,"name":"take","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[847,4],"end":[849,20]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2744":{"id":"20:2744","crate_id":20,"name":"DNT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the client's tracking preference.\n\nThis header lets users indicate whether they would prefer privacy rather\nthan personalized content.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Dnt),}","value":null,"is_literal":false}},"0:450":{"id":"0:450","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[472,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:39:166-0:312":{"id":"b:39:166-0:312","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2946":{"id":"2:2946","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"a:2:3045-0:766":{"id":"a:2:3045-0:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:51":{"id":"22:51","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[310,4],"end":[310,30]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:22219":{"id":"2:22219","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22220"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12710":{"id":"2:12710","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12711","2:12712","2:12713"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2489":{"id":"20:2489","crate_id":20,"name":"OccupiedEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[181,0],"end":[185,1]},"visibility":"public","docs":"A view into a single occupied location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2723":{"id":"20:2723","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates whether the response can be shared with resources with the\ngiven origin.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowOrigin),}","value":null,"is_literal":false}},"2:12398":{"id":"2:12398","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:32":{"id":"36:32","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[295,4],"end":[295,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Response","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"22:400":{"id":"22:400","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[19,4],"end":[19,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5419":{"id":"5:5419","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:11921":{"id":"2:11921","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11922","2:11923"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:338":{"id":"22:338","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[133,4],"end":[133,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:58":{"id":"22:58","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[453,4],"end":[453,32]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2742":{"id":"20:2742","crate_id":20,"name":"CONTENT_TYPE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Used to indicate the media type of the resource.\n\nIn responses, a Content-Type header tells the client what the content\ntype of the returned content actually is. Browsers will do MIME sniffing\nin some cases and will not necessarily follow the value of this header;\nto prevent this behavior, the header X-Content-Type-Options can be set\nto nosniff.\n\nIn requests, (such as POST or PUT), the client tells the server what\ntype of data is actually sent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentType),}","value":null,"is_literal":false}},"b:2:12714-0:768":{"id":"b:2:12714-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:12710","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:12716","2:12717","2:12718"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"20:2767":{"id":"20:2767","crate_id":20,"name":"RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the part of a document that the server should return.\n\nSeveral parts can be requested with one Range header at once, and the\nserver may send back these ranges in a multipart document. If the server\nsends back ranges, it uses the 206 Partial Content for the response. If\nthe ranges are invalid, the server returns the 416 Range Not Satisfiable\nerror. The server can also ignore the Range header and return the whole\ndocument with a 200 status code.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Range),}","value":null,"is_literal":false}},"31:52":{"id":"31:52","crate_id":31,"name":"Ok","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.17/src/future.rs","begin":[77,4],"end":[77,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"34:50":{"id":"34:50","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[48,4],"end":[48,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:931":{"id":"b:2:2937-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8352":{"id":"2:8352","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5471":{"id":"1:5471","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5472","1:5473","1:5474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6691":{"id":"1:6691","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2751":{"id":"20:2751","crate_id":20,"name":"HOST","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Specifies the domain name of the server and (optionally) the TCP port\nnumber on which the server is listening.\n\nIf no port is given, the default port for the service requested (e.g.,\n\"80\" for an HTTP URL) is implied.\n\nA Host header field must be sent in all HTTP/1.1 request messages. A 400\n(Bad Request) status code will be sent to any HTTP/1.1 request message\nthat lacks a Host header field or contains more than one.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Host),}","value":null,"is_literal":false}},"30:6040":{"id":"30:6040","crate_id":30,"name":"SpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6041"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Spawn","id":"33:16","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12357":{"id":"2:12357","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15278"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:49":{"id":"34:49","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[44,4],"end":[44,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:564":{"id":"20:564","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3428,4],"end":[3428,47]},"visibility":{"restricted":{"parent":"20:526","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:242":{"id":"0:242","crate_id":0,"name":"aggregate","span":{"filename":"src/body/aggregate.rs","begin":[16,0],"end":[31,1]},"visibility":"public","docs":"Aggregate the data buffers from a body asynchronously.\n\nThe returned `impl Buf` groups the `Buf`s from the `HttpBody` without\ncopying them. This is ideal if you don't require a contiguous buffer.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:352","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["async"],"abi":"\"Rust\""}},"34:256":{"id":"34:256","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[54,4],"end":[54,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"B2"},"generics":{"params":[],"where_predicates":[]}}},"0:334":{"id":"0:334","crate_id":0,"name":"is_end_stream","span":{"filename":"src/body/body.rs","begin":[395,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5417":{"id":"5:5417","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2655":{"id":"2:2655","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2657","2:2658"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"20:2733":{"id":"20:2733","crate_id":20,"name":"CONNECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Controls whether or not the network connection stays open after the\ncurrent transaction finishes.\n\nIf the value sent is keep-alive, the connection is persistent and not\nclosed, allowing for subsequent requests to the same server to be done.\n\nExcept for the standard hop-by-hop headers (Keep-Alive,\nTransfer-Encoding, TE, Connection, Trailer, Upgrade, Proxy-Authorization\nand Proxy-Authenticate), any hop-by-hop headers used by the message must\nbe listed in the Connection header, so that the first proxy knows he has\nto consume them and not to forward them further. Standard hop-by-hop\nheaders can be listed too (it is often the case of Keep-Alive, but this\nis not mandatory.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Connection),}","value":null,"is_literal":false}},"20:2759":{"id":"20:2759","crate_id":20,"name":"LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the URL to redirect a page to.\n\nThe Location response header indicates the URL to redirect a page to. It\nonly provides a meaning when served with a 3xx status response.\n\nThe HTTP method used to make the new request to fetch the page pointed\nto by Location depends of the original method and of the kind of\nredirection:\n\n* If 303 (See Also) responses always lead to the use of a GET method,\n307 (Temporary Redirect) and 308 (Permanent Redirect) don't change the\nmethod used in the original request;\n\n* 301 (Permanent Redirect) and 302 (Found) doesn't change the method\nmost of the time, though older user-agents may (so you basically don't\nknow).\n\nAll responses with one of these status codes send a Location header.\n\nBeside redirect response, messages with 201 (Created) status also\ninclude the Location header. It indicates the URL to the newly created\nresource.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created resource), while\nContent-Location indicates the direct URL to use to access the resource\nwhen content negotiation happened, without the need of further content\nnegotiation. Location is a header associated with the response, while\nContent-Location is associated with the entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Location),}","value":null,"is_literal":false}},"22:89":{"id":"22:89","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1021,0],"end":[1036,1]},"visibility":{"restricted":{"parent":"22:7","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["22:90","22:91","22:92"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:85":{"id":"22:85","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1013,0],"end":[1015,1]},"visibility":{"restricted":{"parent":"22:7","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["22:1145","22:1146","22:1147","22:1149","22:1150","22:1151","22:1152","22:1153","22:1154","22:1155","22:1156","22:1157","22:1158","22:1159","22:1160","22:1161","22:1162","22:1163","22:1164","22:1165","22:1166","22:1167","22:1168","22:1169","22:1170"],"negative":false,"synthetic":false,"blanket_impl":null}},"33:258":{"id":"33:258","crate_id":33,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["33:261","33:262"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementors":[]}},"22:399":{"id":"22:399","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[10,4],"end":[10,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12440":{"id":"2:12440","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:526":{"id":"22:526","crate_id":22,"name":"Bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[94,0],"end":[100,1]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloneing is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind between multiple\n`Bytes` instances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nthe reference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   +---------+\n   ________________________ / | Bytes 2 |\n  /                           +---------+\n /          +-----------+     |         |\n|_________/ |  Bytes 1  |     |         |\n|           +-----------+     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n+-----+---------------------------------+-----+\n| Arc |     |           |               |     |\n+-----+---------------------------------+-----+\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:339"]}},"24:440":{"id":"24:440","crate_id":24,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrsPriv","id":"24:495","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:21924":{"id":"2:21924","crate_id":2,"name":"Select","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Mask","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Mask"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2763":{"id":"20:2763","crate_id":20,"name":"PROXY_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na proxy.\n\nUnlike `www-authenticate`, the `proxy-authenticate` header field applies\nonly to the next outbound client on the response chain. This is because\nonly the client that chose a given proxy is likely to have the\ncredentials necessary for authentication. However, when multiple proxies\nare used within the same administrative domain, such as office and\nregional caching proxies within a large corporate network, it is common\nfor credentials to be generated by the user agent and passed through the\nhierarchy until consumed. Hence, in such a configuration, it will appear\nas if Proxy-Authenticate is being forwarded because each proxy will send\nthe same challenge set.\n\nThe `proxy-authenticate` header is sent along with a `407 Proxy\nAuthentication Required`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthenticate),}","value":null,"is_literal":false}},"2:2611":{"id":"2:2611","crate_id":2,"name":"borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:96":{"id":"22:96","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1051,4],"end":[1051,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3114":{"id":"2:3114","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3116"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4409":{"id":"1:4409","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4410","1:4411","1:4413","1:4414","1:4415","1:4416","1:4417","1:4426"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:1167":{"id":"22:1167","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:48":{"id":"34:48","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[37,4],"end":[40,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"39:157":{"id":"39:157","crate_id":39,"name":"WithSubscriber","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["39:158","39:160"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12387":{"id":"2:12387","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264","`None`":"2:44586"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2786":{"id":"20:2786","crate_id":20,"name":"VARY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Determines how to match future requests with cached responses.\n\nThe `vary` HTTP response header determines how to match future request\nheaders to decide whether a cached response can be used rather than\nrequesting a fresh one from the origin server. It is used by the server\nto indicate which headers it used when selecting a representation of a\nresource in a content negotiation algorithm.\n\nThe `vary` header should be set on a 304 Not Modified response exactly\nlike it would have been set on an equivalent 200 OK response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Vary),}","value":null,"is_literal":false}},"2:3171":{"id":"2:3171","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3242":{"id":"2:3242","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3244"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:1186":{"id":"22:1186","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5402":{"id":"5:5402","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[493,0],"end":[498,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7060","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:342"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2737":{"id":"20:2737","crate_id":20,"name":"CONTENT_LENGTH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates the size of the entity-body.\n\nThe header value must be a decimal indicating the number of octets sent\nto the recipient.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLength),}","value":null,"is_literal":false}},"34:397":{"id":"34:397","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[226,4],"end":[229,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9402":{"id":"2:9402","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9403"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2774":{"id":"20:2774","crate_id":20,"name":"SEC_WEBSOCKET_KEY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The |Sec-WebSocket-Key| header field is used in the WebSocket opening\nhandshake. It is sent from the client to the server to provide part\nof the information used by the server to prove that it received a\nvalid WebSocket opening handshake. This helps ensure that the server\ndoes not accept connections from non-WebSocket clients (e.g., HTTP\nclients) that are being abused to send data to unsuspecting WebSocket\nservers.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketKey),}","value":null,"is_literal":false}},"34:382":{"id":"34:382","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[176,4],"end":[176,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:312":{"id":"a:2:3045-0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"33:16":{"id":"33:16","crate_id":33,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:17","33:18"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12369":{"id":"2:12369","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15269"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3148":{"id":"2:3148","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150","2:3151"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:106":{"id":"34:106","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[33,0],"end":[64,1]},"visibility":{"restricted":{"parent":"34:62","path":"::full"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Full","id":"34:413","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:108","34:109","34:110","34:111","34:112","34:113"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373":{"id":"0:373","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[615,4],"end":[628,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:370":{"id":"34:370","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[128,4],"end":[128,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:12404":{"id":"2:12404","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7497","str::rsplit_terminator":"1:15269","str::split":"1:15269","prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:46484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:421":{"id":"a:2:8352-0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"22:83":{"id":"22:83","crate_id":22,"name":"reader","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[900,4],"end":[902,20]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Reader","id":"22:1255","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:484":{"id":"0:484","crate_id":0,"name":"service","span":{"filename":"src/service/mod.rs","begin":[1,0],"end":[55,31]},"visibility":"public","docs":"Asynchronous Services\n\nA [`Service`](Service) is a trait representing an asynchronous\nfunction of a request to a response. It's similar to\n`async fn(Request) -> Result<Response, Error>`.\n\nThe argument and return value isn't strictly required to be for HTTP.\nTherefore, hyper uses several \"trait aliases\" to reduce clutter around\nbounds. These are:\n\n- `HttpService`: This is blanketly implemented for all types that\n  implement `Service<http::Request<B1>, Response = http::Response<B2>>`.\n- `MakeService`: When a `Service` returns a new `Service` as its \"response\",\n  we consider it a `MakeService`. Again, blanketly implemented in those cases.\n- `MakeConnection`: A `Service` that returns a \"connection\", a type that\n  implements `AsyncRead` and `AsyncWrite`.\n\n# HttpService\n\nIn hyper, especially in the server setting, a `Service` is usually bound\nto a single connection. It defines how to respond to **all** requests that\nconnection will receive.\n\nThe helper [`service_fn`](service_fn) should be sufficient for most cases, but\nif you need to implement `Service` for a type manually, you can follow the example\nin `service_struct_impl.rs`.\n\n# MakeService\n\nSince a `Service` is bound to a single connection, a [`Server`](crate::Server)\nneeds a way to make them as it accepts connections. This is what a\n`MakeService` does.\n\nResources that need to be shared by all `Service`s can be put into a\n`MakeService`, and then passed to individual `Service`s when `call`\nis called.","links":{"Service":"36:13","service_fn":"0:678"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["36:13","0:623","0:678"]}},"b:2:3667-0:421":{"id":"b:2:3667-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:68":{"id":"22:68","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[653,4],"end":[653,48]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:437":{"id":"0:437","crate_id":0,"name":"into_cause","span":{"filename":"src/error.rs","begin":[197,4],"end":[199,5]},"visibility":"public","docs":"Consumes the error, returning its cause.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1146":{"id":"22:1146","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:297":{"id":"b:2:2943-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3282":{"id":"2:3282","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284","2:3285","2:3286"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2913":{"id":"2:2913","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2915","2:2916"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6204":{"id":"1:6204","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6205","1:6206","1:6207","1:6208","1:6209","1:6210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:229":{"id":"22:229","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[132,0],"end":[191,1]},"visibility":{"restricted":{"parent":"22:199","path":"::buf::chain"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"items":["22:232","22:233","22:234","22:235","22:237"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7901":{"id":"2:7901","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:372":{"id":"34:372","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[131,4],"end":[134,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:480":{"id":"0:480","crate_id":0,"name":"rt","span":{"filename":"src/rt.rs","begin":[1,0],"end":[12,1]},"visibility":"public","docs":"Runtime components\n\nBy default, hyper includes the [tokio](https://tokio.rs) runtime.\n\nIf the `runtime` feature is disabled, the types in this module can be used\nto plug in other runtimes.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:481"]}},"2:3137":{"id":"2:3137","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139","2:3140"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:297":{"id":"a:2:3016-0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:1176":{"id":"22:1176","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2614":{"id":"2:2614","crate_id":2,"name":"borrow_mut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12416":{"id":"2:12416","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:654":{"id":"5:654","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:655","5:656","5:657"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:768":{"id":"b:2:3667-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:840":{"id":"22:840","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[949,4],"end":[949,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:297":{"id":"0:297","crate_id":0,"name":"Body","span":{"filename":"src/body/body.rs","begin":[36,0],"end":[41,1]},"visibility":"public","docs":"A stream of `Bytes`, used when receiving bodies.\n\nA good default [`HttpBody`](crate::body::HttpBody) to use in many\napplications.\n\nNote: To read the full body, use [`body::to_bytes`](crate::body::to_bytes)\nor [`body::aggregate`](crate::body::aggregate).","links":{"crate::body::HttpBody":"34:352","crate::body::aggregate":"0:242","crate::body::to_bytes":"0:402"},"attrs":["#[must_use = \"streams do nothing unless polled\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:318","a:2:3004-0:297","a:2:3016-0:297","a:2:3045-0:297","a:2:8351-0:297","a:2:8352-0:297","b:2:2937-0:297","b:2:2933-0:297","b:2:2948-0:297","b:2:2943-0:297","b:2:2609-0:297","b:2:2612-0:297","b:2:3667-0:297","b:39:166-0:297","b:39:181-0:297","0:339","0:341","0:343","0:345","0:347","0:349","0:351","0:327","0:337","0:329"]}},"2:12378":{"id":"2:12378","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1180":{"id":"22:1180","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3371":{"id":"2:3371","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373","2:3374","2:3375"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"22:1178":{"id":"22:1178","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5398":{"id":"5:5398","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12445":{"id":"2:12445","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:312":{"id":"a:2:3016-0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:359":{"id":"34:359","crate_id":34,"name":"data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[84,4],"end":[86,28]},"visibility":"default","docs":"Returns future that resolves to next data chunk, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Data","id":"34:449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12368":{"id":"2:12368","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15269"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2410":{"id":"20:2410","crate_id":20,"name":"IntoIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[104,0],"end":[109,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HeaderMap`.\n\nThis struct is created by the `into_iter` method on `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:65":{"id":"22:65","crate_id":22,"name":"get_u128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[593,4],"end":[593,37]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1166":{"id":"22:1166","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:718":{"id":"0:718","crate_id":0,"name":"upgrade","span":{"filename":"src/upgrade.rs","begin":[1,0],"end":[341,1]},"visibility":"public","docs":"HTTP Upgrades\n\nSee [this example][example] showing how upgrades work with both\nClients and Servers.\n\n[example]: https://github.com/hyperium/hyper/blob/master/examples/upgrades.rs","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:766","0:768","0:931","0:770"]}},"22:1159":{"id":"22:1159","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:15":{"id":"36:15","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[236,4],"end":[236,18]},"visibility":"default","docs":"Responses given by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"bounds":[],"default":null}},"b:24:2490-0:766":{"id":"b:24:2490-0:766","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.12.0/src/io/util/async_read_ext.rs","begin":[1294,0],"end":[1294,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:227","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["read_u128","read_i32","read_u16","read_f64","take","read_to_end","read_f32_le","read_i64_le","read_i16_le","read_i128","read_u64","read_i16","read_to_string","read_u8","read_u16_le","read_exact","read_f64_le","read_u128_le","read_i32_le","read_f32","read_i64","read_u32","read_i8","chain","read_buf","read","read_i128_le","read_u64_le","read_u32_le"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncReadExt","id":"24:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"R"}}},"2:12351":{"id":"2:12351","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:7462":{"id":"2:7462","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7464","2:7466","2:7467"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:421":{"id":"0:421","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"Represents errors that can occur handling HTTP streams.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:426","a:2:3004-0:421","a:2:3016-0:421","a:2:3045-0:421","a:2:8351-0:421","a:2:8352-0:421","b:2:2937-0:421","b:2:2933-0:421","b:5:5721-0:421","b:2:2948-0:421","b:2:2943-0:421","b:2:2609-0:421","b:2:2612-0:421","b:2:3667-0:421","b:39:166-0:421","b:39:181-0:421","0:449","0:451","0:453"]}},"0:350":{"id":"0:350","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[526,4],"end":[528,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[471,0],"end":[480,1]},"visibility":{"restricted":{"parent":"0:411","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:450"],"negative":false,"synthetic":false,"blanket_impl":null}},"39:154":{"id":"39:154","crate_id":39,"name":"Instrument","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["39:155","39:156"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:59":{"id":"22:59","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[473,4],"end":[473,35]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2740":{"id":"20:2740","crate_id":20,"name":"CONTENT_SECURITY_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Allows controlling resources the user agent is allowed to load for a\ngiven page.\n\nWith a few exceptions, policies mostly involve specifying server origins\nand script endpoints. This helps guard against cross-site scripting\nattacks (XSS).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentSecurityPolicy),}","value":null,"is_literal":false}},"34:296":{"id":"34:296","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[80,4],"end":[80,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:297":{"id":"a:2:3045-0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"31:110":{"id":"31:110","crate_id":31,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:111"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12376":{"id":"2:12376","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:46698","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2789":{"id":"20:2789","crate_id":20,"name":"WWW_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::WwwAuthenticate),}","value":null,"is_literal":false}},"22:48":{"id":"22:48","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:766":{"id":"b:2:2937-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:237":{"id":"22:237","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[174,4],"end":[174,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:360":{"id":"34:360","crate_id":34,"name":"trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[92,4],"end":[94,28]},"visibility":"default","docs":"Returns future that resolves to trailers, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Trailers","id":"34:458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:109":{"id":"34:109","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[38,4],"end":[38,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:36067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"22:91":{"id":"22:91","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1028,4],"end":[1028,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2969":{"id":"20:2969","crate_id":20,"name":"HeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/value.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"Represents an HTTP header field value.\n\nIn practice, HTTP header field values are usually valid ASCII. However, the\nHTTP spec allows for a header value to contain opaque bytes as well. In this\ncase, the header field value is not able to be represented as a string.\n\nTo handle this, the `HeaderValue` is useable as a type and can be compared\nwith strings and implements `Debug`. A `to_str` fn is provided that returns\nan `Err` if the header value contains non visible ascii characters.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:387":{"id":"34:387","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[187,4],"end":[187,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2943-0:768":{"id":"b:2:2943-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3004-0:421":{"id":"a:2:3004-0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:291":{"id":"34:291","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[52,4],"end":[52,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"20:2770":{"id":"20:2770","crate_id":20,"name":"REFRESH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Informs the web browser that the current page or frame should be\nrefreshed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Refresh),}","value":null,"is_literal":false}},"20:2499":{"id":"20:2499","crate_id":20,"name":"ValueIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[189,0],"end":[194,1]},"visibility":"public","docs":"An iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2464":{"id":"20:2464","crate_id":20,"name":"Entry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[157,0],"end":[163,1]},"visibility":"public","docs":"A view into a single location in a `HeaderMap`, which may be vacant or occupied.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}]}}]},"variants_stripped":false,"variants":["20:2467","20:2470"],"impls":[]}},"0:428":{"id":"0:428","crate_id":0,"name":"is_parse_too_large","span":{"filename":"src/error.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by a message that was too large.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12009":{"id":"2:12009","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12011","2:12012","2:12013"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3127":{"id":"2:3127","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3129","2:3130"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:768":{"id":"b:2:2948-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:113":{"id":"34:113","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[58,4],"end":[58,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2788":{"id":"20:2788","crate_id":20,"name":"WARNING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"General HTTP header contains information about possible problems with\nthe status of the message.\n\nMore than one `warning` header may appear in a response. Warning header\nfields can in general be applied to any message, however some warn-codes\nare specific to caches and can only be applied to response messages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Warning),}","value":null,"is_literal":false}},"a:2:8351-0:312":{"id":"a:2:8351-0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:6606":{"id":"1:6606","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12377":{"id":"2:12377","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:46726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[184,0],"end":[188,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:792"],"negative":false,"synthetic":false,"blanket_impl":null}},"24:4165":{"id":"24:4165","crate_id":24,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4166","24:4168","24:4171","24:4174","24:4177","24:4181","24:4183","24:4185","24:4187","24:4189","24:4191","24:4193","24:4195","24:4197","24:4199","24:4201","24:4203","24:4205","24:4207","24:4209","24:4211","24:4213","24:4215","24:4217","24:4219","24:4221","24:4223","24:4179","24:4180"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:306","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12362":{"id":"2:12362","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[531,0],"end":[539,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:663","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:352"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,69],"end":[65,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Uri","name":"Uri","id":"20:3215","glob":false}},"30:239":{"id":"30:239","crate_id":30,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:240","30:243","30:245","30:248","30:250","30:252","30:253","30:254","30:255","30:256","30:258","30:260","30:262","30:263","30:264","30:265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:87":{"id":"22:87","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1017,0],"end":[1019,1]},"visibility":{"restricted":{"parent":"22:7","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:1171","22:1172","22:1173","22:1175","22:1176","22:1177","22:1178","22:1179","22:1180","22:1181","22:1182","22:1183","22:1184","22:1185","22:1186","22:1187","22:1188","22:1189","22:1190","22:1191","22:1192","22:1193","22:1194","22:1195","22:1196"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12354":{"id":"2:12354","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11466"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"22:1173":{"id":"22:1173","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9394":{"id":"2:9394","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12367":{"id":"2:12367","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15269","crate::ops::IndexMut":"2:3304","`str`":"1:15269"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"20:2721":{"id":"20:2721","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Preflight response indicating permitted HTTP headers.\n\nThe Access-Control-Allow-Headers response header is used in response to\na preflight request to indicate which HTTP headers will be available via\nAccess-Control-Expose-Headers when making the actual request.\n\nThe simple headers, Accept, Accept-Language, Content-Language,\nContent-Type (but only with a MIME type of its parsed value (ignoring\nparameters) of either application/x-www-form-urlencoded,\nmultipart/form-data, or text/plain), are always available and don't need\nto be listed by this header.\n\nThis header is required if the request has an\nAccess-Control-Request-Headers header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowHeaders),}","value":null,"is_literal":false}},"22:1189":{"id":"22:1189","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1165":{"id":"22:1165","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12442":{"id":"2:12442","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2717":{"id":"20:2717","crate_id":20,"name":"ACCEPT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Advertises which content encoding the client is able to understand.\n\nThe Accept-Encoding request HTTP header advertises which content\nencoding, usually a compression algorithm, the client is able to\nunderstand. Using content negotiation, the server selects one of the\nproposals, uses it and informs the client of its choice with the\nContent-Encoding response header.\n\nEven if both the client and the server supports the same compression\nalgorithms, the server may choose not to compress the body of a\nresponse, if the identity value is also acceptable. Two common cases\nlead to this:\n\n* The data to be sent is already compressed and a second compression\nwon't lead to smaller data to be transmitted. This may the case with\nsome image formats;\n\n* The server is overloaded and cannot afford the computational overhead\ninduced by the compression requirement. Typically, Microsoft recommends\nnot to compress if a server use more than 80 % of its computational\npower.\n\nAs long as the identity value, meaning no encryption, is not explicitly\nforbidden, by an identity;q=0 or a *;q=0 without another explicitly set\nvalue for identity, the server must never send back a 406 Not Acceptable\nerror.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptEncoding),}","value":null,"is_literal":false}},"34:367":{"id":"34:367","crate_id":34,"name":"boxed","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[119,4],"end":[121,44]},"visibility":"default","docs":"Turn this body into a boxed trait object.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Self"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:841":{"id":"22:841","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[954,4],"end":[954,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12472":{"id":"2:12472","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15264"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:46751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:227":{"id":"24:227","crate_id":24,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:228"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:933":{"id":"0:933","crate_id":0,"name":"io","span":{"filename":"src/upgrade.rs","begin":[49,4],"end":[49,13]},"visibility":"public","docs":"The original IO object used before the upgrade.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:2904":{"id":"2:2904","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2906"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:12434":{"id":"2:12434","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:297":{"id":"a:2:8352-0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:776":{"id":"0:776","crate_id":0,"name":"poll_read","span":{"filename":"src/upgrade.rs","begin":[111,4],"end":[117,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"24:370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:47":{"id":"22:47","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[206,4],"end":[206,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"1:6302":{"id":"1:6302","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6303","1:6304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:396":{"id":"34:396","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[216,4],"end":[219,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2753":{"id":"20:2753","crate_id":20,"name":"IF_MODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Makes a request conditional based on the modification date.\n\nThe If-Modified-Since request HTTP header makes the request conditional:\nthe server will send back the requested resource, with a 200 status,\nonly if it has been last modified after the given date. If the request\nhas not been modified since, the response will be a 304 without any\nbody; the Last-Modified header will contain the date of last\nmodification. Unlike If-Unmodified-Since, If-Modified-Since can only be\nused with a GET or HEAD.\n\nWhen used in combination with If-None-Match, it is ignored, unless the\nserver doesn't support If-None-Match.\n\nThe most common use case is to update a cached entity that has no\nassociated ETag.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfModifiedSince),}","value":null,"is_literal":false}},"20:2729":{"id":"20:2729","crate_id":20,"name":"ALLOW","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Lists the set of methods support by a resource.\n\nThis header must be sent if the server responds with a 405 Method Not\nAllowed status code to indicate which request methods can be used. An\nempty Allow header indicates that the resource allows no request\nmethods, which might occur temporarily for a given resource, for\nexample.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Allow),}","value":null,"is_literal":false}},"0:787":{"id":"0:787","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[169,0],"end":[182,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:788","0:789"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2762":{"id":"20:2762","crate_id":20,"name":"PRAGMA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"HTTP/1.0 header usually used for backwards compatibility.\n\nThe Pragma HTTP/1.0 general header is an implementation-specific header\nthat may have various effects along the request-response chain. It is\nused for backwards compatibility with HTTP/1.0 caches where the\nCache-Control HTTP/1.1 header is not yet present.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Pragma),}","value":null,"is_literal":false}},"0:418":{"id":"0:418","crate_id":0,"name":"Result","span":{"filename":"src/error.rs","begin":[6,0],"end":[6,51]},"visibility":"public","docs":"Result type often returned from methods that can have hyper `Error`s.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"std::result::Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]}}},"5:5405":{"id":"5:5405","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:931":{"id":"b:2:3667-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:39:181-0:766":{"id":"b:39:181-0:766","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12428":{"id":"2:12428","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264","str::rmatch_indices":"1:15269","`DoubleEndedIterator`":"2:7497"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:46584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1145":{"id":"22:1145","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2735":{"id":"20:2735","crate_id":20,"name":"CONTENT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Used to compress the media-type.\n\nWhen present, its value indicates what additional content encoding has\nbeen applied to the entity-body. It lets the client know, how to decode\nin order to obtain the media-type referenced by the Content-Type header.\n\nIt is recommended to compress data as much as possible and therefore to\nuse this field, but some types of resources, like jpeg images, are\nalready compressed.  Sometimes using additional compression doesn't\nreduce payload size and can even make the payload longer.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentEncoding),}","value":null,"is_literal":false}},"0:331":{"id":"0:331","crate_id":0,"name":"Error","span":{"filename":"src/body/body.rs","begin":[356,4],"end":[356,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"22:561":{"id":"22:561","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[528,4],"end":[528,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:21507":{"id":"2:21507","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21497","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2722":{"id":"20:2722","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_METHODS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Preflight header response indicating permitted access methods.\n\nThe Access-Control-Allow-Methods response header specifies the method or\nmethods allowed when accessing the resource in response to a preflight\nrequest.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowMethods),}","value":null,"is_literal":false}},"20:2730":{"id":"20:2730","crate_id":20,"name":"ALT_SVC","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Advertises the availability of alternate services to clients.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AltSvc),}","value":null,"is_literal":false}},"b:31:48-0:768":{"id":"b:31:48-0:768","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.17/src/future.rs","begin":[73,0],"end":[84,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["31:52","31:53","31:54"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"20:2769":{"id":"20:2769","crate_id":20,"name":"REFERRER_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Governs which referrer information should be included with requests\nmade.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ReferrerPolicy),}","value":null,"is_literal":false}},"20:3271":{"id":"20:3271","crate_id":20,"name":"Version","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/version.rs","begin":[26,0],"end":[26,25]},"visibility":"public","docs":"Represents a version of the HTTP spec.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1168":{"id":"22:1168","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[524,0],"end":[529,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:350"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5479":{"id":"1:5479","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5480","1:5481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7908":{"id":"2:7908","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7002","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"31:127":{"id":"31:127","crate_id":31,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:128","31:129","31:130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2781":{"id":"20:2781","crate_id":20,"name":"TRAILER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Allows the sender to include additional fields at the end of chunked\nmessages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Trailer),}","value":null,"is_literal":false}},"20:2745":{"id":"20:2745","crate_id":20,"name":"DATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains the date and time at which the message was originated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Date),}","value":null,"is_literal":false}},"b:39:181-0:768":{"id":"b:39:181-0:768","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:563":{"id":"22:563","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[538,4],"end":[538,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:934":{"id":"0:934","crate_id":0,"name":"read_buf","span":{"filename":"src/upgrade.rs","begin":[58,4],"end":[58,23]},"visibility":"public","docs":"A buffer of bytes that have been read but not processed as HTTP.\n\nFor instance, if the `Connection` is used for an HTTP upgrade request,\nit is possible the server sent back the first bytes of the new protocol\nalong with the response upgrade.\n\nYou will want to check for any existing bytes if you plan to continue\ncommunicating on the IO object.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"20:2773":{"id":"20:2773","crate_id":20,"name":"SEC_WEBSOCKET_EXTENSIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The |Sec-WebSocket-Extensions| header field is used in the WebSocket\nopening handshake. It is initially sent from the client to the\nserver, and then subsequently sent from the server to the client, to\nagree on a set of protocol-level extensions to use for the duration\nof the connection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketExtensions),}","value":null,"is_literal":false}},"b:39:181-0:297":{"id":"b:39:181-0:297","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:57":{"id":"22:57","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[433,4],"end":[433,35]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2606":{"id":"2:2606","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2608"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:45":{"id":"22:45","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[163,4],"end":[163,70]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2754":{"id":"20:2754","crate_id":20,"name":"IF_NONE_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nThe If-None-Match HTTP request header makes the request conditional. For\nGET and HEAD methods, the server will send back the requested resource,\nwith a 200 status, only if it doesn't have an ETag matching the given\nones. For other methods, the request will be processed only if the\neventually existing resource's ETag doesn't match any of the values\nlisted.\n\nWhen the condition fails for GET and HEAD methods, then the server must\nreturn HTTP status code 304 (Not Modified). For methods that apply\nserver-side changes, the status code 412 (Precondition Failed) is used.\nNote that the server generating a 304 response MUST generate any of the\nfollowing header fields that would have been sent in a 200 (OK) response\nto the same request: Cache-Control, Content-Location, Date, ETag,\nExpires, and Vary.\n\nThe comparison with the stored ETag uses the weak comparison algorithm,\nmeaning two files are considered identical not only if they are\nidentical byte to byte, but if the content is equivalent. For example,\ntwo pages that would differ only by the date of generation in the footer\nwould be considered as identical.\n\nWhen used in combination with If-Modified-Since, it has precedence (if\nthe server supports it).\n\nThere are two common use cases:\n\n* For `GET` and `HEAD` methods, to update a cached entity that has an associated ETag.\n* For other methods, and in particular for `PUT`, `If-None-Match` used with\nthe `*` value can be used to save a file not known to exist,\nguaranteeing that another upload didn't happen before, losing the data\nof the previous put; this problems is the variation of the lost update\nproblem.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfNoneMatch),}","value":null,"is_literal":false}},"b:2:2612-0:768":{"id":"b:2:2612-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::http::HeaderMap","name":"HeaderMap","id":"20:2381","glob":false}},"34:111":{"id":"34:111","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[47,4],"end":[50,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:413","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:413","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:380":{"id":"34:380","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[162,4],"end":[165,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12391":{"id":"2:12391","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15264","`None`":"2:44586","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2948-0:297":{"id":"b:2:2948-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2768":{"id":"20:2768","crate_id":20,"name":"REFERER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains the address of the previous web page from which a link to the\ncurrently requested page was followed.\n\nThe Referer header allows servers to identify where people are visiting\nthem from and may use that data for analytics, logging, or optimized\ncaching, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Referer),}","value":null,"is_literal":false}},"36:28":{"id":"36:28","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[286,4],"end":[286,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:19":{"id":"36:19","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[271,4],"end":[271,53]},"visibility":"default","docs":"Process the request and return the response asynchronously.\n\nThis function is expected to be callable off task. As such,\nimplementations should take care to not call `poll_ready`.\n\nBefore dispatching a request, `poll_ready` must be called and return\n`Poll::Ready(Ok(()))`.\n\n# Panics\n\nImplementations are permitted to panic if `call` is invoked without\nobtaining `Poll::Ready(Ok(()))` from `poll_ready`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["req",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:330":{"id":"0:330","crate_id":0,"name":"Data","span":{"filename":"src/body/body.rs","begin":[355,4],"end":[355,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"36:24":{"id":"36:24","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[278,4],"end":[278,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Response","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3239":{"id":"2:3239","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:259":{"id":"34:259","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[70,4],"end":[73,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:433":{"id":"0:433","crate_id":0,"name":"is_connect","span":{"filename":"src/error.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns true if this was an error from `Connect`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1193":{"id":"22:1193","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[541,0],"end":[612,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:354","0:361","0:365","0:369","0:371"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:39:181-0:931":{"id":"b:39:181-0:931","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[482,0],"end":[490,1]},"visibility":{"restricted":{"parent":"0:411","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9388","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:452"],"negative":false,"synthetic":false,"blanket_impl":null}},"36:13":{"id":"36:13","crate_id":36,"name":"Service","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["36:15","36:16","36:17","36:18","36:19"],"generics":{"params":[{"name":"Request","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:39:166-0:297":{"id":"b:39:166-0:297","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:346":{"id":"0:346","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[509,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:663","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:356":{"id":"34:356","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[59,4],"end":[62,54]},"visibility":"default","docs":"Poll for an optional **single** `HeaderMap` of trailers.\n\nThis function should only be called once `poll_data` returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"22:1179":{"id":"22:1179","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3106":{"id":"2:3106","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3108"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2732":{"id":"20:2732","crate_id":20,"name":"CACHE_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Specifies directives for caching mechanisms in both requests and\nresponses.\n\nCaching directives are unidirectional, meaning that a given directive in\na request is not implying that the same directive is to be given in the\nresponse.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::CacheControl),}","value":null,"is_literal":false}},"2:11442":{"id":"2:11442","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11443","2:11444"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"31:96":{"id":"31:96","crate_id":31,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:97","31:98","31:99"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:39:166-0:766":{"id":"b:39:166-0:766","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1169":{"id":"22:1169","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3071":{"id":"2:3071","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3073","2:3074"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:678":{"id":"0:678","crate_id":0,"name":"service_fn","span":{"filename":"src/service/util.rs","begin":[27,0],"end":[36,1]},"visibility":"public","docs":"Create a `Service` from a function.\n\n# Example\n\n```\nuse hyper::{Body, Request, Response, Version};\nuse hyper::service::service_fn;\n\nlet service = service_fn(|req: Request<Body>| async move {\n    if req.version() == Version::HTTP_11 {\n        Ok(Response::new(Body::from(\"Hello World\")))\n    } else {\n        // Note: it's usually better to return a Response\n        // with an appropriate StatusCode instead of an Err.\n        Err(\"not HTTP/1.1, abort connection\")\n    }\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ServiceFn","id":"0:682","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"R","kind":{"type":{"bounds":[],"default":null}}},{"name":"S","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"generic","inner":"S"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"42:280":{"id":"42:280","crate_id":42,"name":"Visit","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["42:281","42:282","42:283","42:284","42:285","42:286","42:287"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3166":{"id":"2:3166","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2766":{"id":"20:2766","crate_id":20,"name":"PUBLIC_KEY_PINS_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Sends reports of pinning violation to the report-uri specified in the\nheader.\n\nUnlike `Public-Key-Pins`, this header still allows browsers to connect\nto the server if the pinning is violated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPinsReportOnly),}","value":null,"is_literal":false}},"2:3142":{"id":"2:3142","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3144","2:3145"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12395":{"id":"2:12395","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15269","str::split_whitespace":"1:15269","prim@char":"1:15264","self::pattern":"2:11984","`DoubleEndedIterator`":"2:7497"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:46434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2775":{"id":"20:2775","crate_id":20,"name":"SEC_WEBSOCKET_PROTOCOL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The |Sec-WebSocket-Protocol| header field is used in the WebSocket\nopening handshake. It is sent from the client to the server and back\nfrom the server to the client to confirm the subprotocol of the\nconnection.  This enables scripts to both select a subprotocol and be\nsure that the server agreed to serve that subprotocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketProtocol),}","value":null,"is_literal":false}},"22:56":{"id":"22:56","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[413,4],"end":[413,32]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:335":{"id":"0:335","crate_id":0,"name":"size_hint","span":{"filename":"src/body/body.rs","begin":[408,4],"end":[432,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2948-0:421":{"id":"b:2:2948-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2779":{"id":"20:2779","crate_id":20,"name":"STRICT_TRANSPORT_SECURITY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Tells the client to communicate with HTTPS instead of using HTTP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::StrictTransportSecurity),}","value":null,"is_literal":false}},"b:2:2609-0:766":{"id":"b:2:2609-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[507,0],"end":[515,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:663","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:770":{"id":"0:770","crate_id":0,"name":"on","span":{"filename":"src/upgrade.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"Gets a pending HTTP upgrade from this message.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["msg",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::CanUpgrade","id":"0:809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"22:52":{"id":"22:52","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[333,4],"end":[333,32]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:787":{"id":"20:787","crate_id":20,"name":"InvalidHeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/value.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` from a string or byte\nslice.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:4427":{"id":"1:4427","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4428","1:4429","1:4430","1:4431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3493":{"id":"2:3493","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"42:682":{"id":"42:682","crate_id":42,"name":"Subscriber","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["42:683","42:684","42:685","42:686","42:687","42:688","42:689","42:690","42:691","42:692","42:693","42:694","42:695","42:696"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"20:2719":{"id":"20:2719","crate_id":20,"name":"ACCEPT_RANGES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Marker used by the server to advertise partial request support.\n\nThe Accept-Ranges response HTTP header is a marker used by the server to\nadvertise its support of partial requests. The value of this field\nindicates the unit that can be used to define a range.\n\nIn presence of an Accept-Ranges header, the browser may try to resume an\ninterrupted download, rather than to start it from the start again.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptRanges),}","value":null,"is_literal":false}},"31:27":{"id":"31:27","crate_id":31,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:28"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:1188":{"id":"22:1188","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12410":{"id":"2:12410","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264","str::rsplitn":"1:15269"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:46538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"42:288":{"id":"42:288","crate_id":42,"name":"Value","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["42:289"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"42:785","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:591":{"id":"20:591","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3491,4],"end":[3491,43]},"visibility":{"restricted":{"parent":"20:526","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:39:181-0:312":{"id":"b:39:181-0:312","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2746":{"id":"20:2746","crate_id":20,"name":"ETAG","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Identifier for a specific version of a resource.\n\nThis header allows caches to be more efficient, and saves bandwidth, as\na web server does not need to send a full response if the content has\nnot changed. On the other side, if the content has changed, etags are\nuseful to help prevent simultaneous updates of a resource from\noverwriting each other (\"mid-air collisions\").\n\nIf the resource at a given URL changes, a new Etag value must be\ngenerated. Etags are therefore similar to fingerprints and might also be\nused for tracking purposes by some servers. A comparison of them allows\nto quickly determine whether two representations of a resource are the\nsame, but they might also be set to persist indefinitely by a tracking\nserver.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Etag),}","value":null,"is_literal":false}},"0:781":{"id":"0:781","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/upgrade.rs","begin":[141,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3444":{"id":"2:3444","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3445","2:3446","2:3447","2:3448"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3449","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2609-0:768":{"id":"b:2:2609-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2720":{"id":"20:2720","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_CREDENTIALS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Preflight response indicating if the response to the request can be\nexposed to the page.\n\nThe Access-Control-Allow-Credentials response header indicates whether\nor not the response to the request can be exposed to the page. It can be\nexposed when the true value is returned; it can't in other cases.\n\nCredentials are cookies, authorization headers or TLS client\ncertificates.\n\nWhen used as part of a response to a preflight request, this indicates\nwhether or not the actual request can be made using credentials. Note\nthat simple GET requests are not preflighted, and so if a request is\nmade for a resource with credentials, if this header is not returned\nwith the resource, the response is ignored by the browser and not\nreturned to web content.\n\nThe Access-Control-Allow-Credentials header works in conjunction with\nthe XMLHttpRequest.withCredentials property or with the credentials\noption in the Request() constructor of the Fetch API. Credentials must\nbe set on both sides (the Access-Control-Allow-Credentials header and in\nthe XHR or Fetch request) in order for the CORS request with credentials\nto succeed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n               Repr::Standard(StandardHeader::AccessControlAllowCredentials),}","value":null,"is_literal":false}},"0:312":{"id":"0:312","crate_id":0,"name":"Sender","span":{"filename":"src/body/body.rs","begin":[109,0],"end":[113,1]},"visibility":"public","docs":"A sender half created through [`Body::channel()`].\n\nUseful when wanting to stream chunks from another thread.\n\n## Body Closing\n\nNote that the request body will always be closed normally when the sender is dropped (meaning\nthat the empty terminating chunk will be sent to the remote). If you desire to close the\nconnection with an incomplete response (e.g. in the case of an error during asynchronous\nprocessing), call the [`Sender::abort()`] method to abort the body in an abnormal fashion.\n\n[`Body::channel()`]: struct.Body.html#method.channel\n[`Sender::abort()`]: struct.Sender.html#method.abort","links":{},"attrs":["#[must_use = \"Sender does nothing unless sent on\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:353","a:2:3004-0:312","a:2:3016-0:312","a:2:3045-0:312","a:2:8351-0:312","a:2:8352-0:312","b:2:2937-0:312","b:2:2933-0:312","b:2:2948-0:312","b:2:2943-0:312","b:2:2609-0:312","b:2:2612-0:312","b:2:3667-0:312","b:39:166-0:312","b:39:181-0:312","0:372"]}},"b:2:2933-0:421":{"id":"b:2:2933-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1196":{"id":"22:1196","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5421":{"id":"5:5421","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15269"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8874":{"id":"2:8874","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875","2:8876","2:8877"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12352":{"id":"2:12352","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"34:294":{"id":"34:294","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[68,4],"end":[71,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7497":{"id":"2:7497","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7498","2:7499","2:7500","2:7501","2:7505","2:7508"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7904":{"id":"2:7904","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:784":{"id":"0:784","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[151,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:364":{"id":"34:364","crate_id":34,"name":"map_err","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[110,4],"end":[113,35]},"visibility":"default","docs":"Maps this body's error value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2778":{"id":"20:2778","crate_id":20,"name":"SET_COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Used to send cookies from the server to the user agent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SetCookie),}","value":null,"is_literal":false}},"0:436":{"id":"0:436","crate_id":0,"name":"is_timeout","span":{"filename":"src/error.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if the error was caused by a timeout.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:30:504-0:768":{"id":"b:30:504-0:768","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/future/try_future/mod.rs","begin":[134,0],"end":[134,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Fut"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["ok_into","map_ok","try_flatten","try_poll_unpin","and_then","map_ok_or_else","or_else","map_err","inspect_ok","inspect_err","err_into","unwrap_or_else","into_future","try_flatten_stream"],"trait":{"kind":"resolved_path","inner":{"name":"TryFutureExt","id":"30:506","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Fut"}}},"20:3215":{"id":"20:3215","crate_id":20,"name":"Uri","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/uri/mod.rs","begin":[96,0],"end":[100,1]},"visibility":"public","docs":"The URI component of a request.\n\nFor HTTP 1, this is included as part of the request line. From Section 5.3,\nRequest Target:\n\n> Once an inbound connection is obtained, the client sends an HTTP\n> request message (Section 3) with a request-target derived from the\n> target URI.  There are four distinct formats for the request-target,\n> depending on both the method being requested and whether the request\n> is to a proxy.\n>\n> ```notrust\n> request-target = origin-form\n>                / absolute-form\n>                / authority-form\n>                / asterisk-form\n> ```\n\nThe URI is structured as follows:\n\n```notrust\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-|   |-------------------------------||--------| |-------------------| |-----|\n |                  |                       |               |              |\nscheme          authority                 path            query         fragment\n```\n\nFor HTTP 2.0, the URI is encoded using pseudoheaders.\n\n# Examples\n\n```\nuse http::Uri;\n\nlet uri = \"/foo/bar?baz\".parse::<Uri>().unwrap();\nassert_eq!(uri.path(), \"/foo/bar\");\nassert_eq!(uri.query(), Some(\"baz\"));\nassert_eq!(uri.host(), None);\n\nlet uri = \"https://www.rust-lang.org/install.html\".parse::<Uri>().unwrap();\nassert_eq!(uri.scheme_str(), Some(\"https\"));\nassert_eq!(uri.host(), Some(\"www.rust-lang.org\"));\nassert_eq!(uri.path(), \"/install.html\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:12718":{"id":"2:12718","crate_id":2,"name":"into_future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:12710","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:779":{"id":"0:779","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/upgrade.rs","begin":[129,4],"end":[135,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"io::IoSlice","id":"1:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12384":{"id":"2:12384","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1190":{"id":"22:1190","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:543":{"id":"20:543","crate_id":20,"name":"AsHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:544","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:504":{"id":"20:504","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3315,4],"end":[3315,41]},"visibility":{"restricted":{"parent":"20:475","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5420":{"id":"5:5420","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15269"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:381":{"id":"34:381","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[169,4],"end":[172,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:76":{"id":"22:76","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[816,4],"end":[816,59]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:319":{"id":"0:319","crate_id":0,"name":"empty","span":{"filename":"src/body/body.rs","begin":[130,4],"end":[132,5]},"visibility":"public","docs":"Create an empty `Body` stream.\n\n# Example\n\n```\nuse hyper::{Body, Request};\n\n// create a `GET /` request\nlet get = Request::new(Body::empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1192":{"id":"22:1192","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"30:6043":{"id":"30:6043","crate_id":30,"name":"LocalSpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6044"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LocalSpawn","id":"33:19","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12717":{"id":"2:12717","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"F"},"generics":{"params":[],"where_predicates":[]}}},"20:2638":{"id":"20:2638","crate_id":20,"name":"HeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[32,0],"end":[34,1]},"visibility":"public","docs":"Represents an HTTP header field name\n\nHeader field names identify the header. Header sets may include multiple\nheaders with the same name. The HTTP specification defines a number of\nstandard headers, but HTTP messages may include non-standard header names as\nwell as long as they adhere to the specification.\n\n`HeaderName` is used as the [`HeaderMap`] key. Constants are available for\nall standard header names in the [`header`] module.\n\n# Representation\n\n`HeaderName` represents standard header names using an `enum`, as such they\nwill not require an allocation for storage. All custom header names are\nlower cased upon conversion to a `HeaderName` value. This avoids the\noverhead of dynamically doing lower case conversion during the hash code\ncomputation and the comparison operation.\n\n[`HeaderMap`]: struct.HeaderMap.html\n[`header`]: index.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:5150":{"id":"5:5150","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5152","5:5153"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"22:1160":{"id":"22:1160","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:5":{"id":"20:5","crate_id":20,"name":"header","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/lib.rs","begin":[173,0],"end":[173,15]},"visibility":"public","docs":"HTTP header types\n\nThe module provides [`HeaderName`], [`HeaderMap`], and a number of types\nused for interacting with `HeaderMap`. These types allow representing both\nHTTP/1 and HTTP/2 headers.\n\n# `HeaderName`\n\nThe `HeaderName` type represents both standard header names as well as\ncustom header names. The type handles the case insensitive nature of header\nnames and is used as the key portion of `HeaderMap`. Header names are\nnormalized to lower case. In other words, when creating a `HeaderName` with\na string, even if upper case characters are included, when getting a string\nrepresentation of the `HeaderName`, it will be all lower case. This allows\nfor faster `HeaderMap` comparison operations.\n\nThe internal representation is optimized to efficiently handle the cases\nmost commonly encountered when working with HTTP. Standard header names are\nspecial cased and are represented internally as an enum. Short custom\nheaders will be stored directly in the `HeaderName` struct and will not\nincur any allocation overhead, however longer strings will require an\nallocation for storage.\n\n## Limitations\n\n`HeaderName` has a max length of 32,768 for header names. Attempting to\nparse longer names will result in a panic.\n\n# `HeaderMap`\n\n`HeaderMap` is a map structure of header names highly optimized for use\ncases common with HTTP. It is a [multimap] structure, where each header name\nmay have multiple associated header values. Given this, some of the APIs\ndiverge from [`HashMap`].\n\n## Overview\n\nJust like `HashMap` in Rust's stdlib, `HeaderMap` is based on [Robin Hood\nhashing]. This algorithm tends to reduce the worst case search times in the\ntable and enables high load factors without seriously affecting performance.\nInternally, keys and values are stored in vectors. As such, each insertion\nwill not incur allocation overhead. However, once the underlying vector\nstorage is full, a larger vector must be allocated and all values copied.\n\n## Deterministic ordering\n\nUnlike Rust's `HashMap`, values in `HeaderMap` are deterministically\nordered. Roughly, values are ordered by insertion. This means that a\nfunction that deterministically operates on a header map can rely on the\niteration order to remain consistent across processes and platforms.\n\n## Adaptive hashing\n\n`HeaderMap` uses an adaptive hashing strategy in order to efficiently handle\nmost common cases. All standard headers have statically computed hash values\nwhich removes the need to perform any hashing of these headers at runtime.\nThe default hash function emphasizes performance over robustness. However,\n`HeaderMap` detects high collision rates and switches to a secure hash\nfunction in those events. The threshold is set such that only denial of\nservice attacks should trigger it.\n\n## Limitations\n\n`HeaderMap` can store a maximum of 32,768 headers (header name / value\npairs). Attempting to insert more will result in a panic.\n\n[`HeaderName`]: struct.HeaderName.html\n[`HeaderMap`]: struct.HeaderMap.html\n[multimap]: https://en.wikipedia.org/wiki/Multimap\n[`HashMap`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html\n[Robin Hood hashing]: https://en.wikipedia.org/wiki/Hash_table#Robin_Hood_hashing","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["20:543","20:2442","20:2464","20:2455","20:2381","20:489","20:2410","20:2391","20:2399","20:2418","20:2489","20:2477","20:2522","20:2499","20:2510","20:2426","20:2434","20:2638","20:631","20:2969","20:787","20:2977","20:2715","20:2716","20:2717","20:2718","20:2719","20:2720","20:2721","20:2722","20:2723","20:2724","20:2725","20:2726","20:2727","20:2728","20:2729","20:2730","20:2731","20:2732","20:2733","20:2734","20:2735","20:2736","20:2737","20:2738","20:2739","20:2740","20:2741","20:2742","20:2743","20:2744","20:2745","20:2746","20:2747","20:2748","20:2749","20:2750","20:2751","20:2752","20:2753","20:2754","20:2755","20:2756","20:2757","20:2758","20:2759","20:2760","20:2761","20:2762","20:2763","20:2764","20:2765","20:2766","20:2767","20:2768","20:2769","20:2770","20:2771","20:2772","20:2773","20:2774","20:2775","20:2776","20:2777","20:2778","20:2779","20:2780","20:2781","20:2782","20:2784","20:2785","20:2783","20:2786","20:2787","20:2788","20:2789","20:2790","20:2791","20:2792","20:2793"]}},"2:12014":{"id":"2:12014","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:292":{"id":"34:292","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[53,4],"end":[53,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"0:773":{"id":"0:773","crate_id":0,"name":"downcast","span":{"filename":"src/upgrade.rs","begin":[95,4],"end":[107,5]},"visibility":"public","docs":"Tries to downcast the internal trait object to the type passed.\n\nOn success, returns the downcasted parts. On error, returns the\n`Upgraded` back.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:227","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:306","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2736":{"id":"20:2736","crate_id":20,"name":"CONTENT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Used to describe the languages intended for the audience.\n\nThis header allows a user to differentiate according to the users' own\npreferred language. For example, if \"Content-Language: de-DE\" is set, it\nsays that the document is intended for German language speakers\n(however, it doesn't indicate the document is written in German. For\nexample, it might be written in English as part of a language course for\nGerman speakers).\n\nIf no Content-Language is specified, the default is that the content is\nintended for all language audiences. Multiple language tags are also\npossible, as well as applying the Content-Language header to various\nmedia types and not only to textual documents.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLanguage),}","value":null,"is_literal":false}},"b:24:2642-0:766":{"id":"b:24:2642-0:766","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.12.0/src/io/util/async_write_ext.rs","begin":[1293,0],"end":[1293,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:306","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["write_i128_le","write_u64_le","write_i16_le","write_i32","write_all","write_u32","write_f32","write_f32_le","write_i64_le","write_u32_le","write_i64","write_buf","write_i8","write_u8","write_u64","write_f64","flush","shutdown","write_f64_le","write_u128_le","write_i32_le","write_i128","write_all_buf","write_vectored","write_u16","write_i16","write_u128","write_u16_le","write"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWriteExt","id":"24:4165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"W"}}},"b:2:2937-0:312":{"id":"b:2:2937-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3016":{"id":"2:3016","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:13047":{"id":"2:13047","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13048","2:13049","2:13050","2:13051"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4349":{"id":"1:4349","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4350","1:4351","1:4353","1:4354","1:4355","1:4356","1:4357","1:4358","1:4359","1:4360","1:4362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"33:19":{"id":"33:19","crate_id":33,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:20","33:21"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:792":{"id":"0:792","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[185,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7416":{"id":"2:7416","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7418"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:562":{"id":"22:562","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[533,4],"end":[533,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:931":{"id":"b:2:2609-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2948-0:312":{"id":"b:2:2948-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:287":{"id":"34:287","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[47,0],"end":[83,1]},"visibility":{"restricted":{"parent":"34:261","path":"::combinators::map_err"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null}}},{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:291","34:292","34:293","34:294","34:295","34:296"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12457":{"id":"2:12457","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12716":{"id":"2:12716","crate_id":2,"name":"Output","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[38,0],"end":[38,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"tower_service::Service","name":"Service","id":"36:13","glob":false}},"22:74":{"id":"22:74","crate_id":22,"name":"get_f64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[776,4],"end":[776,32]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:266":{"id":"24:266","crate_id":24,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:267","24:268"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9587":{"id":"2:9587","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9588","2:9590"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:54":{"id":"22:54","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[373,4],"end":[373,32]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12372":{"id":"2:12372","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:46420","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:775":{"id":"0:775","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[110,0],"end":[118,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:227","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:776"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:293":{"id":"34:293","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[55,4],"end":[58,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"30:4585":{"id":"30:4585","crate_id":30,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:4586","30:4588","30:4591","30:4594","30:4597","30:4600","30:4602","30:4604","30:4605","30:4606","30:4609","30:4612","30:4615","30:4619","30:4621","30:4622","30:4625","30:4629","30:4630","30:4634","30:4635","30:4636","30:4637"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"31:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7633":{"id":"2:7633","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7634","2:7635","2:7636","2:7637","2:7639","2:7642","2:7643","2:7644","2:7645","2:7647","2:7649","2:7650","2:7652","2:7655","2:7662","2:7664","2:7667","2:7668","2:7669","2:7671","2:7673","2:7676","2:7677","2:7678","2:7682","2:7685","2:7686","2:7687","2:7689","2:7690","2:7692","2:7702","2:7717","2:7719","2:7723","2:7732","2:7735","2:7737","2:7744","2:7751","2:7758","2:7767","2:7778","2:7785","2:7792","2:7793","2:7794","2:7806","2:7813","2:7825","2:7832","2:7833","2:7838","2:7841","2:7844","2:7845","2:7847","2:7849","2:7852","2:7855","2:7858","2:7861","2:7864","2:7867","2:7869","2:7871","2:7873","2:7875","2:7877","2:7878","2:7886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2612-0:421":{"id":"b:2:2612-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2660":{"id":"2:2660","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:1161":{"id":"22:1161","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:213":{"id":"34:213","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[38,4],"end":[38,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"a:2:8352-0:312":{"id":"a:2:8352-0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:12425":{"id":"2:12425","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15269","`DoubleEndedIterator`":"2:7497","prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:46656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2764":{"id":"20:2764","crate_id":20,"name":"PROXY_AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent to a proxy server.\n\nThis header is usually included after the server has responded with a\n407 Proxy Authentication Required status and the Proxy-Authenticate\nheader.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthorization),}","value":null,"is_literal":false}},"2:2939":{"id":"2:2939","crate_id":2,"name":"from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"36:25":{"id":"36:25","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[279,4],"end":[279,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:7412":{"id":"2:7412","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7414"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:69":{"id":"22:69","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[673,4],"end":[673,51]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:328":{"id":"0:328","crate_id":0,"name":"default","span":{"filename":"src/body/body.rs","begin":[349,4],"end":[351,5]},"visibility":"default","docs":"Returns `Body::empty()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2755":{"id":"20:2755","crate_id":20,"name":"IF_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Makes a request conditional based on range.\n\nThe If-Range HTTP request header makes a range request conditional: if\nthe condition is fulfilled, the range request will be issued and the\nserver sends back a 206 Partial Content answer with the appropriate\nbody. If the condition is not fulfilled, the full resource is sent back,\nwith a 200 OK status.\n\nThis header can be used either with a Last-Modified validator, or with\nan ETag, but not with both.\n\nThe most common use case is to resume a download, to guarantee that the\nstored resource has not been modified since the last fragment has been\nreceived.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfRange),}","value":null,"is_literal":false}},"2:12356":{"id":"2:12356","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15278","str::as_mut_ptr":"1:15269"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:297":{"id":"a:2:8351-0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:6184":{"id":"1:6184","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6185","1:6186","1:6187","1:6188","1:6190","1:6192","1:6193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2776":{"id":"20:2776","crate_id":20,"name":"SEC_WEBSOCKET_VERSION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The |Sec-WebSocket-Version| header field is used in the WebSocket\nopening handshake.  It is sent from the client to the server to\nindicate the protocol version of the connection.  This enables\nservers to correctly interpret the opening handshake and subsequent\ndata being sent from the data, and close the connection if the server\ncannot interpret that data in a safe manner.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketVersion),}","value":null,"is_literal":false}},"0:338":{"id":"0:338","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[436,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9388":{"id":"2:9388","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9389"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:333":{"id":"0:333","crate_id":0,"name":"poll_trailers","span":{"filename":"src/body/body.rs","begin":[365,4],"end":[393,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:352","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3245":{"id":"2:3245","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3248","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2522":{"id":"20:2522","crate_id":20,"name":"ValueDrain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[208,0],"end":[212,1]},"visibility":"public","docs":"An drain iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:5399":{"id":"5:5399","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:3090":{"id":"20:3090","crate_id":20,"name":"StatusCode","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/status.rs","begin":[45,0],"end":[45,34]},"visibility":"public","docs":"An HTTP status code (`status-code` in RFC 7230 et al.).\n\nConstants are provided for known status codes, including those in the IANA\n[HTTP Status Code Registry](\nhttps://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n\nStatus code values in the range 100-999 (inclusive) are supported by this\ntype. Values in the range 100-599 are semantically classified by the most\nsignificant digit. See [`StatusCode::is_success`], etc. Values above 599\nare unclassified but allowed for legacy compatibility, though their use is\ndiscouraged. Applications may interpret such values as protocol errors.\n\n# Examples\n\n```\nuse http::StatusCode;\n\nassert_eq!(StatusCode::from_u16(200).unwrap(), StatusCode::OK);\nassert_eq!(StatusCode::NOT_FOUND.as_u16(), 404);\nassert!(StatusCode::OK.is_success());\n```","links":{"`StatusCode::is_success`":"20:3090"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:9332":{"id":"2:9332","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9333","2:9334","2:9336"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2791":{"id":"20:2791","crate_id":20,"name":"X_DNS_PREFETCH_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Controls DNS prefetching.\n\nThe `x-dns-prefetch-control` HTTP response header controls DNS\nprefetching, a feature by which browsers proactively perform domain name\nresolution on both links that the user may choose to follow as well as\nURLs for items referenced by the document, including images, CSS,\nJavaScript, and so forth.\n\nThis prefetching is performed in the background, so that the DNS is\nlikely to have been resolved by the time the referenced items are\nneeded. This reduces latency when the user clicks a link.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XDnsPrefetchControl),}","value":null,"is_literal":false}},"34:355":{"id":"34:355","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[51,4],"end":[54,55]},"visibility":"default","docs":"Attempt to pull out the next data buffer of this stream.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"1:861":{"id":"1:861","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:862","1:863","1:864","1:865","1:866","1:867","1:868"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:395":{"id":"34:395","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[214,4],"end":[214,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:3667-0:297":{"id":"b:2:3667-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12454":{"id":"2:12454","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:766":{"id":"b:2:3667-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"24:4160":{"id":"24:4160","crate_id":24,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4161","24:4162","24:4163"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"24:266","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:3004-0:931":{"id":"a:2:3004-0:931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2510":{"id":"20:2510","crate_id":20,"name":"ValueIterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[198,0],"end":[204,1]},"visibility":"public","docs":"A mutable iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:9396":{"id":"2:9396","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:931":{"id":"0:931","crate_id":0,"name":"Parts","span":{"filename":"src/upgrade.rs","begin":[47,0],"end":[60,1]},"visibility":"public","docs":"The deconstructed parts of an [`Upgraded`](Upgraded) type.\n\nIncludes the original IO type, and a read buffer of bytes that the\nHTTP state machine may have already read before completing an upgrade.","links":{"Upgraded":"0:766"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":["0:933","0:934"],"impls":["a:2:3004-0:931","a:2:3016-0:931","a:2:3045-0:931","a:2:8351-0:931","a:2:8352-0:931","b:2:2937-0:931","b:2:2933-0:931","b:2:2948-0:931","b:2:2943-0:931","b:2:2609-0:931","b:2:2612-0:931","b:2:3667-0:931","b:39:166-0:931","b:39:181-0:931","0:936"]}},"2:9956":{"id":"2:9956","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:9958","2:9959","2:9960","2:9961","2:9962","2:9963","2:9964"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:9947","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12358":{"id":"2:12358","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:44586"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:768":{"id":"a:2:8352-0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"22:1156":{"id":"22:1156","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:406":{"id":"34:406","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4716":{"id":"1:4716","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4717","1:4718"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:931":{"id":"b:2:2943-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2609-0:297":{"id":"b:2:2609-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5719":{"id":"5:5719","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5720"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3076":{"id":"2:3076","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078","2:3079"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:140":{"id":"22:140","crate_id":22,"name":"BufMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["22:141","22:142","22:143","22:144","22:145","22:147","22:148","22:149","22:150","22:151","22:152","22:153","22:154","22:155","22:156","22:157","22:158","22:159","22:160","22:161","22:162","22:163","22:164","22:165","22:166","22:167","22:168","22:169","22:170","22:171","22:172","22:173","22:174","22:175","22:176","22:177"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[120,0],"end":[148,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:306","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:778","0:779","0:780","0:781","0:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:467":{"id":"34:467","crate_id":34,"name":"SizeHint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/size_hint.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"A `Body` size hint\n\nThe default implementation returns:\n\n* 0 for `lower`\n* `None` for `upper`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:214":{"id":"34:214","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[40,4],"end":[43,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:49":{"id":"22:49","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[250,4],"end":[250,47]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:931":{"id":"a:2:8352-0:931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2982":{"id":"2:2982","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2983"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:93":{"id":"22:93","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1039,0],"end":[1070,1]},"visibility":{"restricted":{"parent":"22:7","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2901","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"1:10566","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:95","22:96","22:97"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:73":{"id":"22:73","crate_id":22,"name":"get_f32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[755,4],"end":[755,35]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:361":{"id":"34:361","crate_id":34,"name":"map_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[100,4],"end":[104,15]},"visibility":"default","docs":"Maps this body's data value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"B","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:209":{"id":"34:209","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[33,0],"end":[61,1]},"visibility":{"restricted":{"parent":"34:175","path":"::combinators::box_body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["34:212","34:213","34:214","34:215","34:216","34:217"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2603":{"id":"2:2603","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2605"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"20:2749":{"id":"20:2749","crate_id":20,"name":"FORWARDED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains information from the client-facing side of proxy servers that\nis altered or lost when a proxy is involved in the path of the request.\n\nThe alternative and de-facto standard versions of this header are the\nX-Forwarded-For, X-Forwarded-Host and X-Forwarded-Proto headers.\n\nThis header is used for debugging, statistics, and generating\nlocation-dependent content and by design it exposes privacy sensitive\ninformation, such as the IP address of the client. Therefore the user's\nprivacy must be kept in mind when deploying this header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Forwarded),}","value":null,"is_literal":false}},"22:44":{"id":"22:44","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[133,4],"end":[133,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk()` should return an\nempty slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"22:1170":{"id":"22:1170","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12419":{"id":"2:12419","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1194":{"id":"22:1194","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:232":{"id":"22:232","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[137,4],"end":[137,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,74],"end":[65,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Version","name":"Version","id":"20:3271","glob":false}},"1:5485":{"id":"1:5485","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5486","1:5487","1:5488","1:5489","1:5490","1:5491","1:5492","1:5493","1:5494","1:5495","1:5496","1:5497","1:5498","1:5499","1:5500","1:5501"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:11994":{"id":"2:11994","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11996","2:11997","2:11998","2:11999","2:12000","2:12001","2:12002"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:936":{"id":"0:936","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[46,9],"end":[46,14]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:938"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3228":{"id":"2:3228","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:4434":{"id":"1:4434","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4435","1:4436","1:4437","1:4439","1:4440","1:4442","1:4443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12438":{"id":"2:12438","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:398":{"id":"34:398","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[236,4],"end":[236,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1164":{"id":"22:1164","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:583":{"id":"20:583","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3470,4],"end":[3470,35]},"visibility":{"restricted":{"parent":"20:526","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:21653":{"id":"2:21653","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:22219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:772":{"id":"0:772","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[80,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:773"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:72":{"id":"22:72","crate_id":22,"name":"get_f32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[734,4],"end":[734,32]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:435":{"id":"0:435","crate_id":0,"name":"is_body_write_aborted","span":{"filename":"src/error.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns true if the body write was aborted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:357":{"id":"34:357","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[71,4],"end":[71,35]},"visibility":"default","docs":"Returns `true` when the end of stream has been reached.\n\nAn end of stream means that both `poll_data` and `poll_trailers` will\nreturn `None`.\n\nA return value of `false` **does not** guarantee that a value will be\nreturned from `poll_stream` or `poll_trailers`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:1355":{"id":"20:1355","crate_id":20,"name":"Request","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/request.rs","begin":[157,0],"end":[160,1]},"visibility":"public","docs":"Represents an HTTP request.\n\nAn HTTP request consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\n# Examples\n\nCreating a `Request` to send\n\n```no_run\nuse http::{Request, Response};\n\nlet mut request = Request::builder()\n    .uri(\"https://www.rust-lang.org/\")\n    .header(\"User-Agent\", \"my-awesome-agent/1.0\");\n\nif needs_awesome_header() {\n    request = request.header(\"Awesome\", \"yes\");\n}\n\nlet response = send(request.body(()).unwrap());\n\n# fn needs_awesome_header() -> bool {\n#     true\n# }\n#\nfn send(req: Request<()>) -> Response<()> {\n    // ...\n# panic!()\n}\n```\n\nInspecting a request to see what was sent.\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    if req.uri() != \"/awesome-url\" {\n        return Response::builder()\n            .status(StatusCode::NOT_FOUND)\n            .body(())\n    }\n\n    let has_awesome_header = req.headers().contains_key(\"Awesome\");\n    let body = req.body();\n\n    // ...\n# panic!()\n}\n```\n\nDeserialize a request of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::de;\n\nfn deserialize<T>(req: Request<Vec<u8>>) -> serde_json::Result<Request<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a request to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::ser;\n\nfn serialize<T>(req: Request<T>) -> serde_json::Result<Request<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3449":{"id":"2:3449","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:233":{"id":"22:233","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[141,4],"end":[141,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2933-0:766":{"id":"b:2:2933-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2734":{"id":"20:2734","crate_id":20,"name":"CONTENT_DISPOSITION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates if the content is expected to be displayed inline.\n\nIn a regular HTTP response, the Content-Disposition response header is a\nheader indicating if the content is expected to be displayed inline in\nthe browser, that is, as a Web page or as part of a Web page, or as an\nattachment, that is downloaded and saved locally.\n\nIn a multipart/form-data body, the HTTP Content-Disposition general\nheader is a header that can be used on the subpart of a multipart body\nto give information about the field it applies to. The subpart is\ndelimited by the boundary defined in the Content-Type header. Used on\nthe body itself, Content-Disposition has no effect.\n\nThe Content-Disposition header is defined in the larger context of MIME\nmessages for e-mail, but only a subset of the possible parameters apply\nto HTTP forms and POST requests. Only the value form-data, as well as\nthe optional directive name and filename, can be used in the HTTP\ncontext.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentDisposition),}","value":null,"is_literal":false}},"34:384":{"id":"34:384","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[185,0],"end":[210,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["34:386","34:387","34:388","34:389","34:390","34:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9392":{"id":"2:9392","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3300":{"id":"2:3300","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3302","2:3303"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"36:16":{"id":"36:16","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[239,4],"end":[239,15]},"visibility":"default","docs":"Errors produced by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"bounds":[],"default":null}},"a:2:3004-0:768":{"id":"a:2:3004-0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2772":{"id":"20:2772","crate_id":20,"name":"SEC_WEBSOCKET_ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"The |Sec-WebSocket-Accept| header field is used in the WebSocket\nopening handshake. It is sent from the server to the client to\nconfirm that the server is willing to initiate the WebSocket\nconnection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketAccept),}","value":null,"is_literal":false}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[354,0],"end":[433,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:330","0:331","0:332","0:333","0:334","0:335"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2739":{"id":"20:2739","crate_id":20,"name":"CONTENT_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates where in a full body message a partial message belongs.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentRange),}","value":null,"is_literal":false}},"a:2:8351-0:421":{"id":"a:2:8351-0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3132":{"id":"2:3132","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134","2:3135"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3098":{"id":"2:3098","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3099","2:3100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"36:29":{"id":"36:29","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[291,0],"end":[306,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["36:32","36:33","36:34","36:35","36:36"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:388":{"id":"34:388","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[189,4],"end":[192,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2765":{"id":"20:2765","crate_id":20,"name":"PUBLIC_KEY_PINS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Associates a specific cryptographic public key with a certain server.\n\nThis decreases the risk of MITM attacks with forged certificates. If one\nor several keys are pinned and none of them are used by the server, the\nbrowser will not accept the response as legitimate, and will not display\nit.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPins),}","value":null,"is_literal":false}},"a:2:3016-0:768":{"id":"a:2:3016-0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2612-0:312":{"id":"b:2:2612-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:402":{"id":"34:402","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[246,4],"end":[246,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:9400":{"id":"2:9400","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2731":{"id":"20:2731","crate_id":20,"name":"AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent with a server.\n\nUsually this header is included after the server has responded with a\n401 Unauthorized status and the WWW-Authenticate header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Authorization),}","value":null,"is_literal":false}},"b:2:2943-0:766":{"id":"b:2:2943-0:766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:489":{"id":"20:489","crate_id":20,"name":"IntoHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:490","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3304":{"id":"2:3304","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3300","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:217":{"id":"34:217","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[58,4],"end":[58,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2741":{"id":"20:2741","crate_id":20,"name":"CONTENT_SECURITY_POLICY_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Allows experimenting with policies by monitoring their effects.\n\nThe HTTP Content-Security-Policy-Report-Only response header allows web\ndevelopers to experiment with policies by monitoring (but not enforcing)\ntheir effects. These violation reports consist of JSON documents sent\nvia an HTTP POST request to the specified URI.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n               Repr::Standard(StandardHeader::ContentSecurityPolicyReportOnly),}","value":null,"is_literal":false}},"22:1151":{"id":"22:1151","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1154":{"id":"22:1154","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1172":{"id":"22:1172","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:320":{"id":"0:320","crate_id":0,"name":"channel","span":{"filename":"src/body/body.rs","begin":[138,4],"end":[140,5]},"visibility":"public","docs":"Create a `Body` stream with an associated sender half.\n\nUseful when wanting to stream chunks from another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12375":{"id":"2:12375","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:46688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12451":{"id":"2:12451","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11984","prim@char":"1:15264"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:340":{"id":"0:340","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:407":{"id":"34:407","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[273,4],"end":[273,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12355":{"id":"2:12355","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"34:216":{"id":"34:216","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[54,4],"end":[54,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3456":{"id":"2:3456","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:3086":{"id":"2:3086","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088","2:3089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:234":{"id":"22:234","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[149,4],"end":[149,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:391":{"id":"34:391","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[207,4],"end":[207,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:403":{"id":"34:403","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[247,4],"end":[247,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:5418":{"id":"5:5418","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7600","`Box<str>`":"5:313"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2726":{"id":"20:2726","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Informs the server which HTTP headers will be used when an actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n               Repr::Standard(StandardHeader::AccessControlRequestHeaders),}","value":null,"is_literal":false}},"2:12371":{"id":"2:12371","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:46410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1157":{"id":"22:1157","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2790":{"id":"20:2790","crate_id":20,"name":"X_CONTENT_TYPE_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Marker used by the server to indicate that the MIME types advertised in\nthe `content-type` headers should not be changed and be followed.\n\nThis allows to opt-out of MIME type sniffing, or, in other words, it is\na way to say that the webmasters knew what they were doing.\n\nThis header was introduced by Microsoft in IE 8 as a way for webmasters\nto block content sniffing that was happening and could transform\nnon-executable MIME types into executable MIME types. Since then, other\nbrowsers have introduced it, even if their MIME sniffing algorithms were\nless aggressive.\n\nSite security testers usually expect this header to be set.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XContentTypeOptions),}","value":null,"is_literal":false}},"2:3092":{"id":"2:3092","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094","2:3095"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2748":{"id":"20:2748","crate_id":20,"name":"EXPIRES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains the date/time after which the response is considered stale.\n\nInvalid dates, like the value 0, represent a date in the past and mean\nthat the resource is already expired.\n\nIf there is a Cache-Control header with the \"max-age\" or \"s-max-age\"\ndirective in the response, the Expires header is ignored.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expires),}","value":null,"is_literal":false}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[20,0],"end":[20,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::SizeHint","name":"SizeHint","id":"34:467","glob":false}},"22:398":{"id":"22:398","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[6,4],"end":[6,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12373":{"id":"2:12373","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15269"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:46708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:17":{"id":"36:17","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[242,4],"end":[242,70]},"visibility":"default","docs":"The future response value.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"20:2477":{"id":"20:2477","crate_id":20,"name":"VacantEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[169,0],"end":[175,1]},"visibility":"public","docs":"A view into a single empty location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:81":{"id":"22:81","crate_id":22,"name":"chain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[869,4],"end":[871,20]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:336":{"id":"22:336","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[132,0],"end":[155,1]},"visibility":{"restricted":{"parent":"22:316","path":"::buf::take"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:338","22:339","22:340","22:341"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8351":{"id":"2:8351","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"22:55":{"id":"22:55","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[393,4],"end":[393,35]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[19,0],"end":[19,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::Body","name":"HttpBody","id":"34:352","glob":false}},"34:258":{"id":"34:258","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[57,4],"end":[60,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:215":{"id":"34:215","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/box_body.rs","begin":[47,4],"end":[50,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:392":{"id":"34:392","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[212,0],"end":[243,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:394","34:395","34:396","34:397","34:398","34:399"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13118":{"id":"2:13118","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13119","2:13120","2:13121","2:13122","2:13123","2:13124","2:13125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2793":{"id":"20:2793","crate_id":20,"name":"X_XSS_PROTECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Stop pages from loading when an XSS attack is detected.\n\nThe HTTP X-XSS-Protection response header is a feature of Internet\nExplorer, Chrome and Safari that stops pages from loading when they\ndetect reflected cross-site scripting (XSS) attacks. Although these\nprotections are largely unnecessary in modern browsers when sites\nimplement a strong Content-Security-Policy that disables the use of\ninline JavaScript ('unsafe-inline'), they can still provide protections\nfor users of older web browsers that don't yet support CSP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XXssProtection),}","value":null,"is_literal":false}},"22:61":{"id":"22:61","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[513,4],"end":[513,35]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:354":{"id":"34:354","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[48,4],"end":[48,15]},"visibility":"default","docs":"The error type this `Body` might generate.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"bounds":[],"default":null}},"a:2:3004-0:312":{"id":"a:2:3004-0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:404":{"id":"34:404","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[249,4],"end":[252,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:97":{"id":"22:97","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1062,4],"end":[1062,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:252":{"id":"34:252","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[48,0],"end":[80,1]},"visibility":{"restricted":{"parent":"34:223","path":"::combinators::map_data"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null}}},{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"B2","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B2"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"B2"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:256","34:257","34:258","34:259","34:260"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2948-0:931":{"id":"b:2:2948-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:768":{"id":"0:768","crate_id":0,"name":"OnUpgrade","span":{"filename":"src/upgrade.rs","begin":[38,0],"end":[40,1]},"visibility":"public","docs":"A future for a possible HTTP upgrade.\n\nIf no upgrade was available, or it doesn't succeed, yields an `Error`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3004-0:768","a:2:3016-0:768","a:2:3045-0:768","a:2:8351-0:768","a:2:8352-0:768","b:2:2937-0:768","b:2:2933-0:768","b:2:2948-0:768","b:2:2943-0:768","b:2:2609-0:768","b:2:2612-0:768","b:2:3667-0:768","b:2:12714-0:768","b:30:237-0:768","b:31:48-0:768","b:30:504-0:768","b:39:166-0:768","b:39:181-0:768","0:791","0:787"]}},"0:0":{"id":"0:0","crate_id":0,"name":"hyper","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"# hyper\n\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n\n## Features\n\n- HTTP/1 and HTTP/2\n- Asynchronous design\n- Leading in performance\n- Tested and **correct**\n- Extensive production use\n- [Client](client/index.html) and [Server](server/index.html) APIs\n\nIf just starting out, **check out the [Guides](https://hyper.rs/guides)\nfirst.**\n\n## \"Low-level\"\n\nhyper is a lower-level HTTP library, meant to be a building block\nfor libraries and applications.\n\nIf looking for just a convenient HTTP client, consider the\n[reqwest](https://crates.io/crates/reqwest) crate.\n\n# Optional Features\n\nhyper uses a set of [feature flags] to reduce the amount of compiled code.\nIt is possible to just enable certain features over others. By default,\nhyper does not enable any features but allows one to enable a subset for\ntheir use case. Below is a list of the available feature flags. You may\nalso notice above each function, struct and trait there is listed one or\nmore feature flags that are required for that item to be used.\n\nIf you are new to hyper it is possible to enable the `full` feature flag\nwhich will enable all public APIs. Beware though that this will pull in\nmany extra dependencies that you may not need.\n\nThe following optional features are available:\n\n- `http1`: Enables HTTP/1 support.\n- `http2`: Enables HTTP/2 support.\n- `client`: Enables the HTTP `client`.\n- `server`: Enables the HTTP `server`.\n- `runtime`: Enables convenient integration with `tokio`, providing\n  connectors and acceptors for TCP, and a default executor.\n- `tcp`: Enables convenient implementations over TCP (using tokio).\n- `stream`: Provides `futures::Stream` capabilities.\n\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{},"attrs":["#![deny(missing_docs)]","#![deny(missing_debug_implementations)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:202","0:480","0:484","0:718","20:5","20:2997","20:1355","20:1488","20:3090","20:3215","20:3271","0:28","0:297","0:421","0:418"]}},"22:838":{"id":"22:838","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[942,0],"end":[969,1]},"visibility":{"restricted":{"parent":"22:685","path":"::bytes_mut"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BytesMut","id":"22:786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:839","22:840","22:841","22:842"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:789":{"id":"0:789","crate_id":0,"name":"poll","span":{"filename":"src/upgrade.rs","begin":[172,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:12695","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2757":{"id":"20:2757","crate_id":20,"name":"LAST_MODIFIED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Content-Types that are acceptable for the response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::LastModified),}","value":null,"is_literal":false}},"2:3215":{"id":"2:3215","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3216","2:3217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2756":{"id":"20:2756","crate_id":20,"name":"IF_UNMODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Makes the request conditional based on the last modification date.\n\nThe If-Unmodified-Since request HTTP header makes the request\nconditional: the server will send back the requested resource, or accept\nit in the case of a POST or another non-safe method, only if it has not\nbeen last modified after the given date. If the request has been\nmodified after the given date, the response will be a 412 (Precondition\nFailed) error.\n\nThere are two common use cases:\n\n* In conjunction non-safe methods, like POST, it can be used to\nimplement an optimistic concurrency control, like done by some wikis:\neditions are rejected if the stored document has been modified since the\noriginal has been retrieved.\n\n* In conjunction with a range request with a If-Range header, it can be\nused to ensure that the new fragment requested comes from an unmodified\ndocument.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfUnmodifiedSince),}","value":null,"is_literal":false}},"2:12471":{"id":"2:12471","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15264"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:46742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2738":{"id":"20:2738","crate_id":20,"name":"CONTENT_LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates an alternate location for the returned data.\n\nThe principal use case is to indicate the URL of the resource\ntransmitted as the result of content negotiation.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created document), while\nContent-Location indicates the direct URL to use to access the resource,\nwithout the need of further content negotiation. Location is a header\nassociated with the response, while Content-Location is associated with\nthe entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLocation),}","value":null,"is_literal":false}},"22:564":{"id":"22:564","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[551,4],"end":[551,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12374":{"id":"2:12374","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15269"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:46717","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6608":{"id":"1:6608","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6609"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5533":{"id":"1:5533","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:2442":{"id":"20:2442","crate_id":20,"name":"Drain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[136,0],"end":[144,1]},"visibility":"public","docs":"A drain iterator for `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:45":{"id":"34:45","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[25,4],"end":[25,18]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"34:383":{"id":"34:383","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[180,4],"end":[180,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2777":{"id":"20:2777","crate_id":20,"name":"SERVER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Contains information about the software used by the origin server to\nhandle the request.\n\nOverly long and detailed Server values should be avoided as they\npotentially reveal internal implementation details that might make it\n(slightly) easier for attackers to find and exploit known security\nholes.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Server),}","value":null,"is_literal":false}},"22:1182":{"id":"22:1182","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:202":{"id":"0:202","crate_id":0,"name":"body","span":{"filename":"src/body/mod.rs","begin":[1,0],"end":[65,1]},"visibility":"public","docs":"Streaming bodies for Requests and Responses\n\nFor both [Clients](crate::client) and [Servers](crate::server), requests and\nresponses use streaming bodies, instead of complete buffering. This\nallows applications to not use memory they don't need, and allows exerting\nback-pressure on connections by only reading when asked.\n\nThere are two pieces to this in hyper:\n\n- **The [`HttpBody`](HttpBody) trait** describes all possible bodies.\n  hyper allows any body type that implements `HttpBody`, allowing\n  applications to have fine-grained control over their streaming.\n- **The [`Body`](Body) concrete type**, which is an implementation of\n  `HttpBody`, and returned by hyper as a \"receive stream\" (so, for server\n  requests and client responses). It is also a decent default implementation\n  if you don't have very custom needs of your send streams.","links":{"Body":"0:297","HttpBody":"34:352"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["22:42","22:526","34:352","34:467","0:242","0:297","0:312","0:402"]}},"1:6535":{"id":"1:6535","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"5:5154":{"id":"5:5154","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5156","5:5157"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:295":{"id":"34:295","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_err.rs","begin":[76,4],"end":[76,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:375":{"id":"34:375","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[149,4],"end":[149,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:467","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:434":{"id":"0:434","crate_id":0,"name":"is_incomplete_message","span":{"filename":"src/error.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the connection closed before a message could complete.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:50":{"id":"22:50","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[287,4],"end":[287,30]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"34:394":{"id":"34:394","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[213,4],"end":[213,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"36:26":{"id":"36:26","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[280,4],"end":[280,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"20:2467":{"id":"20:2467","crate_id":20,"name":"Occupied","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[159,4],"end":[159,34]},"visibility":"default","docs":"An occupied entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"b:2:2933-0:768":{"id":"b:2:2933-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,30],"end":[65,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Method","name":"Method","id":"20:2997","glob":false}},"0:454":{"id":"0:454","crate_id":0,"name":"source","span":{"filename":"src/error.rs","begin":[493,4],"end":[498,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2702":{"id":"2:2702","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2704","2:2705","2:2706","2:2707","2:2708"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"20:513":{"id":"20:513","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3336,4],"end":[3336,49]},"visibility":{"restricted":{"parent":"20:475","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2936":{"id":"2:2936","crate_id":2,"name":"into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"36:35":{"id":"36:35","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[299,4],"end":[299,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2470":{"id":"20:2470","crate_id":20,"name":"Vacant","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[162,4],"end":[162,30]},"visibility":"default","docs":"A vacant entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"20:2724":{"id":"20:2724","crate_id":20,"name":"ACCESS_CONTROL_EXPOSE_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates which headers can be exposed as part of the response by\nlisting their names.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlExposeHeaders),}","value":null,"is_literal":false}},"22:42":{"id":"22:42","crate_id":22,"name":"Buf","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:43","22:44","22:45","22:47","22:48","22:49","22:50","22:51","22:52","22:53","22:54","22:55","22:56","22:57","22:58","22:59","22:60","22:61","22:62","22:63","22:64","22:65","22:66","22:67","22:68","22:69","22:70","22:71","22:72","22:73","22:74","22:75","22:76","22:80","22:81","22:83"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:354":{"id":"0:354","crate_id":0,"name":"poll_ready","span":{"filename":"src/body/body.rs","begin":[543,4],"end":[549,5]},"visibility":"public","docs":"Check to see if this `Sender` can send more data.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5529":{"id":"1:5529","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:332":{"id":"0:332","crate_id":0,"name":"poll_data","span":{"filename":"src/body/body.rs","begin":[358,4],"end":[363,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:352","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:352","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9398":{"id":"2:9398","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"34:389":{"id":"34:389","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[196,4],"end":[199,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:768":{"id":"b:2:2937-0:768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2752":{"id":"20:2752","crate_id":20,"name":"IF_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nFor GET and HEAD methods, the server will send back the requested\nresource only if it matches one of the listed ETags. For PUT and other\nnon-safe methods, it will only upload the resource in this case.\n\nThe comparison with the stored ETag uses the strong comparison\nalgorithm, meaning two files are considered identical byte to byte only.\nThis is weakened when the  W/ prefix is used in front of the ETag.\n\nThere are two common use cases:\n\n* For GET and HEAD methods, used in combination with an Range header, it\ncan guarantee that the new ranges requested comes from the same resource\nthan the previous one. If it doesn't match, then a 416 (Range Not\nSatisfiable) response is returned.\n\n* For other methods, and in particular for PUT, If-Match can be used to\nprevent the lost update problem. It can check if the modification of a\nresource that the user wants to upload will not override another change\nthat has been done since the original resource was fetched. If the\nrequest cannot be fulfilled, the 412 (Precondition Failed) response is\nreturned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfMatch),}","value":null,"is_literal":false}},"20:631":{"id":"20:631","crate_id":20,"name":"InvalidHeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"A possible error when converting a `HeaderName` from another type.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2418":{"id":"20:2418","crate_id":20,"name":"Keys","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"An iterator over `HeaderMap` keys.\n\nEach header name is yielded only once, even if it has more than one\nassociated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:12370":{"id":"2:12370","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:46404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:66":{"id":"22:66","crate_id":22,"name":"get_i128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[613,4],"end":[613,34]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2747":{"id":"20:2747","crate_id":20,"name":"EXPECT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates expectations that need to be fulfilled by the server in order\nto properly handle the request.\n\nThe only expectation defined in the specification is Expect:\n100-continue, to which the server shall respond with:\n\n* 100 if the information contained in the header is sufficient to cause\nan immediate success,\n\n* 417 (Expectation Failed) if it cannot meet the expectation; or any\nother 4xx status otherwise.\n\nFor example, the server may reject a request if its Content-Length is\ntoo large.\n\nNo common browsers send the Expect header, but some other clients such\nas cURL do so by default.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expect),}","value":null,"is_literal":false}},"20:525":{"id":"20:525","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3357,4],"end":[3357,43]},"visibility":{"restricted":{"parent":"20:475","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3110":{"id":"2:3110","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5397":{"id":"5:5397","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5218","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5398","5:5399","5:5402","5:5405","5:5417","5:5418","5:5419","5:5420","5:5421"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:297":{"id":"b:2:2933-0:297","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12468":{"id":"2:12468","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":"send_data","span":{"filename":"src/body/body.rs","begin":[565,4],"end":[570,5]},"visibility":"public","docs":"Send data on data channel when it is ready.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","binding":{"equality":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["async"],"abi":"\"Rust\"","has_body":true}},"34:352":{"id":"34:352","crate_id":34,"name":"HttpBody","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["34:353","34:354","34:355","34:356","34:357","34:358","34:359","34:360","34:361","34:364","34:367"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3004":{"id":"2:3004","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3013":{"id":"2:3013","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3102":{"id":"2:3102","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3104"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2785":{"id":"20:2785","crate_id":20,"name":"UPGRADE_INSECURE_REQUESTS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Sends a signal to the server expressing the client’s preference for an\nencrypted and authenticated response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UpgradeInsecureRequests),}","value":null,"is_literal":false}},"2:7449":{"id":"2:7449","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7451"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2716":{"id":"20:2716","crate_id":20,"name":"ACCEPT_CHARSET","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Advertises which character set the client is able to understand.\n\nThe Accept-Charset request HTTP header advertises which character set\nthe client is able to understand. Using content negotiation, the server\nthen selects one of the proposals, uses it and informs the client of its\nchoice within the Content-Type response header. Browsers usually don't\nset this header as the default value for each content type is usually\ncorrect and transmitting it would allow easier fingerprinting.\n\nIf the server cannot serve any matching character set, it can\ntheoretically send back a 406 (Not Acceptable) error code. But, for a\nbetter user experience, this is rarely done and the more common way is\nto ignore the Accept-Charset header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptCharset),}","value":null,"is_literal":false}},"34:108":{"id":"34:108","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/full.rs","begin":[37,4],"end":[37,18]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[482,0],"end":[491,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:340"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:432":{"id":"0:432","crate_id":0,"name":"is_closed","span":{"filename":"src/error.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if a sender's channel is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2901":{"id":"2:2901","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2903"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:483":{"id":"0:483","crate_id":0,"name":"execute","span":{"filename":"src/rt.rs","begin":[11,4],"end":[11,32]},"visibility":"default","docs":"Place the future into the executor to be run.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fut",{"kind":"generic","inner":"Fut"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"20:2399":{"id":"20:2399","crate_id":20,"name":"IterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[93,0],"end":[98,1]},"visibility":"public","docs":"`HeaderMap` mutable entry iterator\n\nYields `(&HeaderName, &mut value)` tuples. The same header name may be\nyielded more than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:575":{"id":"20:575","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[3449,4],"end":[3449,40]},"visibility":{"restricted":{"parent":"20:526","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:431":{"id":"0:431","crate_id":0,"name":"is_canceled","span":{"filename":"src/error.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns true if this was about a `Request` that was canceled.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2472":{"id":"20:2472","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/map.rs","begin":[162,11],"end":[162,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"2:3014":{"id":"2:3014","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"34:257":{"id":"34:257","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/combinators/map_data.rs","begin":[55,4],"end":[55,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"23:38":{"id":"23:38","crate_id":23,"name":"Integer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:37","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:39:166-0:421":{"id":"b:39:166-0:421","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[276,0],"end":[276,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"kind":"resolved_path","inner":{"name":"Instrument","id":"39:154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:39:181-0:421":{"id":"b:39:181-0:421","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.29/src/instrument.rs","begin":[334,0],"end":[334,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"kind":"resolved_path","inner":{"name":"WithSubscriber","id":"39:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"31:54":{"id":"31:54","crate_id":31,"name":"try_poll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.17/src/future.rs","begin":[81,4],"end":[81,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"F"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,16],"end":[18,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Buf","name":"Buf","id":"22:42","glob":false}},"2:3665":{"id":"2:3665","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3666"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"20:2761":{"id":"20:2761","crate_id":20,"name":"ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Indicates where a fetch originates from.\n\nIt doesn't include any path information, but only the server name. It is\nsent with CORS requests, as well as with POST requests. It is similar to\nthe Referer header, but, unlike this header, it doesn't disclose the\nwhole path.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Origin),}","value":null,"is_literal":false}},"0:788":{"id":"0:788","crate_id":0,"name":"Output","span":{"filename":"src/upgrade.rs","begin":[170,4],"end":[170,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:2907":{"id":"2:2907","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2909"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:312":{"id":"b:2:2943-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3154":{"id":"2:3154","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:2718":{"id":"20:2718","crate_id":20,"name":"ACCEPT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Advertises which languages the client is able to understand.\n\nThe Accept-Language request HTTP header advertises which languages the\nclient is able to understand, and which locale variant is preferred.\nUsing content negotiation, the server then selects one of the proposals,\nuses it and informs the client of its choice with the Content-Language\nresponse header. Browsers set adequate values for this header according\ntheir user interface language and even if a user can change it, this\nhappens rarely (and is frown upon as it leads to fingerprinting).\n\nThis header is a hint to be used when the server has no way of\ndetermining the language via another way, like a specific URL, that is\ncontrolled by an explicit user decision. It is recommended that the\nserver never overrides an explicit decision. The content of the\nAccept-Language is often out of the control of the user (like when\ntraveling and using an Internet Cafe in a different country); the user\nmay also want to visit a page in another language than the locale of\ntheir user interface.\n\nIf the server cannot serve any matching language, it can theoretically\nsend back a 406 (Not Acceptable) error code. But, for a better user\nexperience, this is rarely done and more common way is to ignore the\nAccept-Language header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptLanguage),}","value":null,"is_literal":false}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,22],"end":[65,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::header","name":"header","id":"20:5","glob":false}},"a:2:3016-0:931":{"id":"a:2:3016-0:931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6532":{"id":"1:6532","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6533","1:6534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:397":{"id":"22:397","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[5,0],"end":[22,1]},"visibility":{"restricted":{"parent":"22:390","path":"::buf::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","chunks_vectored","get_i32_le","get_u32","get_u16_le","get_u8","get_i64","take","reader","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","has_remaining","get_i8","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"5:4156","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:398","22:399","22:400"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12436":{"id":"2:12436","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12463":{"id":"2:12463","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11921","`FromStr`":"2:11921"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11921","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11921","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"20:2715":{"id":"20:2715","crate_id":20,"name":"ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Advertises which content types the client is able to understand.\n\nThe Accept request HTTP header advertises which content types, expressed\nas MIME types, the client is able to understand. Using content\nnegotiation, the server then selects one of the proposals, uses it and\ninforms the client of its choice with the Content-Type response header.\nBrowsers set adequate values for this header depending of the context\nwhere the request is done: when fetching a CSS stylesheet a different\nvalue is set for the request than when fetching an image, video or a\nscript.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Accept),}","value":null,"is_literal":false}},"2:12360":{"id":"2:12360","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:44586"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2951":{"id":"2:2951","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:36067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:2910":{"id":"2:2910","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2912"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:402":{"id":"0:402","crate_id":0,"name":"to_bytes","span":{"filename":"src/body/to_bytes.rs","begin":[46,0],"end":[76,1]},"visibility":"public","docs":"Concatenate the buffers from a body into a single `Bytes` asynchronously.\n\nThis may require copying the data into a single buffer. If you don't need\na contiguous buffer, prefer the [`aggregate`](crate::body::aggregate())\nfunction.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.\n\n# Example\n\n```\n# async fn doc() -> hyper::Result<()> {\nuse hyper::{body::HttpBody};\n\n# let request = hyper::Request::builder()\n#        .method(hyper::Method::POST)\n#        .uri(\"http://httpbin.org/post\")\n#        .header(\"content-type\", \"application/json\")\n#        .body(hyper::Body::from(r#\"{\"library\":\"hyper\"}\"#)).unwrap();\n# let client = hyper::Client::new();\nlet response = client.request(request).await?;\n\nconst MAX_ALLOWED_RESPONSE_SIZE: u64 = 1024;\n\nlet response_content_length = match response.body().size_hint().upper() {\n    Some(v) => v,\n    None => MAX_ALLOWED_RESPONSE_SIZE + 1 // Just to protect ourselves from a malicious response\n};\n\nif response_content_length < MAX_ALLOWED_RESPONSE_SIZE {\n    let body_bytes = hyper::body::to_bytes(response.into_body()).await?;\n    println!(\"body: {:?}\", body_bytes);\n}\n\n# Ok(())\n# }\n```","links":{"crate::body::aggregate()":"0:242"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:352","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["async"],"abi":"\"Rust\""}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,57],"end":[65,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::StatusCode","name":"StatusCode","id":"20:3090","glob":false}},"2:3123":{"id":"2:3123","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3124","2:3125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"24:4091":{"id":"24:4091","crate_id":24,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4092","24:4094","24:4096","24:4097","24:4098","24:4099"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"24:185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2609-0:421":{"id":"b:2:2609-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:623":{"id":"0:623","crate_id":0,"name":"make_service_fn","span":{"filename":"src/service/make.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"Create a `MakeService` from a function.\n\n# Example\n\n```\n# #[cfg(feature = \"runtime\")]\n# async fn run() {\nuse std::convert::Infallible;\nuse hyper::{Body, Request, Response, Server};\nuse hyper::server::conn::AddrStream;\nuse hyper::service::{make_service_fn, service_fn};\n\nlet addr = ([127, 0, 0, 1], 3000).into();\n\nlet make_svc = make_service_fn(|socket: &AddrStream| {\n    let remote_addr = socket.remote_addr();\n    async move {\n        Ok::<_, Infallible>(service_fn(move |_: Request<Body>| async move {\n            Ok::<_, Infallible>(\n                Response::new(Body::from(format!(\"Hello, {}!\", remote_addr)))\n            )\n        }))\n    }\n});\n\n// Then bind and serve...\nlet server = Server::bind(&addr)\n    .serve(make_svc);\n\n// Finally, spawn `server` onto an Executor...\nif let Err(e) = server.await {\n    eprintln!(\"server error: {}\", e);\n}\n# }\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MakeServiceFn","id":"0:923","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null}}},{"name":"Ret","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}}],"output":{"kind":"generic","inner":"Ret"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"Ret"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:12695","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"34:47":{"id":"34:47","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/empty.rs","begin":[29,4],"end":[32,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:783":{"id":"0:783","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[150,0],"end":[154,1]},"visibility":{"restricted":{"parent":"0:718","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:784"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:373":{"id":"34:373","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[138,4],"end":[141,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:44704","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:12951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:47330","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44712","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2381","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[435,0],"end":[453,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:338"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[517,0],"end":[522,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:348"],"negative":false,"synthetic":false,"blanket_impl":null}},"36:36":{"id":"36:36","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[303,4],"end":[303,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1191":{"id":"22:1191","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"31:53":{"id":"31:53","crate_id":31,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.17/src/future.rs","begin":[78,4],"end":[78,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"34:368":{"id":"34:368","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.3/src/lib.rs","begin":[127,0],"end":[152,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":["trailers","is_end_stream","data","size_hint","map_data","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["34:370","34:371","34:372","34:373","34:374","34:375"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2780":{"id":"20:2780","crate_id":20,"name":"TE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.5/src/header/name.rs","begin":[146,0],"end":[965,1]},"visibility":"public","docs":"Informs the server of transfer encodings willing to be accepted as part\nof the response.\n\nSee also the Transfer-Encoding response header for more details on\ntransfer encodings. Note that chunked is always acceptable for HTTP/1.1\nrecipients and you that don't have to specify \"chunked\" using the TE\nheader. However, it is useful for setting if the client is accepting\ntrailer fields in a chunked transfer coding using the \"trailers\" value.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Te),}","value":null,"is_literal":false}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[346,0],"end":[352,1]},"visibility":{"restricted":{"parent":"0:247","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:328"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:312":{"id":"b:2:2933-0:312","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5541":{"id":"1:5541","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5542"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3045-0:421":{"id":"a:2:3045-0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3045-0:931":{"id":"a:2:3045-0:931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9597":{"id":"2:9597","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9598","2:9599","2:9600","2:9601","2:9602","2:9603","2:9604","2:9605","2:9606","2:9607","2:9608","2:9609","2:9610","2:9611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12431":{"id":"2:12431","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15269","self::pattern":"2:11984","`DoubleEndedIterator`":"2:7497","prim@char":"1:15264"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:46602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:1187":{"id":"22:1187","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"30:506":{"id":"30:506","crate_id":30,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:507","30:510","30:514","30:517","30:519","30:521","30:524","30:527","30:529","30:531","30:532","30:533","30:535","30:536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:427":{"id":"0:427","crate_id":0,"name":"is_parse","span":{"filename":"src/error.rs","begin":[146,4],"end":[148,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2917":{"id":"2:2917","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919","2:2920"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9628":{"id":"2:9628","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9629","2:9630","2:9631"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2691":{"id":"2:2691","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2692","2:2693","2:2694","2:2695"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"22:64":{"id":"22:64","crate_id":22,"name":"get_u128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[573,4],"end":[573,34]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2933-0:931":{"id":"b:2:2933-0:931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12460":{"id":"2:12460","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15264","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:5721-0:421":{"id":"b:5:5721-0:421","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9388","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:5719","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:5723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12466":{"id":"2:12466","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:766":{"id":"a:2:8352-0:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"22:1163":{"id":"22:1163","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}}},"paths":{"20:2997":{"crate_id":20,"path":["http","method","Method"],"kind":"struct"},"24:11805":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32"],"kind":"struct"},"1:10968":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3102":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:4091":{"crate_id":24,"path":["tokio","io","util","async_buf_read_ext","AsyncBufReadExt"],"kind":"trait"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:7120":{"crate_id":1,"path":["hyper","Owned"],"kind":"typedef"},"34:257":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"1:9365":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"2:10338":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3444":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"30:9782":{"crate_id":30,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"5:3029":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46837":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:9479":{"crate_id":24,"path":["tokio","sync","batch_semaphore","AcquireError"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3175":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:2358":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"20:2760":{"crate_id":20,"path":["http","header","name","MAX_FORWARDS"],"kind":"constant"},"2:46866":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5696":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9400":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:47200":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"20:2723":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_ORIGIN"],"kind":"constant"},"24:6387":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Sender"],"kind":"struct"},"1:11667":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"29:1819":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:4222":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"30:7638":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:8191":{"crate_id":30,"path":["futures_util","future","join","Join3"],"kind":"struct"},"42:785":{"crate_id":42,"path":["tracing_core","sealed","Sealed"],"kind":"trait"},"1:7426":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"30:12645":{"crate_id":30,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"24:14335":{"crate_id":24,"path":["tokio","io","util","buf_stream","_","__Origin"],"kind":"struct"},"1:4349":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"30:9413":{"crate_id":30,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"24:1069":{"crate_id":24,"path":["tokio","select"],"kind":"macro"},"24:6986":{"crate_id":24,"path":["tokio","runtime","thread_pool","Spawner"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"30:5338":{"crate_id":30,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:48661":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"37:272":{"crate_id":37,"path":["httparse","ParserConfig"],"kind":"struct"},"27:1022":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:43250":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:3032":{"crate_id":24,"path":["tokio","io","util","copy_bidirectional","CopyBidirectional"],"kind":"struct"},"1:6204":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"29:526":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"2:50498":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3137":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"2:46377":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:15279":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:6535":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:7019":{"crate_id":24,"path":["tokio","runtime","Kind"],"kind":"enum"},"29:1494":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:9396":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"1:13401":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5999":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:2532":{"crate_id":20,"path":["http","header","map","Cursor"],"kind":"enum"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"27:974":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:3015":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3242":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"34:394":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"20:155":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11910":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"22:582":{"crate_id":22,"path":["hyper","IntoIter"],"kind":"typedef"},"24:10707":{"crate_id":24,"path":["tokio","time","interval","MissedTickBehavior"],"kind":"enum"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3098":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"35:519":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"30:6849":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"36:34":{"crate_id":36,"path":["hyper","Future"],"kind":"typedef"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11204":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9587":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:2759":{"crate_id":20,"path":["http","header","name","LOCATION"],"kind":"constant"},"24:9829":{"crate_id":24,"path":["tokio","task","task_local","{{impl}}","with_task","Guard"],"kind":"struct"},"20:2789":{"crate_id":20,"path":["http","header","name","WWW_AUTHENTICATE"],"kind":"constant"},"2:46742":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"30:10966":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"30:6689":{"crate_id":30,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"20:2788":{"crate_id":20,"path":["http","header","name","WARNING"],"kind":"constant"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"30:506":{"crate_id":30,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:7341":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"20:2782":{"crate_id":20,"path":["http","header","name","TRANSFER_ENCODING"],"kind":"constant"},"1:11111":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"29:4046":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:1237":{"crate_id":24,"path":["tokio","fs","file","File"],"kind":"struct"},"1:875":{"crate_id":1,"path":["hyper","Owned"],"kind":"typedef"},"30:12400":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"24:7764":{"crate_id":24,"path":["tokio","sync","mpsc","list","Tx"],"kind":"struct"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:45305":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:9408":{"crate_id":24,"path":["tokio","sync","notify","Notified"],"kind":"struct"},"29:148":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1073":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8738":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"24:7056":{"crate_id":24,"path":["tokio","coop","RestoreOnPending"],"kind":"struct"},"2:48734":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:2717":{"crate_id":20,"path":["http","header","name","ACCEPT_ENCODING"],"kind":"constant"},"6:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:7462":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"30:7313":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"22:531":{"crate_id":22,"path":["bytes","bytes","Vtable"],"kind":"struct"},"20:2756":{"crate_id":20,"path":["http","header","name","IF_UNMODIFIED_SINCE"],"kind":"constant"},"2:9381":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:13011":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:45829":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2306":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:5161":{"crate_id":5,"path":["hyper","Output"],"kind":"typedef"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"1:3496":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"30:12509":{"crate_id":30,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:5391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"29:4937":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"42:854":{"crate_id":42,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"6:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"41:216":{"crate_id":41,"path":["log","LevelFilter"],"kind":"enum"},"24:13634":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16"],"kind":"struct"},"2:48112":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"30:11290":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"1:14248":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"30:6128":{"crate_id":30,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"30:9703":{"crate_id":30,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"30:8705":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"24:9096":{"crate_id":24,"path":["tokio","sync","once_cell","OnceCell"],"kind":"struct"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7507":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"20:2522":{"crate_id":20,"path":["http","header","map","ValueDrain"],"kind":"struct"},"1:10770":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:3850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:9900":{"crate_id":24,"path":["tokio","task","local","LocalSet"],"kind":"struct"},"24:11609":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64"],"kind":"struct"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4150":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10697":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:7371":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"31:39":{"crate_id":31,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:11466":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:23080":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:3571":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"29:514":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:4160":{"crate_id":24,"path":["tokio","io","util","async_seek_ext","AsyncSeekExt"],"kind":"trait"},"20:156":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:2716":{"crate_id":20,"path":["http","header","name","ACCEPT_CHARSET"],"kind":"constant"},"2:3013":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:4499":{"crate_id":24,"path":["tokio","io","util","repeat","Repeat"],"kind":"struct"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:9525":{"crate_id":24,"path":["tokio","sync","watch","Receiver"],"kind":"struct"},"20:2744":{"crate_id":20,"path":["http","header","name","DNT"],"kind":"constant"},"1:14242":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"30:12078":{"crate_id":30,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"29:4961":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:3671":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21560":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:11921":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"42:1211":{"crate_id":42,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:2783":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"29:4112":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"29:6043":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:3166":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:12899":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64Le"],"kind":"struct"},"2:50445":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:12961":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"20:2977":{"crate_id":20,"path":["http","header","value","ToStrError"],"kind":"struct"},"1:10203":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43119":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7467":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"30:11442":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"5:5783":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:48488":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"41:195":{"crate_id":41,"path":["log","Level"],"kind":"enum"},"1:10402":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2625":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"29:3860":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"42:832":{"crate_id":42,"path":["tracing_core","field","Empty"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:43595":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"1:11659":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"20:2556":{"crate_id":20,"path":["http","header","map","HashValue"],"kind":"struct"},"0:312":{"crate_id":0,"path":["hyper","body","Sender"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2780":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:2477":{"crate_id":20,"path":["http","header","map","VacantEntry"],"kind":"struct"},"6:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:13046":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64Le"],"kind":"struct"},"2:43694":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44628":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"29:6005":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:7619":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Chan"],"kind":"struct"},"2:46043":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:48176":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"29:3805":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"29:1725":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"29:5789":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"24:10869":{"crate_id":24,"path":["tokio","util","try_lock","TryLock"],"kind":"struct"},"29:3992":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:45616":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"34:370":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"2:2951":{"crate_id":2,"path":["hyper","Error"],"kind":"typedef"},"22:526":{"crate_id":22,"path":["bytes","bytes","Bytes"],"kind":"struct"},"2:8024":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"29:3898":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3142":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3440":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"24:8249":{"crate_id":24,"path":["tokio","sync","oneshot","Inner"],"kind":"struct"},"24:10627":{"crate_id":24,"path":["tokio","time","driver","Driver"],"kind":"struct"},"20:2753":{"crate_id":20,"path":["http","header","name","IF_MODIFIED_SINCE"],"kind":"constant"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:23016":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"27:912":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:2104":{"crate_id":24,"path":["tokio","io","stdin","Stdin"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:66":{"crate_id":24,"path":["tokio","macros","scoped_tls","ScopedKey"],"kind":"struct"},"20:2793":{"crate_id":20,"path":["http","header","name","X_XSS_PROTECTION"],"kind":"constant"},"2:43722":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:1507":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10445":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:48250":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:1600":{"crate_id":20,"path":["hyper","Err"],"kind":"typedef"},"20:631":{"crate_id":20,"path":["http","header","name","InvalidHeaderName"],"kind":"struct"},"24:14267":{"crate_id":24,"path":["tokio","io","util","buf_writer","BufWriter"],"kind":"struct"},"29:5052":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"30:7552":{"crate_id":30,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:3239":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"20:330":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"2:48686":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6518":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:23048":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:9064":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:14068":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:1525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"30:12419":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"6:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:4718":{"crate_id":24,"path":["tokio","park","either","Either"],"kind":"enum"},"30:9908":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"29:4981":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"31:136":{"crate_id":31,"path":["hyper","Error"],"kind":"typedef"},"0:330":{"crate_id":0,"path":["hyper","Data"],"kind":"typedef"},"1:3032":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:5150":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"30:10678":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"30:11556":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:43750":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:7156":{"crate_id":24,"path":["tokio","sync","broadcast","Receiver"],"kind":"struct"},"24:14296":{"crate_id":24,"path":["tokio","io","util","buf_writer","_","__Origin"],"kind":"struct"},"2:21924":{"crate_id":2,"path":["core","core_simd","select","Select"],"kind":"trait"},"1:10725":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7321":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:46287":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:2721":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_HEADERS"],"kind":"constant"},"20:2771":{"crate_id":20,"path":["http","header","name","RETRY_AFTER"],"kind":"constant"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:12209":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"29:3892":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:14623":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:2790":{"crate_id":20,"path":["http","header","name","X_CONTENT_TYPE_OPTIONS"],"kind":"constant"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"24:9370":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendTimeoutError"],"kind":"enum"},"2:9398":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5519":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6302":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"30:7760":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"24:14015":{"crate_id":24,"path":["tokio","io","util","read_buf","ReadBuf"],"kind":"struct"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:1702":{"crate_id":24,"path":["tokio","fs","dir_builder","DirBuilder"],"kind":"struct"},"42:0":{"crate_id":42,"path":["tracing_core"],"kind":"module"},"6:606":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:2750":{"crate_id":20,"path":["http","header","name","FROM"],"kind":"constant"},"30:10373":{"crate_id":30,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"34:108":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"30:11708":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:1921":{"crate_id":24,"path":["tokio","io","blocking","Buf"],"kind":"struct"},"24:10614":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Expiration"],"kind":"struct"},"1:14062":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48866":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"29:1549":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:6501":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:3044":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:47389":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9597":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:11707":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128"],"kind":"struct"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:46258":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"30:7172":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:3016":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"45:43":{"crate_id":45,"path":["want","Closed"],"kind":"struct"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:43551":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:11854":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"42:1110":{"crate_id":42,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"1:6691":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12772":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"2:49904":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3114":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:11663":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"30:12533":{"crate_id":30,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"20:3221":{"crate_id":20,"path":["http","uri","Parts"],"kind":"struct"},"30:9031":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"24:2109":{"crate_id":24,"path":["tokio","io","stdout","Stdout"],"kind":"struct"},"5:7415":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"29:5163":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:5533":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"30:6952":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:4175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"34:291":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"37:306":{"crate_id":37,"path":["httparse","Response"],"kind":"struct"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"30:12140":{"crate_id":30,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3022":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:2638":{"crate_id":20,"path":["http","header","name","HeaderName"],"kind":"struct"},"30:11956":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"23:55":{"crate_id":23,"path":["itoa","Buffer"],"kind":"struct"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:7383":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:1355":{"crate_id":20,"path":["http","request","Request"],"kind":"struct"},"20:2775":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_PROTOCOL"],"kind":"constant"},"30:6347":{"crate_id":30,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:4746":{"crate_id":1,"path":["hyper","Iter"],"kind":"typedef"},"24:6445":{"crate_id":24,"path":["tokio","runtime","driver","Driver"],"kind":"struct"},"39:454":{"crate_id":39,"path":["tracing","instrument","_","__Origin"],"kind":"struct"},"30:11908":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"24:6112":{"crate_id":24,"path":["tokio","runtime","blocking","task","BlockingTask"],"kind":"struct"},"5:2294":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:4307":{"crate_id":24,"path":["tokio","io","util","mem","Pipe"],"kind":"struct"},"20:5":{"crate_id":20,"path":["http","header"],"kind":"module"},"2:11774":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"29:607":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"34:292":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4181":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:3176":{"crate_id":20,"path":["http","uri","builder","Builder"],"kind":"struct"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43589":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:3345":{"crate_id":20,"path":["http","extensions","Extensions"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:43852":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:15269":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:663":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"29:5882":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:877":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"29:3627":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"30:9327":{"crate_id":30,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"29:4006":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"30:11412":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:1750":{"crate_id":24,"path":["tokio","fs","read_dir","State"],"kind":"enum"},"20:1288":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"2:3228":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"29:1561":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10757":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"30:7699":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:8248":{"crate_id":30,"path":["futures_util","future","join","Join4"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"33:19":{"crate_id":33,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:47178":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:14032":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:21653":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:44756":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1268":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:587":{"crate_id":24,"path":["tokio","loom","std","atomic_u8","AtomicU8"],"kind":"struct"},"0:418":{"crate_id":0,"path":["hyper","Result"],"kind":"typedef"},"29:1587":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:829":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"29:1537":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:7435":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Receiver"],"kind":"struct"},"2:4441":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46951":{"crate_id":2,"path":["hyper","Searcher"],"kind":"typedef"},"20:2434":{"crate_id":20,"path":["http","header","map","ValuesMut"],"kind":"struct"},"2:43732":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:11266":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64Le"],"kind":"struct"},"24:9360":{"crate_id":24,"path":["tokio","sync","mpsc","error","RecvError"],"kind":"struct"},"24:13732":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64"],"kind":"struct"},"24:11077":{"crate_id":24,"path":["tokio","task","local","RunUntil"],"kind":"struct"},"29:4037":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"30:6604":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"29:5967":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:7830":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedSender"],"kind":"struct"},"46:65":{"crate_id":46,"path":["try_lock","TryLock"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"29:3885":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"30:11311":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"29:546":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:36130":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46189":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:45031":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"35:412":{"crate_id":35,"path":["futures_channel","lock","Lock"],"kind":"struct"},"20:3082":{"crate_id":20,"path":["http","request","Builder"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47366":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"30:11030":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"29:5119":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:2731":{"crate_id":20,"path":["http","header","name","AUTHORIZATION"],"kind":"constant"},"0:766":{"crate_id":0,"path":["hyper","upgrade","Upgraded"],"kind":"struct"},"30:9973":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"30:8227":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"42:819":{"crate_id":42,"path":["tracing_core","event","Event"],"kind":"struct"},"6:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:13726":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9402":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:22527":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45573":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"39:109":{"crate_id":39,"path":["tracing","field","AsField"],"kind":"trait"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"1:9247":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:9319":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:14745":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"29:4899":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"30:8748":{"crate_id":30,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7437":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"38:106":{"crate_id":38,"path":["httpdate","date","HttpDate"],"kind":"struct"},"29:3778":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"36:13":{"crate_id":36,"path":["tower_service","Service"],"kind":"trait"},"2:12717":{"crate_id":2,"path":["hyper","Future"],"kind":"typedef"},"29:599":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"2:43227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:6075":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"24:9583":{"crate_id":24,"path":["tokio","sync","watch","state","StateSnapshot"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43793":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"30:6932":{"crate_id":30,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:5720":{"crate_id":24,"path":["tokio","runtime","task","state","Snapshot"],"kind":"struct"},"1:14305":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"30:10161":{"crate_id":30,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"1:1218":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7423":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46733":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"45:93":{"crate_id":45,"path":["want","State"],"kind":"enum"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:50393":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"35:346":{"crate_id":35,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"27:833":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"30:12038":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"6:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4434":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:14218":{"crate_id":24,"path":["tokio","io","util","chain","Chain"],"kind":"struct"},"30:10659":{"crate_id":30,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:46348":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:15283":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"34:45":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"2:7412":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:3735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"30:12466":{"crate_id":30,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"29:3646":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:2583":{"crate_id":20,"path":["http","header","map","Links"],"kind":"struct"},"1:10916":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"30:12116":{"crate_id":30,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"5:1712":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:7307":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:48041":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"29:75":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"27:1030":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:3762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"30:10897":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:3682":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"39:517":{"crate_id":39,"path":["tracing","span","Inner"],"kind":"struct"},"30:8772":{"crate_id":30,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"30:10941":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:14486":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"24:9538":{"crate_id":24,"path":["tokio","sync","watch","Ref"],"kind":"struct"},"5:4156":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:15281":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:13723":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4063":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2839":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"39:78":{"crate_id":39,"path":["tracing","dispatcher"],"kind":"module"},"20:2391":{"crate_id":20,"path":["http","header","map","Iter"],"kind":"struct"},"42:1117":{"crate_id":42,"path":["tracing_core","metadata","KindInner"],"kind":"enum"},"29:1701":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:11185":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"5:5719":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:10731":{"crate_id":24,"path":["tokio","util","rand","FastRand"],"kind":"struct"},"1:11221":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"30:8970":{"crate_id":30,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"31:127":{"crate_id":31,"path":["futures_core","stream","TryStream"],"kind":"trait"},"29:4907":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10988":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:14769":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43842":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:2726":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_HEADERS"],"kind":"constant"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"24:6460":{"crate_id":24,"path":["tokio","runtime","handle","EnterGuard"],"kind":"struct"},"33:237":{"crate_id":33,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:490":{"crate_id":20,"path":["http","header","map","into_header_name","Sealed"],"kind":"trait"},"24:5853":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","BasicScheduler"],"kind":"struct"},"1:2240":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"20:2754":{"crate_id":20,"path":["http","header","name","IF_NONE_MATCH"],"kind":"constant"},"2:9163":{"crate_id":2,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"20:3291":{"crate_id":20,"path":["http","version","Http"],"kind":"enum"},"24:9556":{"crate_id":24,"path":["tokio","sync","watch","error","SendError"],"kind":"struct"},"30:12365":{"crate_id":30,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"30:12439":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"29:1641":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"30:4585":{"crate_id":30,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:12796":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3009":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46656":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"30:11932":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"1:1422":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10558":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:11903":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128"],"kind":"struct"},"35:140":{"crate_id":35,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:45298":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"29:6566":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:2410":{"crate_id":20,"path":["http","header","map","IntoIter"],"kind":"struct"},"24:5907":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","enter","Guard"],"kind":"struct"},"24:6517":{"crate_id":24,"path":["tokio","runtime","park","Parker"],"kind":"struct"},"24:14380":{"crate_id":24,"path":["tokio","io","util","buf_reader","_","__Origin"],"kind":"struct"},"6:4219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:2779":{"crate_id":20,"path":["http","header","name","STRICT_TRANSPORT_SECURITY"],"kind":"constant"},"2:43204":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:43741":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"34:395":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"5:7407":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:13291":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32Le"],"kind":"struct"},"24:10645":{"crate_id":24,"path":["tokio","time","error","Error"],"kind":"struct"},"6:3741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43703":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22122":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:50404":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:2749":{"crate_id":20,"path":["http","header","name","FORWARDED"],"kind":"constant"},"2:6923":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"20:213":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"2:46240":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:44923":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"42:815":{"crate_id":42,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"1:9965":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"0:931":{"crate_id":0,"path":["hyper","upgrade","Parts"],"kind":"struct"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4106":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"30:9954":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"24:12190":{"crate_id":24,"path":["tokio","io","util","write_all_buf","WriteAllBuf"],"kind":"struct"},"29:3670":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"30:12497":{"crate_id":30,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"29:1595":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"34:371":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"24:7606":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Rx"],"kind":"struct"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:12997":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128Le"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7604":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"30:5472":{"crate_id":30,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"24:7425":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Sender"],"kind":"struct"},"2:10184":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1574":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50306":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"30:7613":{"crate_id":30,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"31:44":{"crate_id":31,"path":["futures_core","future","TryFuture"],"kind":"trait"},"30:7001":{"crate_id":30,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:21644":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4716":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"30:11254":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"2:22604":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:2735":{"crate_id":20,"path":["http","header","name","CONTENT_ENCODING"],"kind":"constant"},"30:10452":{"crate_id":30,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:47416":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"34:539":{"crate_id":34,"path":["http_body","combinators","map_err","MapErr"],"kind":"struct"},"30:8527":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:3340":{"crate_id":20,"path":["http","extensions","IdHasher"],"kind":"struct"},"1:10249":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:2123":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:4413":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:50419":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:48560":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"29:5915":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2778":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43043":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2910":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:8798":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard","RwLockWriteGuard"],"kind":"struct"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46326":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:46974":{"crate_id":2,"path":["hyper","Searcher"],"kind":"typedef"},"2:48834":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:9292":{"crate_id":24,"path":["tokio","sync","broadcast","error","RecvError"],"kind":"enum"},"30:11012":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"44:0":{"crate_id":44,"path":["tracing_attributes"],"kind":"module"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"24:4491":{"crate_id":24,"path":["tokio","io","util","vec_with_initialized","VecWithInitialized"],"kind":"struct"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"30:9283":{"crate_id":30,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4750":{"crate_id":1,"path":["hyper","Iter"],"kind":"typedef"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"0:623":{"crate_id":0,"path":["hyper","service","make_service_fn"],"kind":"function"},"2:44772":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"20:2746":{"crate_id":20,"path":["http","header","name","ETAG"],"kind":"constant"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:9914":{"crate_id":24,"path":["tokio","task","task_local","AccessError"],"kind":"struct"},"20:2743":{"crate_id":20,"path":["http","header","name","COOKIE"],"kind":"constant"},"30:7136":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:1239":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"29:5309":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"45:39":{"crate_id":45,"path":["want","Giver"],"kind":"struct"},"20:2381":{"crate_id":20,"path":["http","header","map","HeaderMap"],"kind":"struct"},"42:842":{"crate_id":42,"path":["tracing_core","field","Iter"],"kind":"struct"},"20:2747":{"crate_id":20,"path":["http","header","name","EXPECT"],"kind":"constant"},"30:11246":{"crate_id":30,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46538":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:145":{"crate_id":24,"path":["tokio","future","poll_fn","PollFn"],"kind":"struct"},"5:2788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:931":{"crate_id":24,"path":["tokio","coop","with_budget","ResetGuard"],"kind":"struct"},"1:10264":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6670":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"30:8174":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"30:12069":{"crate_id":30,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:50373":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:2130":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"1:5479":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46404":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:22622":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3904":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44619":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"30:9182":{"crate_id":30,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"33:16":{"crate_id":33,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"1:918":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:8762":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"6:3836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:4263":{"crate_id":24,"path":["tokio","io","util","copy","Copy"],"kind":"struct"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10837":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:13141":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10810":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"24:5513":{"crate_id":24,"path":["tokio","runtime","task","Notified"],"kind":"struct"},"5:1461":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"29:5022":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:7002":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:9563":{"crate_id":24,"path":["tokio","sync","watch","error","RecvError"],"kind":"struct"},"24:9401":{"crate_id":24,"path":["tokio","sync","notify","Waiter"],"kind":"struct"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44887":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"46:39":{"crate_id":46,"path":["try_lock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"42:1166":{"crate_id":42,"path":["tracing_core","parent","Parent"],"kind":"enum"},"42:142":{"crate_id":42,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"1:1304":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46556":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"29:3755":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"30:8991":{"crate_id":30,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"41:160":{"crate_id":41,"path":["log","Log"],"kind":"trait"},"20:411":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11693":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:14095":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:8352":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:8918":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9118":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"29:3788":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2946":{"crate_id":2,"path":["hyper","Error"],"kind":"typedef"},"2:43618":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"42:802":{"crate_id":42,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4427":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:46584":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"31:110":{"crate_id":31,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"30:9230":{"crate_id":30,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"20:1238":{"crate_id":20,"path":["http","method","InvalidMethod"],"kind":"struct"},"22:1261":{"crate_id":22,"path":["bytes","buf","take","Take"],"kind":"struct"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2238":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10270":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7961":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:1959":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"29:4106":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"29:593":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"29:3929":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1678":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3159":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:660":{"crate_id":5,"path":["hyper","Owned"],"kind":"typedef"},"1:10188":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:5167":{"crate_id":5,"path":["hyper","Output"],"kind":"typedef"},"24:4764":{"crate_id":24,"path":["tokio","park","thread","CachedParkThread"],"kind":"struct"},"2:43811":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:23304":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"30:11119":{"crate_id":30,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:877":{"crate_id":1,"path":["hyper","Owned"],"kind":"typedef"},"6:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:12478":{"crate_id":24,"path":["tokio","io","util","take","Take"],"kind":"struct"},"30:8317":{"crate_id":30,"path":["futures_util","future","join","Join5"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"24:608":{"crate_id":24,"path":["tokio","loom","std","atomic_usize","AtomicUsize"],"kind":"struct"},"6:3910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6532":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:9568":{"crate_id":24,"path":["tokio","sync","watch","state","Version"],"kind":"struct"},"2:3883":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:13916":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU8"],"kind":"struct"},"2:3076":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46717":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:284":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"2:48218":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:496":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:50521":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:5184":{"crate_id":5,"path":["hyper","Owned"],"kind":"typedef"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"2:3245":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:8024":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:49368":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"33:22":{"crate_id":33,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"20:2127":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"2:44687":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:2724":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_EXPOSE_HEADERS"],"kind":"constant"},"6:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10550":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:4754":{"crate_id":24,"path":["tokio","park","thread","Inner"],"kind":"struct"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"29:4071":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:43541":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:13118":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"20:2758":{"crate_id":20,"path":["http","header","name","LINK"],"kind":"constant"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"1:15263":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"30:9575":{"crate_id":30,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"6:1541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4191":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"30:10404":{"crate_id":30,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43802":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"30:9536":{"crate_id":30,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"29:5744":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"42:1253":{"crate_id":42,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"24:1764":{"crate_id":24,"path":["tokio","fs","read_dir","DirEntry"],"kind":"struct"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:167":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"2:4743":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"30:8482":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"27:695":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"27:1069":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"20:2780":{"crate_id":20,"path":["http","header","name","TE"],"kind":"constant"},"2:47142":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11573":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:4291":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10592":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:4425":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:14014":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10126":{"crate_id":2,"path":["hyper","IntoIter"],"kind":"typedef"},"30:9114":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"20:274":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"2:22644":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"30:9088":{"crate_id":30,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"29:4174":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4429":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"27:809":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1738":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"24:13536":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64"],"kind":"struct"},"1:3371":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21655":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:3090":{"crate_id":20,"path":["http","status","StatusCode"],"kind":"struct"},"29:4096":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"24:12140":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU8"],"kind":"struct"},"6:1707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:205":{"crate_id":20,"path":["hyper","Output"],"kind":"typedef"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:952":{"crate_id":24,"path":["tokio","util","wake_list","WakeList"],"kind":"struct"},"0:242":{"crate_id":0,"path":["hyper","body","aggregate"],"kind":"function"},"1:1273":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"33:407":{"crate_id":33,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"24:8401":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Acquire"],"kind":"struct"},"2:11442":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:5459":{"crate_id":24,"path":["tokio","runtime","task","waker","WakerRef"],"kind":"struct"},"30:11575":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"6:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"25:40":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"24:6170":{"crate_id":24,"path":["tokio","runtime","builder","Builder"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:5704":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"35:0":{"crate_id":35,"path":["futures_channel"],"kind":"module"},"24:12568":{"crate_id":24,"path":["tokio","io","util","shutdown","Shutdown"],"kind":"struct"},"29:5014":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:7866":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"42:1076":{"crate_id":42,"path":["tracing_core","metadata","Level"],"kind":"struct"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:2766":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS_REPORT_ONLY"],"kind":"constant"},"2:21309":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Even"],"kind":"struct"},"24:13242":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64Le"],"kind":"struct"},"20:424":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"1:12294":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"30:9883":{"crate_id":30,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"24:306":{"crate_id":24,"path":["tokio","io","async_write","AsyncWrite"],"kind":"trait"},"30:12161":{"crate_id":30,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"6:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7695":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"29:1682":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"30:12687":{"crate_id":30,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"24:7839":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedReceiver"],"kind":"struct"},"24:10839":{"crate_id":24,"path":["tokio","util","wake","WakerRef"],"kind":"struct"},"30:12660":{"crate_id":30,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:49337":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"30:8846":{"crate_id":30,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"35:504":{"crate_id":35,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"24:11560":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16Le"],"kind":"struct"},"2:10131":{"crate_id":2,"path":["hyper","Item"],"kind":"typedef"},"6:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49128":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2932":{"crate_id":1,"path":["hyper","Owned"],"kind":"typedef"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:8852":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard_mapped","RwLockMappedWriteGuard"],"kind":"struct"},"20:2728":{"crate_id":20,"path":["http","header","name","AGE"],"kind":"constant"},"24:11004":{"crate_id":24,"path":["tokio","task","unconstrained","_","__Origin"],"kind":"struct"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"0:297":{"crate_id":0,"path":["hyper","body","Body"],"kind":"struct"},"2:44098":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:15267":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:44064":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1208":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"30:12736":{"crate_id":30,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"5:957":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"24:10580":{"crate_id":24,"path":["tokio","time","driver","entry","TimerEntry"],"kind":"struct"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"27:917":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"29:3798":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"29:4123":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:14355":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:1720":{"crate_id":24,"path":["tokio","fs","file","Operation"],"kind":"enum"},"24:13340":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16Le"],"kind":"struct"},"24:1745":{"crate_id":24,"path":["tokio","fs","read_dir","ReadDir"],"kind":"struct"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"36:0":{"crate_id":36,"path":["tower_service"],"kind":"module"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47009":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47162":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5104":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:5939":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","InnerGuard"],"kind":"struct"},"24:4241":{"crate_id":24,"path":["tokio","io","util","buf_writer","SeekState"],"kind":"enum"},"1:13994":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:48786":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"24:8575":{"crate_id":24,"path":["tokio","sync","rwlock","owned_read_guard","OwnedRwLockReadGuard"],"kind":"struct"},"1:4409":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:10873":{"crate_id":24,"path":["tokio","util","try_lock","LockGuard"],"kind":"struct"},"2:22543":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"30:9584":{"crate_id":30,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:10545":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44712":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:938":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"30:6155":{"crate_id":30,"path":["futures_util","fns","OkFn"],"kind":"struct"},"24:7632":{"crate_id":24,"path":["tokio","sync","mpsc","chan","RxFields"],"kind":"struct"},"24:10973":{"crate_id":24,"path":["tokio","time","driver","sleep","_","__Origin"],"kind":"struct"},"29:520":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10320":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"6:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"30:11834":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:53064":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"24:11364":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16Le"],"kind":"struct"},"2:46931":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"30:6884":{"crate_id":30,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"35:528":{"crate_id":35,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"24:9469":{"crate_id":24,"path":["tokio","sync","batch_semaphore","TryAcquireError"],"kind":"enum"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:2705":{"crate_id":20,"path":["http","header","name","MaybeLower"],"kind":"struct"},"24:5505":{"crate_id":24,"path":["tokio","runtime","task","Task"],"kind":"struct"},"30:10179":{"crate_id":30,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"29:3831":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:3180":{"crate_id":20,"path":["http","uri","path","PathAndQuery"],"kind":"struct"},"1:11673":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43491":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"30:9010":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"41:275":{"crate_id":41,"path":["log","Record"],"kind":"struct"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"42:1132":{"crate_id":42,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"2:48638":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:47995":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43071":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"37:28":{"crate_id":37,"path":["httparse","iter","Bytes"],"kind":"struct"},"24:13879":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI8"],"kind":"struct"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:46039":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"29:1567":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"30:10341":{"crate_id":30,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:47330":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:1284":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"24:10794":{"crate_id":24,"path":["tokio","util","sync_wrapper","SyncWrapper"],"kind":"struct"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:1948":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"5:3360":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:1995":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"22:0":{"crate_id":22,"path":["bytes"],"kind":"module"},"1:10496":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10015":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"37:236":{"crate_id":37,"path":["httparse","InvalidChunkSize"],"kind":"struct"},"24:13960":{"crate_id":24,"path":["tokio","io","util","read_exact","ReadExact"],"kind":"struct"},"35:21":{"crate_id":35,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:861":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45839":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"30:12430":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"20:697":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"42:786":{"crate_id":42,"path":["tracing_core","callsite","REGISTRY"],"kind":"struct"},"24:1788":{"crate_id":24,"path":["tokio","future","maybe_done","MaybeDone"],"kind":"enum"},"20:342":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"2:43883":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:50220":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:8692":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard_mapped","OwnedRwLockMappedWriteGuard"],"kind":"struct"},"2:7453":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"45:41":{"crate_id":45,"path":["want","Taker"],"kind":"struct"},"20:690":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"29:3838":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"30:9790":{"crate_id":30,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"29:5891":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"34:386":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"30:10221":{"crate_id":30,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"24:10597":{"crate_id":24,"path":["tokio","time","driver","entry","CachePadded"],"kind":"struct"},"1:9370":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"5:7475":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"30:7018":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:48362":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"30:9867":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"29:4870":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45291":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"27:0":{"crate_id":27,"path":["memchr"],"kind":"module"},"30:3351":{"crate_id":30,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"29:5769":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:3127":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"29:508":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"5:4171":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"2:48145":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:2725":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_MAX_AGE"],"kind":"constant"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:12003":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:11658":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32"],"kind":"struct"},"1:695":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:2606":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"31:135":{"crate_id":31,"path":["hyper","Ok"],"kind":"typedef"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:48457":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:8874":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"22:566":{"crate_id":22,"path":["hyper","Target"],"kind":"typedef"},"27:840":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:7398":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"30:8734":{"crate_id":30,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44764":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10982":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46751":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:15274":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:7704":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"30:6413":{"crate_id":30,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"31:27":{"crate_id":31,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"20:418":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10711":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:3071":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"46:51":{"crate_id":46,"path":["hyper","Target"],"kind":"typedef"},"24:14348":{"crate_id":24,"path":["tokio","io","util","buf_reader","BufReader"],"kind":"struct"},"2:46688":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:2399":{"crate_id":20,"path":["http","header","map","IterMut"],"kind":"struct"},"2:45607":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:48016":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:2741":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY_REPORT_ONLY"],"kind":"constant"},"30:5729":{"crate_id":30,"path":["futures_util","stream","futures_unordered","{{impl}}","poll_next","Bomb"],"kind":"struct"},"30:11350":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:8390":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:13683":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128"],"kind":"struct"},"2:34910":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"39:430":{"crate_id":39,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"2:47375":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:155":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:14682":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:5032":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"30:11876":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"29:1630":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"6:3768":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8657":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:43773":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:7522":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5711":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"20:2489":{"crate_id":20,"path":["http","header","map","OccupiedEntry"],"kind":"struct"},"35:486":{"crate_id":35,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"29:5842":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:45817":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"30:10828":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:3154":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44851":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21918":{"crate_id":2,"path":["core","core_simd","select","sealed","Sealed"],"kind":"trait"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"20:1614":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"29:561":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"20:2499":{"crate_id":20,"path":["http","header","map","ValueIter"],"kind":"struct"},"42:273":{"crate_id":42,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"30:11599":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"35:439":{"crate_id":35,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44704":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11600":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"29:3683":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:10939":{"crate_id":24,"path":["tokio","time","timeout","_","__Origin"],"kind":"struct"},"34:515":{"crate_id":34,"path":["http_body","combinators","map_data","_","__Origin"],"kind":"struct"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9069":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"29:4931":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10506":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2095":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:2140":{"crate_id":20,"path":["hyper","Err"],"kind":"typedef"},"24:9798":{"crate_id":24,"path":["tokio","task","task_local","LocalKey"],"kind":"struct"},"2:7633":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7093":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"39:497":{"crate_id":39,"path":["tracing","instrument","_","__Origin"],"kind":"struct"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:12845":{"crate_id":24,"path":["tokio","io","util","read_line","ReadLine"],"kind":"struct"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"30:8930":{"crate_id":30,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"29:1519":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:2969":{"crate_id":20,"path":["http","header","value","HeaderValue"],"kind":"struct"},"1:8674":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:2652":{"crate_id":20,"path":["http","header","name","HdrName"],"kind":"struct"},"5:1433":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"30:10003":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"30:8653":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:12014":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22405":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"33:380":{"crate_id":33,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:11151":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45800":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1277":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"30:6319":{"crate_id":30,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"41:238":{"crate_id":41,"path":["log","MaybeStaticStr"],"kind":"enum"},"1:1970":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:4748":{"crate_id":24,"path":["tokio","park","thread","UnparkThread"],"kind":"struct"},"24:9591":{"crate_id":24,"path":["tokio","sync","watch","state","AtomicState"],"kind":"struct"},"30:11513":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"6:3708":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9628":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8700":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"5:4645":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"39:528":{"crate_id":39,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"2:3282":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:5173":{"crate_id":5,"path":["hyper","Output"],"kind":"typedef"},"30:10500":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"6:3780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5674":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"29:5099":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"30:4998":{"crate_id":30,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:10376":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:48890":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47150":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:11051":{"crate_id":24,"path":["tokio","task","task_local","_","__Origin"],"kind":"struct"},"20:836":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"20:2733":{"crate_id":20,"path":["http","header","name","CONNECTION"],"kind":"constant"},"20:1488":{"crate_id":20,"path":["http","response","Response"],"kind":"struct"},"30:5692":{"crate_id":30,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:50345":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"37:280":{"crate_id":37,"path":["httparse","Request"],"kind":"struct"},"2:48607":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:8655":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"29:1623":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"29:5111":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"29:4142":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:2752":{"crate_id":20,"path":["http","header","name","IF_MATCH"],"kind":"constant"},"30:7928":{"crate_id":30,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:46452":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:9278":{"crate_id":24,"path":["tokio","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:440":{"crate_id":24,"path":["tokio","net","addr","ToSocketAddrs"],"kind":"trait"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"34:196":{"crate_id":34,"path":["http_body","combinators","box_body","BoxBody"],"kind":"struct"},"29:4950":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"39:406":{"crate_id":39,"path":["tracing","__macro_support","MacroCallsite"],"kind":"struct"},"2:46814":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:827":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"29:4225":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:6740":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"29:4136":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:13781":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32"],"kind":"struct"},"6:1595":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"29:552":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"42:341":{"crate_id":42,"path":["tracing_core","field","{{impl}}","fmt","NullCallsite"],"kind":"struct"},"1:10892":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:9332":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:43893":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11007":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"42:1094":{"crate_id":42,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:543":{"crate_id":24,"path":["tokio","loom","std","atomic_u16","AtomicU16"],"kind":"struct"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8060":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:43283":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:8351":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"20:1291":{"crate_id":20,"path":["hyper","Err"],"kind":"typedef"},"0:718":{"crate_id":0,"path":["hyper","upgrade"],"kind":"module"},"20:700":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"1:5463":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:8003":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:12284":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:4287":{"crate_id":24,"path":["tokio","io","util","copy_buf","CopyBuf"],"kind":"struct"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9242":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:2757":{"crate_id":20,"path":["http","header","name","LAST_MODIFIED"],"kind":"constant"},"2:11723":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"41:357":{"crate_id":41,"path":["log","ParseLevelError"],"kind":"struct"},"20:839":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"2:12215":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:9304":{"crate_id":24,"path":["tokio","sync","broadcast","error","TryRecvError"],"kind":"enum"},"20:787":{"crate_id":20,"path":["http","header","value","InvalidHeaderValue"],"kind":"struct"},"20:2550":{"crate_id":20,"path":["http","header","map","Pos"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3106":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:3230":{"crate_id":20,"path":["http","uri","InvalidUri"],"kind":"struct"},"24:10030":{"crate_id":24,"path":["tokio","time","driver","entry","TimerSharedPadded"],"kind":"struct"},"2:9342":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"22:374":{"crate_id":22,"path":["bytes","buf","uninit_slice","UninitSlice"],"kind":"struct"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"30:9510":{"crate_id":30,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:43510":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:4744":{"crate_id":24,"path":["tokio","park","thread","ParkThread"],"kind":"struct"},"20:405":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"20:162":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"1:4148":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"29:1665":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:9333":{"crate_id":24,"path":["tokio","sync","mpsc","error","TrySendError"],"kind":"enum"},"20:166":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"24:6374":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","Spawner"],"kind":"struct"},"20:694":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"20:2742":{"crate_id":20,"path":["http","header","name","CONTENT_TYPE"],"kind":"constant"},"20:818":{"crate_id":20,"path":["hyper","Err"],"kind":"typedef"},"1:11539":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"30:11075":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"24:2099":{"crate_id":24,"path":["tokio","io","stderr","Stderr"],"kind":"struct"},"31:194":{"crate_id":31,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"30:7111":{"crate_id":30,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"6:1600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"30:12562":{"crate_id":30,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:50430":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:5603":{"crate_id":24,"path":["tokio","runtime","enter","exit","Reset"],"kind":"struct"},"24:1711":{"crate_id":24,"path":["tokio","fs","file","State"],"kind":"enum"},"5:7060":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:6338":{"crate_id":24,"path":["tokio","runtime","handle","TryCurrentError"],"kind":"struct"},"6:4229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"30:7971":{"crate_id":30,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:3034":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"29:6560":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43135":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11618":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"30:9678":{"crate_id":30,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:7416":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:1006":{"crate_id":24,"path":["tokio","util","linked_list","Pointers"],"kind":"struct"},"1:11194":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:10688":{"crate_id":24,"path":["tokio","time","instant","Instant"],"kind":"struct"},"6:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:13386":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44586":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:3810":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"20:544":{"crate_id":20,"path":["http","header","map","as_header_name","Sealed"],"kind":"trait"},"24:14153":{"crate_id":24,"path":["tokio","io","util","lines","_","__Origin"],"kind":"struct"},"29:5294":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"27:984":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:9426":{"crate_id":24,"path":["tokio","sync","oneshot","Sender"],"kind":"struct"},"24:10956":{"crate_id":24,"path":["tokio","time","driver","sleep","Sleep"],"kind":"struct"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"30:10428":{"crate_id":30,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"46:43":{"crate_id":46,"path":["try_lock","Locked"],"kind":"struct"},"24:1913":{"crate_id":24,"path":["tokio","io","blocking","Blocking"],"kind":"struct"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"29:502":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:0":{"crate_id":21,"path":["fnv"],"kind":"module"},"30:7577":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:3215":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"29:4065":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:14331":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:637":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"29:5897":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"29:4272":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"41:164":{"crate_id":41,"path":["log","NopLogger"],"kind":"struct"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"42:1193":{"crate_id":42,"path":["tracing_core","span","Attributes"],"kind":"struct"},"24:13585":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32"],"kind":"struct"},"35:419":{"crate_id":35,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"30:12699":{"crate_id":30,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:43160":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"35:461":{"crate_id":35,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"20:3185":{"crate_id":20,"path":["http","uri","scheme","Scheme"],"kind":"struct"},"45:82":{"crate_id":45,"path":["want","Want"],"kind":"struct"},"20:825":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"34:403":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"1:10176":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"20:2772":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_ACCEPT"],"kind":"constant"},"30:10519":{"crate_id":30,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:29979":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"35:539":{"crate_id":35,"path":["futures_channel","mpsc","State"],"kind":"struct"},"22:1040":{"crate_id":22,"path":["bytes","fmt","BytesRef"],"kind":"struct"},"2:12695":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:2591":{"crate_id":20,"path":["http","header","map","RawLinks"],"kind":"struct"},"5:1271":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"30:7283":{"crate_id":30,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"37:210":{"crate_id":37,"path":["httparse","Error"],"kind":"enum"},"29:6417":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:3240":{"crate_id":20,"path":["http","uri","ErrorKind"],"kind":"enum"},"20:1611":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"29:4249":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"34:352":{"crate_id":34,"path":["http_body","Body"],"kind":"trait"},"5:1951":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:12312":{"crate_id":24,"path":["tokio","io","util","write_all","WriteAll"],"kind":"struct"},"1:10958":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:495":{"crate_id":24,"path":["tokio","net","addr","sealed","ToSocketAddrsPriv"],"kind":"trait"},"1:5471":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"30:11765":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"30:8510":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"1:8420":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:2719":{"crate_id":20,"path":["http","header","name","ACCEPT_RANGES"],"kind":"constant"},"30:6481":{"crate_id":30,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"6:3823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:48304":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:45540":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"30:12547":{"crate_id":30,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:44636":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:5204":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:10963":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:2058":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"33:258":{"crate_id":33,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:22984":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2341":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:15282":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:10674":{"crate_id":24,"path":["tokio","time","error","Elapsed"],"kind":"struct"},"2:43318":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:9484":{"crate_id":24,"path":["tokio","sync","semaphore","Semaphore"],"kind":"struct"},"30:6659":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:8987":{"crate_id":1,"path":["std","task"],"kind":"module"},"29:5736":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:9508":{"crate_id":24,"path":["tokio","sync","once_cell","SetError"],"kind":"enum"},"24:7598":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Tx"],"kind":"struct"},"1:10040":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10906":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"20:2720":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_CREDENTIALS"],"kind":"constant"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"0:481":{"crate_id":0,"path":["hyper","rt","Executor"],"kind":"trait"},"30:10248":{"crate_id":30,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"27:1039":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:10281":{"crate_id":24,"path":["tokio","time","driver","Inner"],"kind":"struct"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:3902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:21311":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Odd"],"kind":"struct"},"6:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"29:5087":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:50267":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"27:877":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1953":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:10843":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"30:12060":{"crate_id":30,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"35:310":{"crate_id":35,"path":["futures_channel","oneshot"],"kind":"module"},"27:705":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"24:12796":{"crate_id":24,"path":["tokio","io","util","fill_buf","FillBuf"],"kind":"struct"},"30:9557":{"crate_id":30,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"37:187":{"crate_id":37,"path":["httparse","parse_headers_iter_uninit","ShrinkOnDrop"],"kind":"struct"},"24:1732":{"crate_id":24,"path":["tokio","fs","open_options","OpenOptions"],"kind":"struct"},"2:3032":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"39:338":{"crate_id":39,"path":["hyper","Target"],"kind":"typedef"},"2:23336":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:44790":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"30:12557":{"crate_id":30,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"30:10872":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"24:13095":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32Le"],"kind":"struct"},"1:10303":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:3483":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22690":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9462":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"2:9331":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:45103":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:3993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"30:12340":{"crate_id":30,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"1:3157":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"30:7455":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:23112":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:9344":{"crate_id":24,"path":["tokio","sync","mpsc","error","TryRecvError"],"kind":"enum"},"27:955":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:14317":{"crate_id":24,"path":["tokio","io","util","buf_stream","BufStream"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"35:473":{"crate_id":35,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:14601":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"35:349":{"crate_id":35,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:10177":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"30:11050":{"crate_id":30,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"20:543":{"crate_id":20,"path":["http","header","map","as_header_name","AsHeaderName"],"kind":"trait"},"20:3067":{"crate_id":20,"path":["http","method","extension","AllocatedExtension"],"kind":"struct"},"41:352":{"crate_id":41,"path":["log","SetLoggerError"],"kind":"struct"},"1:3804":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:7013":{"crate_id":24,"path":["tokio","runtime","Runtime"],"kind":"struct"},"6:657":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11558":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"24:9641":{"crate_id":24,"path":["tokio","task","yield_now","yield_now","{{closure}}","YieldNow"],"kind":"struct"},"2:11047":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44080":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5234":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9190":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"20:2748":{"crate_id":20,"path":["http","header","name","EXPIRES"],"kind":"constant"},"2:43830":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"29:3948":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:9956":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:43681":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"30:11639":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:43181":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:2316":{"crate_id":24,"path":["tokio","io","split","WriteHalf"],"kind":"struct"},"30:12129":{"crate_id":30,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"1:6604":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:9532":{"crate_id":24,"path":["tokio","sync","watch","Sender"],"kind":"struct"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:10417":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"42:827":{"crate_id":42,"path":["tracing_core","field","Field"],"kind":"struct"},"22:854":{"crate_id":22,"path":["hyper","Target"],"kind":"typedef"},"24:4852":{"crate_id":24,"path":["tokio","runtime","task","core","Header"],"kind":"struct"},"24:5647":{"crate_id":24,"path":["tokio","runtime","task","error","JoinError"],"kind":"struct"},"20:2770":{"crate_id":20,"path":["http","header","name","REFRESH"],"kind":"constant"},"6:3891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:2786":{"crate_id":20,"path":["http","header","name","VARY"],"kind":"constant"},"20:404":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"30:11144":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"30:11807":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"29:4204":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:7768":{"crate_id":24,"path":["tokio","sync","mpsc","list","Rx"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"1:10311":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"20:3172":{"crate_id":20,"path":["http","uri","authority","Authority"],"kind":"struct"},"30:12614":{"crate_id":30,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"28:0":{"crate_id":28,"path":["num_cpus"],"kind":"module"},"30:7232":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:44959":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:2515":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:2767":{"crate_id":20,"path":["http","header","name","RANGE"],"kind":"constant"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"33:203":{"crate_id":33,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"29:3710":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50364":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:3935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1420":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:8395":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Semaphore"],"kind":"struct"},"29:3657":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10961":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:3449":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8146":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:45555":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:7908":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"29:3770":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:329":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"29:6018":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47030":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:7449":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"30:12098":{"crate_id":30,"path":["futures_util","stream","once","Once"],"kind":"struct"},"20:3215":{"crate_id":20,"path":["http","uri","Uri"],"kind":"struct"},"29:1528":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:23240":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"29:1499":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"0:421":{"crate_id":0,"path":["hyper","Error"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:5707":{"crate_id":24,"path":["tokio","runtime","task","join","JoinHandle"],"kind":"struct"},"20:178":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"22:1242":{"crate_id":22,"path":["bytes","buf","iter","IntoIter"],"kind":"struct"},"2:43661":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:3983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7028":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:4741":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"30:6639":{"crate_id":30,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"24:6633":{"crate_id":24,"path":["tokio","runtime","queue","{{impl}}","push_overflow","BatchTaskIter"],"kind":"struct"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:3842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46638":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:5672":{"crate_id":24,"path":["tokio","runtime","task","inject","Inject"],"kind":"struct"},"1:11762":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:161":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"2:44109":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"29:3866":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10501":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"29:6531":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:574":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"30:10066":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"2:4422":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:8636":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard","OwnedRwLockWriteGuard"],"kind":"struct"},"24:10568":{"crate_id":24,"path":["tokio","time","clock","Clock"],"kind":"struct"},"42:276":{"crate_id":42,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"24:185":{"crate_id":24,"path":["tokio","io","async_buf_read","AsyncBufRead"],"kind":"trait"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:12252":{"crate_id":24,"path":["tokio","io","util","write_buf","WriteBuf"],"kind":"struct"},"29:5274":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:235":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7101":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain","BackshiftOnDrop"],"kind":"struct"},"30:6824":{"crate_id":30,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"29:4266":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:336":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"5:7611":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"0:788":{"crate_id":0,"path":["hyper","Output"],"kind":"typedef"},"20:419":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"22:786":{"crate_id":22,"path":["bytes","bytes_mut","BytesMut"],"kind":"struct"},"6:1643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"29:0":{"crate_id":29,"path":["libc"],"kind":"module"},"1:8533":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:5379":{"crate_id":5,"path":["hyper","Output"],"kind":"typedef"},"30:10027":{"crate_id":30,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"29:6572":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:15276":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"27:947":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"30:11999":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"6:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"1:8666":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1809":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:12518":{"crate_id":24,"path":["tokio","io","util","split","Split"],"kind":"struct"},"2:4375":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"35:467":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"24:10124":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Level"],"kind":"struct"},"20:2796":{"crate_id":20,"path":["http","header","name","StandardHeader"],"kind":"enum"},"2:4651":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"30:6904":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:9924":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"24:9500":{"crate_id":24,"path":["tokio","sync","rwlock","RwLock"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"30:6549":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"29:6549":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:2112":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"5:5375":{"crate_id":5,"path":["hyper","Output"],"kind":"typedef"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:2745":{"crate_id":20,"path":["http","header","name","DATE"],"kind":"constant"},"2:7460":{"crate_id":2,"path":["hyper","IntoIter"],"kind":"typedef"},"36:33":{"crate_id":36,"path":["hyper","Error"],"kind":"typedef"},"22:42":{"crate_id":22,"path":["bytes","buf","buf_impl","Buf"],"kind":"trait"},"22:1248":{"crate_id":22,"path":["bytes","buf","limit","Limit"],"kind":"struct"},"24:5577":{"crate_id":24,"path":["tokio","runtime","enter","EnterContext"],"kind":"enum"},"1:3200":{"crate_id":1,"path":["std","io"],"kind":"module"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:9450":{"crate_id":24,"path":["tokio","sync","oneshot","error","TryRecvError"],"kind":"enum"},"2:11447":{"crate_id":2,"path":["hyper","Item"],"kind":"typedef"},"2:53034":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"0:202":{"crate_id":0,"path":["hyper","body"],"kind":"module"},"33:0":{"crate_id":33,"path":["futures_task"],"kind":"module"},"20:2418":{"crate_id":20,"path":["http","header","map","Keys"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5826":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:9488":{"crate_id":24,"path":["tokio","sync","semaphore","SemaphorePermit"],"kind":"struct"},"29:3958":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7573":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:14009":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:1512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"25:27":{"crate_id":25,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"29:4995":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"30:8904":{"crate_id":30,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"31:96":{"crate_id":31,"path":["futures_core","stream","Stream"],"kind":"trait"},"6:1580":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11060":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:1550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"29:5946":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:12060":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:509":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:23176":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:15264":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"27:1058":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:6604":{"crate_id":24,"path":["tokio","runtime","queue","Steal"],"kind":"struct"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"27:1010":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:14318":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:10607":{"crate_id":24,"path":["tokio","time","driver","handle","Handle"],"kind":"struct"},"5:6259":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11651":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"37:332":{"crate_id":37,"path":["httparse","Header"],"kind":"struct"},"24:10984":{"crate_id":24,"path":["tokio","task","unconstrained","Unconstrained"],"kind":"struct"},"1:3806":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:9392":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"20:2774":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_KEY"],"kind":"constant"},"29:6578":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5541":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12785":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"35:447":{"crate_id":35,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:47312":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10840":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"29:6439":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"30:10775":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"30:6714":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3304":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"30:11535":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"30:5600":{"crate_id":30,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"30:5670":{"crate_id":30,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:595":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7201":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44089":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:2764":{"crate_id":20,"path":["http","header","name","PROXY_AUTHORIZATION"],"kind":"constant"},"6:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:53077":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"29:4925":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:5869":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","RemoteMsg"],"kind":"enum"},"30:12203":{"crate_id":30,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"30:7895":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:1226":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"31:52":{"crate_id":31,"path":["hyper","Ok"],"kind":"typedef"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1310":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:788":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:53129":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"2:2907":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:15277":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:15284":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"35:560":{"crate_id":35,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:5961":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:811":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"29:4233":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:14492":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"30:12181":{"crate_id":30,"path":["futures_util","stream","select","Select"],"kind":"struct"},"1:15271":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"39:355":{"crate_id":39,"path":["tracing","span","FmtAttrs"],"kind":"struct"},"20:2763":{"crate_id":20,"path":["http","header","name","PROXY_AUTHENTICATE"],"kind":"constant"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:15262":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3132":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"29:6025":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:11756":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64"],"kind":"struct"},"27:153":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"29:4020":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:6824":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10279":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:5592":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:4287":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:7949":{"crate_id":24,"path":["tokio","sync","mutex","Mutex"],"kind":"struct"},"27:170":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"29:3968":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3162":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11706":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:533":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"6:527":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:9996":{"crate_id":24,"path":["tokio","time","driver","entry","StateCell"],"kind":"struct"},"2:9932":{"crate_id":2,"path":["hyper","Output"],"kind":"typedef"},"1:10513":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"24:11017":{"crate_id":24,"path":["tokio","task","task_local","TaskLocalFuture"],"kind":"struct"},"24:6470":{"crate_id":24,"path":["tokio","runtime","spawner","Spawner"],"kind":"enum"},"5:1399":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:2313":{"crate_id":24,"path":["tokio","io","split","ReadHalf"],"kind":"struct"},"24:7202":{"crate_id":24,"path":["tokio","sync","broadcast","Recv"],"kind":"struct"},"20:2787":{"crate_id":20,"path":["http","header","name","VIA"],"kind":"constant"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"20:1359":{"crate_id":20,"path":["http","request","Parts"],"kind":"struct"},"2:34889":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5943":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"29:6543":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1285":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:2092":{"crate_id":24,"path":["tokio","io","stdio_common","SplitByUtf8BoundaryIfWindows"],"kind":"struct"},"5:6927":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:2783":{"crate_id":20,"path":["http","header","name","USER_AGENT"],"kind":"constant"},"24:6428":{"crate_id":24,"path":["tokio","runtime","context","EnterGuard"],"kind":"struct"},"0:768":{"crate_id":0,"path":["hyper","upgrade","OnUpgrade"],"kind":"struct"},"30:7940":{"crate_id":30,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"39:473":{"crate_id":39,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"22:1233":{"crate_id":22,"path":["bytes","buf","chain","Chain"],"kind":"struct"},"2:8463":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:9947":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11011":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:15275":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22568":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:1409":{"crate_id":24,"path":["tokio","fs","read","read"],"kind":"function"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:12780":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4102":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"30:10717":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"5:6905":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:10591":{"crate_id":24,"path":["tokio","time","driver","entry","TimerShared"],"kind":"struct"},"6:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:12099":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI8"],"kind":"struct"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"29:4129":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"42:288":{"crate_id":42,"path":["tracing_core","field","Value"],"kind":"trait"},"24:9391":{"crate_id":24,"path":["tokio","sync","notify","NotificationType"],"kind":"enum"},"2:22712":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"30:12307":{"crate_id":30,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"6:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2815":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"29:5778":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:10226":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:13252":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"30:12410":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"6:3787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10459":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:8819":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:9954":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:7153":{"crate_id":24,"path":["tokio","sync","broadcast","Sender"],"kind":"struct"},"30:9650":{"crate_id":30,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:22596":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"30:10048":{"crate_id":30,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:36067":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"29:3910":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:14736":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"20:1967":{"crate_id":20,"path":["http","uri","port","Port"],"kind":"struct"},"5:1969":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"37:246":{"crate_id":37,"path":["httparse","Status"],"kind":"enum"},"43:20":{"crate_id":43,"path":["lazy_static","lazy","Lazy"],"kind":"struct"},"21:20":{"crate_id":21,"path":["fnv","FnvHasher"],"kind":"struct"},"30:8563":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"12:220":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"30:12087":{"crate_id":30,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"30:12593":{"crate_id":30,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"5:791":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:2426":{"crate_id":20,"path":["http","header","map","Values"],"kind":"struct"},"1:732":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"29:1582":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3173":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:13047":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"24:8189":{"crate_id":24,"path":["tokio","sync","oneshot"],"kind":"module"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:6014":{"crate_id":24,"path":["tokio","runtime","blocking","pool","BlockingPool"],"kind":"struct"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:11984":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:22322":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1053":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:9633":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3550":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:6393":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Receiver"],"kind":"struct"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:7032":{"crate_id":24,"path":["tokio","coop","Budget"],"kind":"struct"},"20:2732":{"crate_id":20,"path":["http","header","name","CACHE_CONTROL"],"kind":"constant"},"30:6430":{"crate_id":30,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:10720":{"crate_id":1,"path":["std","io","Initializer"],"kind":"struct"},"5:5190":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:46852":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"29:1694":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:1195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"30:7387":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"34:458":{"crate_id":34,"path":["http_body","next","Trailers"],"kind":"struct"},"5:7220":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"2:10265":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"30:9842":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:4769":{"crate_id":2,"path":["core","iter"],"kind":"module"},"30:11221":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:10338":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"2:47146":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"39:154":{"crate_id":39,"path":["tracing","instrument","Instrument"],"kind":"trait"},"24:9438":{"crate_id":24,"path":["tokio","sync","oneshot","error","RecvError"],"kind":"struct"},"2:48343":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"34:387":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"24:1926":{"crate_id":24,"path":["tokio","io","blocking","State"],"kind":"enum"},"39:157":{"crate_id":39,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"2:4148":{"crate_id":2,"path":["core","array","collect_into_array","Guard"],"kind":"struct"},"5:7513":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:7960":{"crate_id":24,"path":["tokio","sync","mutex","MappedMutexGuard"],"kind":"struct"},"20:3189":{"crate_id":20,"path":["http","uri","scheme","Scheme2"],"kind":"enum"},"30:8369":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:3037":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10912":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"29:3825":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"0:484":{"crate_id":0,"path":["hyper","service"],"kind":"module"},"2:21271":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_right","Rotate"],"kind":"struct"},"2:29944":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2904":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"22:581":{"crate_id":22,"path":["hyper","Item"],"kind":"typedef"},"30:9150":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"1:13551":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"2:10136":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:14395":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:13720":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:21501":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3300":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"29:4256":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1297":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"30:7252":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:44071":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"29:1673":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:12743":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3010":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11545":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"35:552":{"crate_id":35,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"29:3817":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3125":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"30:7674":{"crate_id":30,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"1:11782":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"34:212":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"34:467":{"crate_id":34,"path":["http_body","size_hint","SizeHint"],"kind":"struct"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:43764":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:4101":{"crate_id":24,"path":["tokio","io","util","async_read_ext","AsyncReadExt"],"kind":"trait"},"24:990":{"crate_id":24,"path":["tokio","util","linked_list","LinkedList"],"kind":"struct"},"27:867":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44995":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:5525":{"crate_id":24,"path":["tokio","runtime","task","UnownedTask"],"kind":"struct"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:12951":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:48281":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:3873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:9326":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendError"],"kind":"struct"},"1:10307":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:2134":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"20:0":{"crate_id":20,"path":["http"],"kind":"module"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10221":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:1887":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"42:280":{"crate_id":42,"path":["tracing_core","field","Visit"],"kind":"trait"},"20:686":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"30:6395":{"crate_id":30,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"30:1080":{"crate_id":30,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"24:12050":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16"],"kind":"struct"},"2:48199":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"23:0":{"crate_id":23,"path":["itoa"],"kind":"module"},"6:521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:10872":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"30:9049":{"crate_id":30,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"1:14336":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"20:2773":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_EXTENSIONS"],"kind":"constant"},"1:4292":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:151":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"29:6537":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:43564":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2720":{"crate_id":1,"path":["hyper","Output"],"kind":"typedef"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7609":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"5:654":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8952":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"1:1092":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10807":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"3:299":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"30:10282":{"crate_id":30,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"42:1207":{"crate_id":42,"path":["tracing_core","span","Current"],"kind":"struct"},"2:9384":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:10303":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2711":{"crate_id":1,"path":["hyper","Owned"],"kind":"typedef"},"2:46484":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"30:6529":{"crate_id":30,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"34:109":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"1:2179":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"30:12675":{"crate_id":30,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"24:7428":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Permit"],"kind":"struct"},"30:12446":{"crate_id":30,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"24:10620":{"crate_id":24,"path":["tokio","time","driver","wheel","Wheel"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"42:466":{"crate_id":42,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:266":{"crate_id":24,"path":["tokio","io","async_seek","AsyncSeek"],"kind":"trait"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"30:7797":{"crate_id":30,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"20:2120":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"1:8581":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"29:3762":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"34:0":{"crate_id":34,"path":["http_body"],"kind":"module"},"42:797":{"crate_id":42,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"29:567":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:14442":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"42:1221":{"crate_id":42,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"6:553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7392":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:14078":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:2455":{"crate_id":20,"path":["http","header","map","GetAll"],"kind":"struct"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"34:256":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:2729":{"crate_id":20,"path":["http","header","name","ALLOW"],"kind":"constant"},"30:10560":{"crate_id":30,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"20:3205":{"crate_id":20,"path":["http","uri","scheme","Protocol"],"kind":"enum"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"30:8584":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"6:568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"20:1492":{"crate_id":20,"path":["http","response","Parts"],"kind":"struct"},"1:3185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:8353":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:10653":{"crate_id":24,"path":["tokio","time","error","Kind"],"kind":"enum"},"30:10108":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"5:1451":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:4302":{"crate_id":24,"path":["tokio","io","util","mem","DuplexStream"],"kind":"struct"},"24:5308":{"crate_id":24,"path":["tokio","runtime","task","state","State"],"kind":"struct"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"30:8742":{"crate_id":30,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3012":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:264":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"41:294":{"crate_id":41,"path":["log","Metadata"],"kind":"struct"},"35:547":{"crate_id":35,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"20:2784":{"crate_id":20,"path":["http","header","name","UPGRADE"],"kind":"constant"},"29:1512":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:4224":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"2:44781":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:565":{"crate_id":24,"path":["tokio","loom","std","atomic_u32","AtomicU32"],"kind":"struct"},"5:4860":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"29:3811":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:11700":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:3271":{"crate_id":20,"path":["http","version","Version"],"kind":"struct"},"1:15286":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9375":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"30:7065":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:13801":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"24:12678":{"crate_id":24,"path":["tokio","io","util","read_to_string","ReadToString"],"kind":"struct"},"29:615":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"24:14126":{"crate_id":24,"path":["tokio","io","util","lines","Lines"],"kind":"struct"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:12367":{"crate_id":24,"path":["tokio","io","util","write_vectored","WriteVectored"],"kind":"struct"},"1:8471":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"20:2762":{"crate_id":20,"path":["http","header","name","PRAGMA"],"kind":"constant"},"29:3722":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1636":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:14176":{"crate_id":24,"path":["tokio","io","util","flush","Flush"],"kind":"struct"},"20:3049":{"crate_id":20,"path":["http","method","extension","InlineExtension"],"kind":"struct"},"2:49050":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"29:6605":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:53142":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"1:6430":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"30:0":{"crate_id":30,"path":["futures_util"],"kind":"module"},"6:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"38:0":{"crate_id":38,"path":["httpdate"],"kind":"module"},"42:810":{"crate_id":42,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"24:4791":{"crate_id":24,"path":["tokio","runtime","enter","Enter"],"kind":"struct"},"1:11210":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:6066":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4383":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:14108":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49290":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:6673":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:2510":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:47166":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"27:963":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:10704":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:1832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:3092":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"30:8628":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:1308":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"34:449":{"crate_id":34,"path":["http_body","next","Data"],"kind":"struct"},"2:12847":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:4066":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10747":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"22:1255":{"crate_id":22,"path":["bytes","buf","reader","Reader"],"kind":"struct"},"24:4697":{"crate_id":24,"path":["tokio","loom","std","unsafe_cell","UnsafeCell"],"kind":"struct"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"29:5991":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:15230":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3123":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1623":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:48511":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:501":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1488":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:4038":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"30:9250":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:7356":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:10125":{"crate_id":2,"path":["hyper","Item"],"kind":"typedef"},"1:15280":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7594":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"30:9352":{"crate_id":30,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:3081":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:1948":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:43712":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"29:3731":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:8745":{"crate_id":24,"path":["tokio","sync","rwlock","read_guard","RwLockReadGuard"],"kind":"struct"},"29:4968":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:2730":{"crate_id":20,"path":["http","header","name","ALT_SVC"],"kind":"constant"},"2:46313":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2660":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4402":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"1:1965":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:50483":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"30:8821":{"crate_id":30,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"20:2238":{"crate_id":20,"path":["http","error","Error"],"kind":"struct"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"1:7239":{"crate_id":1,"path":["hyper","Item"],"kind":"typedef"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"31:122":{"crate_id":31,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"29:3877":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:2734":{"crate_id":20,"path":["http","header","name","CONTENT_DISPOSITION"],"kind":"constant"},"6:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"34:213":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"20:2737":{"crate_id":20,"path":["http","header","name","CONTENT_LENGTH"],"kind":"constant"},"2:29802":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:60076":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"1:15014":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:4368":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"20:2609":{"crate_id":20,"path":["http","header","map","Link"],"kind":"enum"},"1:15278":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:10683":{"crate_id":24,"path":["tokio","time","error","InsertError"],"kind":"enum"},"6:3747":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3118":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"35:426":{"crate_id":35,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:12710":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8318":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:3022":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:13582":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"29:5268":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:14091":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:5154":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1375":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"37:0":{"crate_id":37,"path":["httparse"],"kind":"module"},"6:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10343":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"24:13830":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16"],"kind":"struct"},"1:2618":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"34:436":{"crate_id":34,"path":["http_body","full","_","__Origin"],"kind":"struct"},"27:1002":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"42:682":{"crate_id":42,"path":["tracing_core","subscriber","Subscriber"],"kind":"trait"},"2:45585":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"29:6589":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"29:4165":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:14226":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"20:2765":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS"],"kind":"constant"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"22:577":{"crate_id":22,"path":["hyper","IntoIter"],"kind":"typedef"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49403":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4193":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:48971":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5712":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:7957":{"crate_id":24,"path":["tokio","sync","mutex","OwnedMutexGuard"],"kind":"struct"},"24:8070":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"12:116":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:23632":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"40:0":{"crate_id":40,"path":["cfg_if"],"kind":"module"},"2:43572":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:3004":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:11739":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"22:1298":{"crate_id":22,"path":["bytes","buf","writer","Writer"],"kind":"struct"},"30:12551":{"crate_id":30,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"24:13193":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128Le"],"kind":"struct"},"2:3456":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"46:0":{"crate_id":46,"path":["try_lock"],"kind":"module"},"2:3493":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2655":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:9264":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"2:9510":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:77":{"crate_id":24,"path":["tokio","macros","scoped_tls","{{impl}}","set","Reset"],"kind":"struct"},"39:512":{"crate_id":39,"path":["tracing","span","Span"],"kind":"struct"},"2:5713":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"30:7430":{"crate_id":30,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"29:3743":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:6982":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:4254":{"crate_id":24,"path":["tokio","io","util","copy","CopyBuffer"],"kind":"struct"},"20:489":{"crate_id":20,"path":["http","header","map","into_header_name","IntoHeaderName"],"kind":"trait"},"2:50094":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"35:433":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"1:11611":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"30:7992":{"crate_id":30,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:43782":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11596":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"24:13389":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64"],"kind":"struct"},"20:2755":{"crate_id":20,"path":["http","header","name","IF_RANGE"],"kind":"constant"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10783":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:48709":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:23272":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:3171":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:12545":{"crate_id":24,"path":["tokio","io","util","split","_","__Origin"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"39:424":{"crate_id":39,"path":["tracing","sealed","Sealed"],"kind":"trait"},"1:3040":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"42:1162":{"crate_id":42,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"30:6781":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"27:823":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:227":{"crate_id":24,"path":["tokio","io","async_read","AsyncRead"],"kind":"trait"},"5:3840":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:12716":{"crate_id":2,"path":["hyper","Output"],"kind":"typedef"},"2:45312":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:2736":{"crate_id":20,"path":["http","header","name","CONTENT_LANGUAGE"],"kind":"constant"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"29:5976":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3037":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3248":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:6827":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:2510":{"crate_id":20,"path":["http","header","map","ValueIterMut"],"kind":"struct"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11033":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1281":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:15270":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:6954":{"crate_id":24,"path":["tokio","runtime","thread_pool","ThreadPool"],"kind":"struct"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:13073":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"30:9474":{"crate_id":30,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:7475":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:15268":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"29:4180":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"29:3633":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:13487":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128"],"kind":"struct"},"23:38":{"crate_id":23,"path":["itoa","Integer"],"kind":"trait"},"1:11822":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"20:2740":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY"],"kind":"constant"},"29:5126":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"30:239":{"crate_id":30,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"24:6975":{"crate_id":24,"path":["tokio","runtime","thread_pool","idle","State"],"kind":"struct"},"20:2768":{"crate_id":20,"path":["http","header","name","REFERER"],"kind":"constant"},"2:22581":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:23144":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:2738":{"crate_id":20,"path":["http","header","name","CONTENT_LOCATION"],"kind":"constant"},"5:3495":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8311":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:1287":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10566":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21507":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"30:8398":{"crate_id":30,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:7965":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:6098":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"1:10385":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:12427":{"crate_id":24,"path":["tokio","io","util","write","Write"],"kind":"struct"},"0:480":{"crate_id":0,"path":["hyper","rt"],"kind":"module"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"41:325":{"crate_id":41,"path":["log","MetadataBuilder"],"kind":"struct"},"30:11618":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:22725":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8518":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12909":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4418":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"1:15265":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:6608":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"29:4186":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:7901":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2086":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"30:7827":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9235":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:10286":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"30:8406":{"crate_id":30,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:2982":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:6608":{"crate_id":24,"path":["tokio","runtime","queue","Inner"],"kind":"struct"},"1:8429":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:22219":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"30:12282":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"5:3349":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:45847":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10764":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:10928":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:15266":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:4225":{"crate_id":24,"path":["tokio","io","util","buf_reader","SeekState"],"kind":"enum"},"1:1262":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2917":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:5394":{"crate_id":5,"path":["hyper","Owned"],"kind":"typedef"},"29:6447":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:7805":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4069":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:5602":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"24:11315":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32Le"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8734":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47322":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4324":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:2464":{"crate_id":20,"path":["http","header","map","Entry"],"kind":"enum"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2653":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"24:13144":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16Le"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"24:4503":{"crate_id":24,"path":["tokio","io","util","sink","Sink"],"kind":"struct"},"29:1688":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:53116":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:4722":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"35:43":{"crate_id":35,"path":["futures_channel","mpsc"],"kind":"module"},"29:3737":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:48064":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46434":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:1831":{"crate_id":24,"path":["tokio","future","ready","Ready"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"30:10633":{"crate_id":30,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"24:11119":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64Le"],"kind":"struct"},"29:1709":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9394":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46277":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"30:11488":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:14473":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4104":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"30:7516":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"20:2662":{"crate_id":20,"path":["http","header","name","Repr"],"kind":"enum"},"24:5067":{"crate_id":24,"path":["tokio","runtime","task","harness","poll_future","{{closure}}","Guard"],"kind":"struct"},"2:46602":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7478":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46267":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"27:893":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47170":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"29:494":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"43:0":{"crate_id":43,"path":["lazy_static"],"kind":"module"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:4299":{"crate_id":24,"path":["tokio","io","util","empty","Empty"],"kind":"struct"},"27:817":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"0:678":{"crate_id":0,"path":["hyper","service","service_fn"],"kind":"function"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:5397":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:5107":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"29:649":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:2603":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"30:10803":{"crate_id":30,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:7232":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:5963":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"30:8146":{"crate_id":30,"path":["futures_util","future","join","Join"],"kind":"struct"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:1944":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:2078":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"5:313":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3110":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1413":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:943":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43632":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"2:26059":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:6449":{"crate_id":24,"path":["tokio","runtime","handle","Handle"],"kind":"struct"},"29:4214":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"6:3954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5485":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11777":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22488":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43873":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"31:0":{"crate_id":31,"path":["futures_core"],"kind":"module"},"29:3980":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46726":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:1479":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"29:4082":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:15285":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:6678":{"crate_id":24,"path":["tokio","runtime","thread_pool","atomic_cell","AtomicCell"],"kind":"struct"},"24:12948":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32Le"],"kind":"struct"},"1:15246":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9390":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"30:8044":{"crate_id":30,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:23208":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:10431":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"30:10305":{"crate_id":30,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21288":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Lo"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4199":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:4165":{"crate_id":24,"path":["tokio","io","util","async_write_ext","AsyncWriteExt"],"kind":"trait"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"27:939":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:4358":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"20:1607":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"30:6751":{"crate_id":30,"path":["futures_util","future","future","Then"],"kind":"struct"},"33:168":{"crate_id":33,"path":["hyper","Target"],"kind":"typedef"},"1:11722":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:45139":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:7600":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:2571":{"crate_id":20,"path":["http","header","map","Bucket"],"kind":"struct"},"20:2751":{"crate_id":20,"path":["http","header","name","HOST"],"kind":"constant"},"39:347":{"crate_id":39,"path":["tracing","span","FmtValues"],"kind":"struct"},"20:412":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"2:46357":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"0:770":{"crate_id":0,"path":["hyper","upgrade","on"],"kind":"function"},"24:10574":{"crate_id":24,"path":["tokio","time","clock","Inner"],"kind":"struct"},"29:5760":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"34:571":{"crate_id":34,"path":["http_body","combinators","map_err","_","__Origin"],"kind":"struct"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12140":{"crate_id":2,"path":["hyper","Searcher"],"kind":"typedef"},"1:11588":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:6563":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:8893":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:13423":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:804":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"1:976":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:8160":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:2160":{"crate_id":24,"path":["tokio","io","split","Guard"],"kind":"struct"},"6:559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:3086":{"crate_id":20,"path":["http","response","Builder"],"kind":"struct"},"24:5240":{"crate_id":24,"path":["tokio","runtime","task","raw","RawTask"],"kind":"struct"},"24:6870":{"crate_id":24,"path":["tokio","runtime","thread_pool","worker","block_in_place","Reset"],"kind":"struct"},"36:32":{"crate_id":36,"path":["hyper","Response"],"kind":"typedef"},"30:7934":{"crate_id":30,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"30:7357":{"crate_id":30,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"42:847":{"crate_id":42,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"30:12630":{"crate_id":30,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:43625":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3472":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"1:11802":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:49211":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:5565":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"0:331":{"crate_id":0,"path":["hyper","Error"],"kind":"typedef"},"2:9082":{"crate_id":2,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"24:12499":{"crate_id":24,"path":["tokio","io","util","take","_","__Origin"],"kind":"struct"},"1:8082":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:3371":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"36:26":{"crate_id":36,"path":["hyper","Future"],"kind":"typedef"},"30:825":{"crate_id":30,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"27:137":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2215":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21290":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Hi"],"kind":"struct"},"2:47158":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"36:25":{"crate_id":36,"path":["hyper","Error"],"kind":"typedef"},"1:11134":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:6184":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:50560":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:60097":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"29:5859":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"30:7953":{"crate_id":30,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10198":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"30:9733":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"30:7735":{"crate_id":30,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:2761":{"crate_id":20,"path":["http","header","name","ORIGIN"],"kind":"constant"},"38:129":{"crate_id":38,"path":["httpdate","Error"],"kind":"struct"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:2470":{"crate_id":20,"path":["hyper","header","Entry","Vacant"],"kind":"variant"},"20:2628":{"crate_id":20,"path":["http","header","map","Danger"],"kind":"enum"},"2:22660":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:21243":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","reverse","Reverse"],"kind":"struct"},"24:14404":{"crate_id":24,"path":["tokio","io","seek","Seek"],"kind":"struct"},"2:11994":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:2792":{"crate_id":20,"path":["http","header","name","X_FRAME_OPTIONS"],"kind":"constant"},"6:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"0:402":{"crate_id":0,"path":["hyper","body","to_bytes"],"kind":"function"},"2:43651":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49761":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"30:6983":{"crate_id":30,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:10777":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8982":{"crate_id":1,"path":["hyper","Target"],"kind":"typedef"},"30:12488":{"crate_id":30,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"20:3012":{"crate_id":20,"path":["http","method","Inner"],"kind":"enum"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45067":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:2778":{"crate_id":20,"path":["http","header","name","SET_COOKIE"],"kind":"constant"},"2:2901":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:9272":{"crate_id":24,"path":["tokio","sync","barrier","BarrierState"],"kind":"struct"},"2:49097":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:251":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"30:11376":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:2838":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3086":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:9463":{"crate_id":24,"path":["tokio","sync","oneshot","State"],"kind":"struct"},"39:533":{"crate_id":39,"path":["tracing","span","PhantomNotSend"],"kind":"struct"},"1:10587":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"42:1176":{"crate_id":42,"path":["tracing_core","span","Id"],"kind":"struct"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:12291":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:45792":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46339":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:1409":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"0:0":{"crate_id":0,"path":["hyper"],"kind":"module"},"20:2718":{"crate_id":20,"path":["http","header","name","ACCEPT_LANGUAGE"],"kind":"constant"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46883":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:1252":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"30:6138":{"crate_id":30,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"5:3373":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:6606":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10358":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:517":{"crate_id":24,"path":["tokio","loom","std","atomic_ptr","AtomicPtr"],"kind":"struct"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8584":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"45:0":{"crate_id":45,"path":["want"],"kind":"module"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"27:902":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46420":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:8913":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"27:850":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"41:0":{"crate_id":41,"path":["log"],"kind":"module"},"1:14019":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:9386":{"crate_id":24,"path":["tokio","sync","notify","Notify"],"kind":"struct"},"41:288":{"crate_id":41,"path":["log","RecordBuilder"],"kind":"struct"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"30:6043":{"crate_id":30,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"30:10614":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:10160":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:1532":{"crate_id":24,"path":["tokio","fs","read_to_string","read_to_string"],"kind":"function"},"30:10588":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"29:4194":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:5612":{"crate_id":24,"path":["tokio","runtime","enter","DisallowBlockingGuard"],"kind":"struct"},"1:14758":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:11217":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128Le"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:2727":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_METHOD"],"kind":"constant"},"5:7623":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:9495":{"crate_id":24,"path":["tokio","sync","semaphore","OwnedSemaphorePermit"],"kind":"struct"},"5:1093":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:4296":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"34:37":{"crate_id":34,"path":["http_body","empty","Empty"],"kind":"struct"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"34:483":{"crate_id":34,"path":["http_body","combinators","map_data","MapData"],"kind":"struct"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:14075":{"crate_id":24,"path":["tokio","io","util","read","Read"],"kind":"struct"},"30:10739":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:5529":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"30:10476":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:21497":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"30:7870":{"crate_id":30,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"29:3848":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:7177":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:22697":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"24:13438":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32"],"kind":"struct"},"30:12479":{"crate_id":30,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:44644":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"30:9824":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"20:661":{"crate_id":20,"path":["hyper","Err"],"kind":"typedef"},"24:4690":{"crate_id":24,"path":["tokio","loom","std","mutex","Mutex"],"kind":"struct"},"5:6416":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"20:376":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"5:7461":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"24:370":{"crate_id":24,"path":["tokio","io","read_buf","ReadBuf"],"kind":"struct"},"2:8577":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"5:7126":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:2598":{"crate_id":20,"path":["http","header","map","ExtraValue"],"kind":"struct"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:5519":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:15272":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"6:82":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:14045":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"29:1655":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:46958":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2691":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:6951":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"29:4058":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:5105":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"25:33":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:2144":{"crate_id":1,"path":["std","env"],"kind":"module"},"25:0":{"crate_id":25,"path":["pin_project_lite"],"kind":"module"},"24:1000":{"crate_id":24,"path":["tokio","util","linked_list","Link"],"kind":"trait"},"20:2739":{"crate_id":20,"path":["http","header","name","CONTENT_RANGE"],"kind":"constant"},"20:2715":{"crate_id":20,"path":["http","header","name","ACCEPT"],"kind":"constant"},"1:7652":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:46392":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:2010":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:10132":{"crate_id":2,"path":["hyper","IntoIter"],"kind":"typedef"},"24:11511":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32Le"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:10918":{"crate_id":24,"path":["tokio","time","timeout","Timeout"],"kind":"struct"},"1:14661":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8052":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"29:574":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:2781":{"crate_id":20,"path":["http","header","name","TRAILER"],"kind":"constant"},"30:11683":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"1:8460":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"6:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:8870":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"22:576":{"crate_id":22,"path":["hyper","Item"],"kind":"typedef"},"6:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"23:37":{"crate_id":23,"path":["itoa","private","Sealed"],"kind":"trait"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:0":{"crate_id":24,"path":["tokio"],"kind":"module"},"24:9432":{"crate_id":24,"path":["tokio","sync","oneshot","Receiver"],"kind":"struct"},"2:46367":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:46708":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7491":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43821":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"34:378":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"1:13492":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:1298":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:1574":{"crate_id":20,"path":["http","status","InvalidStatusCode"],"kind":"struct"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"30:9609":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:2779":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:2786":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:2442":{"crate_id":20,"path":["http","header","map","Drain"],"kind":"struct"},"24:11168":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32Le"],"kind":"struct"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"29:4027":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"24:6383":{"crate_id":24,"path":["tokio","runtime","blocking","pool","Spawner"],"kind":"struct"},"5:684":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"5:4761":{"crate_id":5,"path":["hyper","Target"],"kind":"typedef"},"1:10527":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1470":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"30:11744":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:7904":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"29:582":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:53090":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:49554":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1442":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"20:2116":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47043":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"30:7491":{"crate_id":30,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"1:4365":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:50468":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2072":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"36:24":{"crate_id":36,"path":["hyper","Response"],"kind":"typedef"},"24:12739":{"crate_id":24,"path":["tokio","io","util","read_to_end","ReadToEnd"],"kind":"struct"},"2:46502":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22215":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:10725":{"crate_id":24,"path":["tokio","time","interval","Interval"],"kind":"struct"},"2:44815":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4071":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:21256":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_left","Rotate"],"kind":"struct"},"2:44653":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3665":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:15273":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7135":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:1343":{"crate_id":30,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"30:11463":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"30:8951":{"crate_id":30,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"2:43497":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"30:8031":{"crate_id":30,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"30:8872":{"crate_id":30,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"24:10587":{"crate_id":24,"path":["tokio","time","driver","entry","TimerHandle"],"kind":"struct"},"24:10636":{"crate_id":24,"path":["tokio","time","driver","ClockTime"],"kind":"struct"},"1:1431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"32:0":{"crate_id":32,"path":["pin_utils"],"kind":"module"},"2:47020":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:9546":{"crate_id":24,"path":["tokio","sync","watch","Shared"],"kind":"struct"},"2:43862":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"30:12238":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:357":{"crate_id":20,"path":["hyper","Item"],"kind":"typedef"},"35:454":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"20:2785":{"crate_id":20,"path":["http","header","name","UPGRADE_INSECURE_REQUESTS"],"kind":"constant"},"20:2769":{"crate_id":20,"path":["http","header","name","REFERRER_POLICY"],"kind":"constant"},"1:10974":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:2777":{"crate_id":20,"path":["http","header","name","SERVER"],"kind":"constant"},"30:6579":{"crate_id":30,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:9388":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44695":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5725":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43526":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4083":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47154":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4736":{"crate_id":2,"path":["hyper","Target"],"kind":"typedef"},"1:10813":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"20:2722":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_METHODS"],"kind":"constant"},"34:46":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"24:11413":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128Le"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:337":{"crate_id":20,"path":["hyper","IntoIter"],"kind":"typedef"},"30:8010":{"crate_id":30,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:47213":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"2:7497":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"29:5819":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:11867":{"crate_id":2,"path":["hyper","Output"],"kind":"typedef"},"20:2791":{"crate_id":20,"path":["http","header","name","X_DNS_PREFETCH_CONTROL"],"kind":"constant"},"29:5876":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3045":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"29:5796":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:12617":{"crate_id":24,"path":["tokio","io","util","read_until","ReadUntil"],"kind":"struct"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:8593":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"6:4017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"39:522":{"crate_id":39,"path":["tracing","span","Entered"],"kind":"struct"},"24:9266":{"crate_id":24,"path":["tokio","sync","barrier","Barrier"],"kind":"struct"},"2:46410":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"42:1228":{"crate_id":42,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"2:3148":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:53103":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"20:2776":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_VERSION"],"kind":"constant"},"5:7560":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"29:588":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"24:7348":{"crate_id":24,"path":["tokio","sync","mpsc","block","Values"],"kind":"struct"},"20:2467":{"crate_id":20,"path":["hyper","header","Entry","Occupied"],"kind":"variant"},"1:14458":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2702":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50157":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46698":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:43611":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"34:413":{"crate_id":34,"path":["http_body","full","Full"],"kind":"struct"},"6:589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"30:11980":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:8362":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"24:9381":{"crate_id":24,"path":["tokio","sync","mutex","TryLockError"],"kind":"struct"},"29:5137":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:12001":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32"],"kind":"struct"},"5:3552":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:47404":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:860":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:1399":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:8043":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"2:48089":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"30:8292":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:1701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:50015":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:50384":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"34:379":{"crate_id":34,"path":["hyper","Error"],"kind":"typedef"},"1:14387":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"27:885":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"29:1505":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:9019":{"crate_id":24,"path":["tokio","sync","task","atomic_waker","AtomicWaker"],"kind":"struct"},"5:7678":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"29:3716":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"29:4150":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:7432":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","OwnedPermit"],"kind":"struct"},"34:402":{"crate_id":34,"path":["hyper","Data"],"kind":"typedef"},"39:0":{"crate_id":39,"path":["tracing"],"kind":"module"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3014":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3158":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:3235":{"crate_id":20,"path":["http","uri","InvalidUriParts"],"kind":"struct"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"29:5009":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2913":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"42:1201":{"crate_id":42,"path":["tracing_core","span","Record"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:3320":{"crate_id":20,"path":["http","byte_str","ByteStr"],"kind":"struct"},"1:9332":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"20:2691":{"crate_id":20,"path":["http","header","name","Custom"],"kind":"struct"},"29:4090":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12000":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"1:11738":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10371":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:10818":{"crate_id":24,"path":["tokio","util","vec_deque_cell","VecDequeCell"],"kind":"struct"},"1:15235":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7240":{"crate_id":1,"path":["hyper","IntoIter"],"kind":"typedef"},"45:89":{"crate_id":45,"path":["want","SharedGiver"],"kind":"struct"},"1:8153":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"29:4156":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:47174":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"29:144":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"1:1937":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"30:12219":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"24:11462":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64Le"],"kind":"struct"},"2:45632":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5983":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:11952":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64"],"kind":"struct"},"2:48323":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"22:140":{"crate_id":22,"path":["bytes","buf","buf_mut","BufMut"],"kind":"trait"},"24:7953":{"crate_id":24,"path":["tokio","sync","mutex","MutexGuard"],"kind":"struct"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:7459":{"crate_id":2,"path":["hyper","Item"],"kind":"typedef"},"2:45808":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"30:8797":{"crate_id":30,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"42:1062":{"crate_id":42,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"2:12009":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:48410":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"31:53":{"crate_id":31,"path":["hyper","Error"],"kind":"typedef"},"30:9803":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"30:6040":{"crate_id":30,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:46995":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"27:993":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:13054":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:2784":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"6:1668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3813":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2177":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22510":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"30:10140":{"crate_id":30,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:46249":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"27:927":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:8711":{"crate_id":24,"path":["hyper","Target"],"kind":"typedef"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:833":{"crate_id":20,"path":["hyper","Error"],"kind":"typedef"},"26:0":{"crate_id":26,"path":["tokio_macros"],"kind":"module"},"24:9285":{"crate_id":24,"path":["tokio","sync","broadcast","error","SendError"],"kind":"struct"},"24:7198":{"crate_id":24,"path":["tokio","sync","broadcast","RecvGuard"],"kind":"struct"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3462":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:45531":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:9416":{"crate_id":24,"path":["tokio","sync","notify","State"],"kind":"enum"},"24:6601":{"crate_id":24,"path":["tokio","runtime","queue","Local"],"kind":"struct"},"2:45546":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"}},"external_crates":{"24":{"name":"tokio","html_root_url":null},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"libc","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"37":{"name":"httparse","html_root_url":null},"43":{"name":"lazy_static","html_root_url":"https://docs.rs/lazy_static/1.4.0/"},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"itoa","html_root_url":"https://docs.rs/itoa/0.4.8/"},"36":{"name":"tower_service","html_root_url":"https://docs.rs/tower-service/0.3.1/"},"33":{"name":"futures_task","html_root_url":null},"22":{"name":"bytes","html_root_url":null},"27":{"name":"memchr","html_root_url":null},"21":{"name":"fnv","html_root_url":null},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"39":{"name":"tracing","html_root_url":"https://docs.rs/tracing/0.1.29/"},"35":{"name":"futures_channel","html_root_url":null},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"44":{"name":"tracing_attributes","html_root_url":"https://docs.rs/tracing-attributes/0.1.18/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"futures_util","html_root_url":null},"20":{"name":"http","html_root_url":"https://docs.rs/http/0.2.5/"},"26":{"name":"tokio_macros","html_root_url":null},"45":{"name":"want","html_root_url":"https://docs.rs/want/0.3.0/"},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"41":{"name":"log","html_root_url":"https://docs.rs/log/0.4.14/"},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"42":{"name":"tracing_core","html_root_url":"https://docs.rs/tracing-core/0.1.21/"},"40":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"num_cpus","html_root_url":"https://docs.rs/num_cpus/1.13.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"46":{"name":"try_lock","html_root_url":"https://docs.rs/try-lock/0.2.3/"},"34":{"name":"http_body","html_root_url":"https://docs.rs/http-body/0.4.3/"},"38":{"name":"httpdate","html_root_url":null},"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"31":{"name":"futures_core","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"pin_project_lite","html_root_url":null},"32":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"}},"format_version":9}