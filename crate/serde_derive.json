{"root":"0:0","crate_version":"1.0.133","includes_private":false,"index":{"2:3267":{"id":"2:3267","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3269","2:3270"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12593":{"id":"2:12593","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:47230","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2621":{"id":"2:2621","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2623"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2618","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2670":{"id":"2:2670","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2672","2:2673"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:12566":{"id":"2:12566","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11675","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12567","2:12568","2:12569","2:12570","2:12571","2:12572","2:12573","2:12574","2:12576","2:12578","2:12580","2:12582","2:12583","2:12584","2:12585","2:12586","2:12587","2:12588","2:12589","2:12590","2:12591","2:12592","2:12593","2:12594","2:12597","2:12600","2:12603","2:12607","2:12611","2:12614","2:12617","2:12620","2:12623","2:12626","2:12629","2:12632","2:12635","2:12638","2:12641","2:12644","2:12647","2:12650","2:12652","2:12654","2:12656","2:12657","2:12658","2:12661","2:12664","2:12667","2:12670","2:12673","2:12676","2:12679","2:12681","2:12682","2:12683","2:12684","2:12685","2:12687","2:12688"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5740":{"id":"5:5740","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5741"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12664":{"id":"2:12664","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15340","self::pattern":"2:12202"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8539":{"id":"2:8539","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7822":{"id":"2:7822","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7823","2:7824","2:7825","2:7826","2:7828","2:7831","2:7832","2:7833","2:7834","2:7836","2:7838","2:7839","2:7841","2:7844","2:7851","2:7853","2:7856","2:7857","2:7858","2:7860","2:7862","2:7865","2:7866","2:7867","2:7871","2:7874","2:7875","2:7876","2:7878","2:7879","2:7881","2:7891","2:7906","2:7908","2:7912","2:7921","2:7924","2:7926","2:7929","2:7936","2:7943","2:7950","2:7959","2:7969","2:7976","2:7983","2:7984","2:7985","2:7997","2:8004","2:8016","2:8023","2:8024","2:8029","2:8032","2:8035","2:8036","2:8038","2:8040","2:8043","2:8046","2:8049","2:8052","2:8055","2:8058","2:8060","2:8062","2:8064","2:8066","2:8068","2:8069","2:8077"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2717":{"id":"2:2717","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2719","2:2720","2:2721","2:2722","2:2723"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2670","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12607":{"id":"2:12607","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340","`None`":"2:45088"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:22707":{"id":"2:22707","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22708"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22703","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3029","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9570":{"id":"2:9570","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9571"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9560":{"id":"2:9560","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9561"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9500":{"id":"2:9500","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9501","2:9502","2:9504"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:63":{"id":"20:63","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64","20:65"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5423":{"id":"5:5423","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5438":{"id":"5:5438","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6571":{"id":"1:6571","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6572","1:6573"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12654":{"id":"2:12654","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:2632":{"id":"24:2632","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2633"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12638":{"id":"2:12638","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12202","str::matches":"1:15345","`DoubleEndedIterator`":"2:7677","prim@char":"1:15340"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:47142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12647":{"id":"2:12647","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15340","str::match_indices":"1:15345","self::pattern":"2:12202","`DoubleEndedIterator`":"2:7677"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:47106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5442":{"id":"5:5442","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15345"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9756":{"id":"2:9756","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9757","2:9759"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9568":{"id":"2:9568","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9569"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7629":{"id":"2:7629","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7631"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2997":{"id":"2:2997","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2998"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"21:658":{"id":"21:658","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:659"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3247":{"id":"2:3247","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3234","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:13309":{"id":"2:13309","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13310","2:13311","2:13312","2:13313"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12569":{"id":"2:12569","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3028":{"id":"2:3028","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12573":{"id":"2:12573","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15354"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3177":{"id":"2:3177","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12650":{"id":"2:12650","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12611":{"id":"2:12611","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15345","`DoubleEndedIterator`":"2:7677","str::split_whitespace":"1:15345","self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:46938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5440":{"id":"5:5440","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6730":{"id":"1:6730","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6731"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5523":{"id":"1:5523","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5524","1:5525"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2640":{"id":"2:2640","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2641","2:2642"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7642":{"id":"2:7642","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7644","2:7646","2:7647"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9549":{"id":"2:9549","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3476":{"id":"2:3476","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3478"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3471","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12652":{"id":"2:12652","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3173":{"id":"2:3173","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12620":{"id":"2:12620","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7677","str::rsplit_terminator":"1:15345","prim@char":"1:15340","self::pattern":"2:12202","str::split":"1:15345"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:46988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2854":{"id":"2:2854","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2853","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:5435":{"id":"1:5435","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5436","1:5437"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3181":{"id":"2:3181","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6341":{"id":"1:6341","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6342","1:6343"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2919":{"id":"2:2919","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2921"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:22061":{"id":"2:22061","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:22707","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22052","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:4459":{"id":"1:4459","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4460","1:4461","1:4463","1:4464","1:4465","1:4466","1:4467","1:4476"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3163":{"id":"2:3163","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3165","2:3166"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3234":{"id":"2:3234","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3235","2:3236"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3129":{"id":"2:3129","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3131"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2922":{"id":"2:2922","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2924"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5426":{"id":"5:5426","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12685":{"id":"2:12685","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15340"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:47237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5420":{"id":"5:5420","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3024":{"id":"2:3024","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6647":{"id":"1:6647","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5419":{"id":"5:5419","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:315","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7400","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:315","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7400","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12688":{"id":"2:12688","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15340"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:47255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12681":{"id":"2:12681","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12661":{"id":"2:12661","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12667":{"id":"2:12667","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12657":{"id":"2:12657","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5418":{"id":"5:5418","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5238","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5419","5:5420","5:5423","5:5426","5:5438","5:5439","5:5440","5:5441","5:5442"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12684":{"id":"2:12684","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5515":{"id":"1:5515","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5516","1:5517","1:5518"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12587":{"id":"2:12587","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:46914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7182":{"id":"2:7182","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7183","2:7184","2:7185","2:7186","2:7187","2:7188","2:7189"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2640","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2717","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12576":{"id":"2:12576","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:45088"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3258":{"id":"2:3258","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"24:2852":{"id":"24:2852","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12676":{"id":"2:12676","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15340","self::pattern":"2:12202"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:2131":{"id":"24:2131","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2132","24:2133","24:2134"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:13380":{"id":"2:13380","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13381","2:13382","2:13383","2:13384","2:13385","2:13386","2:13387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12600":{"id":"2:12600","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3323":{"id":"2:3323","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3319","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12632":{"id":"2:12632","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"23:29":{"id":"23:29","crate_id":23,"name":"UnicodeXID","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:30","23:31"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5439":{"id":"5:5439","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:315","`String`":"5:7617"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:315","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7400","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:154":{"id":"24:154","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3479":{"id":"2:3479","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12623":{"id":"2:12623","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12202","str::split_terminator":"1:15345","str::split":"1:15345","prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:47006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3261":{"id":"2:3261","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3263"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3264","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:4477":{"id":"1:4477","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4478","1:4479","1:4480","1:4481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3319":{"id":"2:3319","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321","2:3322"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:3125":{"id":"2:3125","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3127"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3086":{"id":"2:3086","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088","2:3089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6223":{"id":"1:6223","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6224","1:6225","1:6226","1:6227","1:6229","1:6231","1:6232"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9042":{"id":"2:9042","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9043","2:9044","2:9045"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5563":{"id":"1:5563","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564","1:5565","1:5566","1:5567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3142":{"id":"2:3142","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3144","2:3145"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12212":{"id":"2:12212","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12214","2:12215","2:12216","2:12217","2:12218","2:12219","2:12220"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5585":{"id":"1:5585","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5586"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12656":{"id":"2:12656","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3027":{"id":"2:3027","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12572":{"id":"2:12572","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15354","str::as_mut_ptr":"1:15345"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12683":{"id":"2:12683","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2928":{"id":"2:2928","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2930","2:2931"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6574":{"id":"1:6574","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6575"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:6645":{"id":"1:6645","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3019":{"id":"2:3019","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3152":{"id":"2:3152","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3154","2:3155"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4765":{"id":"1:4765","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4766","1:4767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12574":{"id":"2:12574","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:45088"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3169":{"id":"2:3169","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12926":{"id":"2:12926","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12927","2:12928","2:12929"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12911":{"id":"2:12911","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12912","2:12913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12588":{"id":"2:12588","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:46924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12221":{"id":"2:12221","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12223","2:12224","2:12225","2:12226"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3506":{"id":"2:3506","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"20:117":{"id":"20:117","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118","20:119","20:120"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12594":{"id":"2:12594","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15340","self::pattern":"2:12202"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12679":{"id":"2:12679","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12140","FromStr::Err":"2:12141"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:45214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3101":{"id":"2:3101","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3103","2:3104"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12617":{"id":"2:12617","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7677","self::pattern":"2:12202","prim@char":"1:15340","str::split":"1:15345"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:46956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2925":{"id":"2:2925","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2927"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9558":{"id":"2:9558","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:663":{"id":"5:663","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:664","5:665","5:666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12586":{"id":"2:12586","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:46908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3138":{"id":"2:3138","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139","2:3140"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3133":{"id":"2:3133","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3135"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2932":{"id":"2:2932","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2934","2:2935"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12578":{"id":"2:12578","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12570":{"id":"2:12570","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11686"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"24:2869":{"id":"24:2869","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2870"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12641":{"id":"2:12641","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15340","str::matches":"1:15345","self::pattern":"2:12202","`DoubleEndedIterator`":"2:7677"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:47160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4402":{"id":"1:4402","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4403","1:4404","1:4406","1:4407","1:4408","1:4409","1:4410","1:4412","1:4413","1:4414","1:4415","1:4417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"20:18":{"id":"20:18","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19","20:21","20:23","20:26"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12635":{"id":"2:12635","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12629":{"id":"2:12629","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15340","self::pattern":"2:12202","str::splitn":"1:15345"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:47060","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6243":{"id":"1:6243","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6244","1:6245","1:6246","1:6247","1:6248","1:6249"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7592":{"id":"2:7592","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7594"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12591":{"id":"2:12591","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:47192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12687":{"id":"2:12687","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15340"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:47246","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8099":{"id":"2:8099","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"5:5441":{"id":"5:5441","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15345"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5507":{"id":"1:5507","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5508","1:5509","1:5510","1:5511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2675":{"id":"2:2675","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2670","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12626":{"id":"2:12626","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15345","self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:47042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3728":{"id":"2:3728","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"2:12585":{"id":"2:12585","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15345"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3459":{"id":"2:3459","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3390","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9556":{"id":"2:9556","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9797":{"id":"2:9797","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9798","2:9799","2:9800"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"24:2963":{"id":"24:2963","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2964"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3543":{"id":"2:3543","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3186":{"id":"2:3186","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3188"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12582":{"id":"2:12582","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15345","crate::ops::Index":"2:3319","str::slice_mut_unchecked":"1:15345"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12658":{"id":"2:12658","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1258":{"id":"0:1258","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"1:4484":{"id":"1:4484","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4485","1:4486","1:4487","1:4489","1:4490","1:4492","1:4493"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4402","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12232":{"id":"2:12232","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:5529":{"id":"1:5529","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5530","1:5531","1:5532","1:5533","1:5534","1:5535","1:5536","1:5537","1:5538","1:5539","1:5540","1:5541","1:5542","1:5543","1:5544","1:5545"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3029":{"id":"2:3029","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2640","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9562":{"id":"2:9562","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9563"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12583":{"id":"2:12583","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15345","str::slice_unchecked":"1:15345","crate::ops::IndexMut":"2:3323"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:3096":{"id":"2:3096","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3098","2:3099"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3113":{"id":"2:3113","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3114","2:3115"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:10138":{"id":"2:10138","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10140","2:10141","2:10142","2:10143","2:10144","2:10145","2:10146"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10129","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9564":{"id":"2:9564","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9565"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12589":{"id":"2:12589","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15345"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:47212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12227":{"id":"2:12227","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12229","2:12230","2:12231"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3264":{"id":"2:3264","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3266"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3267","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2618":{"id":"2:2618","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2620"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:2706":{"id":"2:2706","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2707","2:2708","2:2709","2:2710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2717","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:6469":{"id":"1:6469","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6470","1:6471","1:6472","1:6473","1:6474","1:6475","1:6476","1:6477","1:6478","1:6479","1:6480","1:6481","1:6482","1:6483","1:6484","1:6485","1:6486"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:7515":{"id":"1:7515","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7516"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:858":{"id":"1:858","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:859","1:860","1:861","1:862","1:863","1:864","1:865"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5170":{"id":"5:5170","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5172","5:5173"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:11662":{"id":"2:11662","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11663","2:11664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12603":{"id":"2:12603","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:45088","prim@char":"1:15340","self::pattern":"2:12202"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:45088","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3060":{"id":"2:3060","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12597":{"id":"2:12597","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6643":{"id":"1:6643","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6644"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7596":{"id":"2:7596","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7598"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12580":{"id":"2:12580","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10138","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:3157":{"id":"2:3157","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3159","2:3160"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3121":{"id":"2:3121","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3123"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5573":{"id":"1:5573","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5574"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7677":{"id":"2:7677","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7678","2:7679","2:7680","2:7681","2:7685","2:7688"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7822","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3107":{"id":"2:3107","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3109","2:3110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12567":{"id":"2:12567","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12568":{"id":"2:12568","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:2916":{"id":"2:2916","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2918"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:21918":{"id":"2:21918","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21908","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:8095":{"id":"2:8095","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7822","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:8092":{"id":"2:8092","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7822","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7633":{"id":"2:7633","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7634","2:7635","2:7636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12592":{"id":"2:12592","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:47202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"24:3077":{"id":"24:3077","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3078","24:3079","24:3080","24:3081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:2338":{"id":"1:2338","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2339","1:2341","1:2342","1:2343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3390":{"id":"2:3390","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392","2:3393","2:3394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:12140":{"id":"2:12140","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12141","2:12142"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5174":{"id":"5:5174","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5176","5:5177"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3117":{"id":"2:3117","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3119"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12584":{"id":"2:12584","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15345"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12673":{"id":"2:12673","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15340","self::pattern":"2:12202"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:0":{"id":"0:0","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[107,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.133\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\n         clippy :: collapsible_match, clippy :: enum_variant_names, clippy ::\n         manual_map, clippy :: match_like_matches_macro, clippy ::\n         needless_pass_by_value, clippy :: too_many_arguments, clippy ::\n         trivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy\n         :: wildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\n         clippy :: doc_markdown, clippy :: enum_glob_use, clippy ::\n         indexing_slicing, clippy :: items_after_statements, clippy ::\n         let_underscore_drop, clippy :: manual_assert, clippy ::\n         map_err_ignore, clippy :: match_same_arms, clippy ::\n         match_wildcard_for_single_variants, clippy ::\n         module_name_repetitions, clippy :: must_use_candidate, clippy ::\n         option_if_let_else, clippy :: similar_names, clippy ::\n         single_match_else, clippy :: struct_excessive_bools, clippy ::\n         too_many_lines, clippy :: unseparated_literal_suffix, clippy ::\n         unused_self, clippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257","0:1258"]}},"2:12644":{"id":"2:12644","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7677","str::rmatch_indices":"1:15345","self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:47088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3031":{"id":"2:3031","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3091":{"id":"2:3091","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3093","2:3094"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12590":{"id":"2:12590","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15345"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:47221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8538":{"id":"2:8538","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3471":{"id":"2:3471","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3472","2:3473","2:3474","2:3475"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3476","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3471","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12571":{"id":"2:12571","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:7702":{"id":"2:7702","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7703","2:7704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7822","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:5441":{"id":"1:5441","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5442","1:5443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12670":{"id":"2:12670","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9766":{"id":"2:9766","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9767","2:9768","2:9769","2:9770","2:9771","2:9772","2:9773","2:9774","2:9775","2:9776","2:9777","2:9778","2:9779","2:9780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9566":{"id":"2:9566","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5577":{"id":"1:5577","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5578"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3147":{"id":"2:3147","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3149","2:3150"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3301":{"id":"2:3301","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3303","2:3304","2:3305"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12682":{"id":"2:12682","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12614":{"id":"2:12614","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12202","prim@char":"1:15340"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1257":{"id":"0:1257","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}}},"paths":{"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7577":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:5202":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"24:5489":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:7823":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","Item"],"kind":"foreign_type"},"1:10837":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3142":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:14834":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7432":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7524":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:816":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"24:6052":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"6:529":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4409":{"crate_id":1,"path":["std","io","Read","read_exact"],"kind":"foreign_type"},"1:7240":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11599":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11665":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:15361":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3588":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:23789":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:3473":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"1:13628":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"2:9042":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:48680":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:5161":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"2:46859":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4123":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:45155":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10379":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"1:5523":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:11919":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4068":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3319":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5542":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","ctime"],"kind":"foreign_type"},"2:3489":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5756":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10345":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:1387":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"5:2805":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:3046":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:7924":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","reduce"],"kind":"foreign_type"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45292":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:6413":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:53538":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:2852":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:9499":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"5:3569":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3117":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7279":{"crate_id":1,"path":["serde_derive","IntoIter"],"kind":"typedef"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4916":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"22:980":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"1:6647":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3933":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3169":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"2:9768":{"crate_id":2,"path":["core","hash","Hasher","write"],"kind":"foreign_type"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:23565":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:47435":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7424":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"1:4486":{"crate_id":1,"path":["std","io","BufRead","consume"],"kind":"foreign_type"},"21:254":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:6227":{"crate_id":1,"path":["std","os","unix","process","CommandExt","pre_exec"],"kind":"foreign_type"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44600":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"5:4241":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"1:14172":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:3384":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:43582":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:8650":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12843":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:6131":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:4996":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:5720":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:48785":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:5317":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:11993":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:5812":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:5204":{"crate_id":5,"path":["serde_derive","Owned"],"kind":"typedef"},"2:9802":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10891":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:45569":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47674":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:4094":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:14408":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:4593":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"5:1426":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:2075":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48827":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:47006":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:14155":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:4130":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:4457":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:5025":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:22063":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5538":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","atime"],"kind":"foreign_type"},"2:48703":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"21:3534":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:2028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:9756":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3152":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44275":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:630":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:15358":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:5788":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:4988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43746":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:14549":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1709":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5510":{"crate_id":1,"path":["std","os","unix","fs","FileExt","write_at"],"kind":"foreign_type"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:582":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:22061":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:290":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:3261":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:944":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:49213":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22703":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4170":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:4112":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:46869":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8723":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:2935":{"crate_id":1,"path":["serde_derive","Owned"],"kind":"typedef"},"2:44059":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:2916":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"2:50265":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47356":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:1295":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46341":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6573":{"crate_id":1,"path":["std","os","linux","process","ChildExt","take_pidfd"],"kind":"foreign_type"},"1:11612":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7440":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:5577":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47534":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:45353":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:44332":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46109":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:46938":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:3757":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4938":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:45130":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:13878":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4164":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1070":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6280":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46896":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:5078":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:10366":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:5136":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:315":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:13380":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:23757":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:14534":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10068":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:23053":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:1450":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:3390":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:693":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"6:3889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"12:117":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"1:730":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:3097":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10018":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"22:785":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"5:5984":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:5796":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43506":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:971":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:7851":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","filter"],"kind":"foreign_type"},"24:5390":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:1496":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1265":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:49841":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:5808":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"1:3814":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"24:5867":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:10262":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:541":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1419":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:6760":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:46760":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:14432":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"24:4777":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"6:561":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"1:10763":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:3379":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:14139":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9564":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:7357":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:5396":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:9570":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"5:7454":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:9418":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"2:50868":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"22:831":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:3388":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:9086":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10236":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11976":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:4839":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"2:44214":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:9757":{"crate_id":2,"path":["core","hash","Hash","hash"],"kind":"foreign_type"},"2:24117":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1526":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:3687":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:49370":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:13463":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11065":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:3121":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:14568":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:865":{"crate_id":1,"path":["std","ascii","AsciiExt","make_ascii_lowercase"],"kind":"foreign_type"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:5893":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1215":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1662":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"24:5963":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"24:2382":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:44013":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8783":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"2:12926":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:1110":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4949":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:13803":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:53603":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"21:1016":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:15354":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:2618":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:5840":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"2:43644":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:5712":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"6:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6730":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:15359":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:13797":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:8764":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"1:4199":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1549":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3479":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"1:15344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:4040":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:48520":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46841":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:3914":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:15349":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:6479":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:45214":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11593":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:4202":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:3091":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44098":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1259":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:3086":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:185":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:11087":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47387":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:1840":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:5646":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"24:5400":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:2982":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:45146":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:4485":{"crate_id":1,"path":["std","io","BufRead","fill_buf"],"kind":"foreign_type"},"1:1284":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:14821":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:9500":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:891":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:4885":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5153":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:5816":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:2530":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:5700":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:10572":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"24:6347":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46924":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:10397":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:3264":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:14319":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:3428":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:10093":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:49190":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:669":{"crate_id":5,"path":["serde_derive","Owned"],"kind":"typedef"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:3256":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:6048":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"5:2795":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:161":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:3374":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:47662":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:5918":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"2:11110":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:7124":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain_mut","BackshiftOnDrop"],"kind":"struct"},"22:542":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"24:458":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:7881":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","partition"],"kind":"foreign_type"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:5230":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:21968":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:4967":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:30407":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:14395":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:5300":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:5699":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10313":{"crate_id":2,"path":["serde_derive","Item"],"kind":"typedef"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:7649":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:46881":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10926":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"1:8100":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:49290":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7408":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44364":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:23693":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47816":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:50408":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:3488":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"22:779":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:5461":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:47908":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46087":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3147":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"22:873":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"21:3539":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"5:1302":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:2967":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:21908":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44304":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"20:0":{"crate_id":20,"path":["quote"],"kind":"module"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:23145":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2997":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:3932":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:12961":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"24:5760":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:23501":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4290":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:6128":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:517":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:6056":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:665":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"22:822":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"24:6388":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:23089":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:63":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:46545":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:3970":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:1223":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:1148":{"crate_id":21,"path":["proc_macro","bridge","client","Group"],"kind":"struct"},"1:5573":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:7237":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"5:672":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:3513":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:874":{"crate_id":1,"path":["serde_derive","Owned"],"kind":"typedef"},"2:10599":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3301":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:3203":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"22:743":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:9558":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:6020":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10609":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3019":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47658":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2075":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44354":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11654":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"24:3009":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:10447":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7394":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:6379":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:4022":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:23107":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:68":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"0:1258":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"2:45088":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46331":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:1487":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:2151":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:3788":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:6216":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:46914":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:4402":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10007":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10946":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:21918":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:12221":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:6404":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:5103":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"2:12358":{"crate_id":2,"path":["serde_derive","Searcher"],"kind":"typedef"},"2:10318":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:5331":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"1:8749":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"1:11114":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44266":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:53551":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"6:3852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:3668":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1396":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:14812":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:3124":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"22:855":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:1998":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:3819":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3247":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10756":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:15341":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:9566":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:7921":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","fold"],"kind":"foreign_type"},"23:0":{"crate_id":23,"path":["unicode_xid"],"kind":"module"},"1:6574":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:44082":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47318":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:4532":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11028":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7360":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4460":{"crate_id":1,"path":["std","io","Write","write"],"kind":"foreign_type"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1644":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:2734":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:1468":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:10651":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:3188":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46349":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:3872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:5755":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:5440":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:824":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"24:5945":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:53564":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"24:4743":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"2:36530":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:36593":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:1089":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12980":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:7856":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","enumerate"],"kind":"foreign_type"},"2:47255":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7132":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"2:7860":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","take_while"],"kind":"foreign_type"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"24:5435":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"1:4795":{"crate_id":1,"path":["serde_derive","Iter"],"kind":"typedef"},"2:3186":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6223":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11258":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:8577":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7412":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46118":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3176":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:11816":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:3439":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:11642":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:5820":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:45814":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1274":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:5848":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:5870":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:2853":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:47654":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:48593":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:4665":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1950":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:5832":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3177":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:2866":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"6:1520":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:49715":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4343":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:3493":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:5999":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"24:5804":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"6:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:5181":{"crate_id":5,"path":["serde_derive","Output"],"kind":"typedef"},"24:4852":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"2:30265":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2932":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10646":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11264":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:1890":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"24:177":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:4902":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"1:872":{"crate_id":1,"path":["serde_derive","Owned"],"kind":"typedef"},"24:3464":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:10824":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:5359":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"24:3968":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:8706":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:10329":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3471":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3043":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:4718":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"21:3392":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:6243":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:48499":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46541":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:6572":{"crate_id":1,"path":["std","os","linux","process","ChildExt","pidfd"],"kind":"foreign_type"},"1:5529":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:7906":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","is_partitioned"],"kind":"foreign_type"},"2:47060":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:22995":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:13144":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"24:6310":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"20:350":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"1:6575":{"crate_id":1,"path":["std","os","linux","process","CommandExt","create_pidfd"],"kind":"foreign_type"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:14518":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49111":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:2390":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:3479":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:3989":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:4477":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4386":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:5399":{"crate_id":5,"path":["serde_derive","Output"],"kind":"typedef"},"5:874":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2003":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:3500":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:12226":{"crate_id":2,"path":["core","str","pattern","Searcher","next_reject"],"kind":"foreign_type"},"2:35352":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:4951":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"2:10114":{"crate_id":2,"path":["serde_derive","Output"],"kind":"typedef"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:2869":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:5418":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:11042":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:15362":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:381":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:10308":{"crate_id":2,"path":["serde_derive","IntoIter"],"kind":"typedef"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:5397":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"24:6329":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:7836":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","zip"],"kind":"foreign_type"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2709":{"crate_id":1,"path":["serde_derive","Owned"],"kind":"typedef"},"1:4468":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:5940":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:23725":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:10323":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3181":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12227":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10342":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:4760":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"6:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"2:3506":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:12141":{"crate_id":2,"path":["core","str","traits","FromStr","Err"],"kind":"foreign_type"},"5:7695":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:299":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:3024":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:49601":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:21701":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Hi"],"kind":"struct"},"2:9237":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3163":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:45605":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:14303":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"2:22052":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:163":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:45206":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1428":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:3698":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:5585":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:2501":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"22:938":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:3572":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1934":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:3518":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:45283":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"2:4539":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"1:10338":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:5772":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"20:44":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:12278":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3047":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"22:735":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:21720":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Even"],"kind":"struct"},"2:4312":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:14071":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2235":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"22:739":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:5150":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:7640":{"crate_id":2,"path":["serde_derive","IntoIter"],"kind":"typedef"},"1:7512":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:597":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:5496":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:6376":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:43690":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:5242":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1515":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4123":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:3951":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10370":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"24:3244":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"24:4810":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"2:46988":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:49142":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1090":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:4460":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:6319":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:5177":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:10894":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:2616":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"24:6421":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:6690":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:6334":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:14677":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:47142":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:10520":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10861":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:3390":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"2:22707":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:5187":{"crate_id":5,"path":["serde_derive","Output"],"kind":"typedef"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:5586":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"6:3698":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11205":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:9031":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"24:5852":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:50897":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:159":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:50771":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:23469":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:13569":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:15345":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:3724":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:960":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:2675":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:6925":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:5987":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:4781":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:14096":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:13309":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"24:5037":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:12086":{"crate_id":2,"path":["serde_derive","Output"],"kind":"typedef"},"6:3811":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2797":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2787":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:10617":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:972":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:47920":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"2:44119":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:2857":{"crate_id":24,"path":["serde_derive","Token"],"kind":"typedef"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:3839":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"20:117":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12856":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3133":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47547":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:51064":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:3763":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3125":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4201":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44611":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:44582":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11705":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:3349":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:4702":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"1:10960":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46828":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3054":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:5748":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:4173":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:54842":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:3846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5508":{"crate_id":1,"path":["std","os","unix","fs","FileExt","read_at"],"kind":"foreign_type"},"1:12358":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1278":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:5844":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:6046":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:3029":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:47370":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4420":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:49554":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:7865":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","skip"],"kind":"foreign_type"},"2:50908":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:5804":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:50598":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"1:11776":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:5958":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:47106":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:14382":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4235":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:9510":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3377":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:4238":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:12427":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:6322":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:7744":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:3543":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:6088":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"5:7492":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10831":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:6044":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:46751":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2922":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:4730":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"6:4206":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:7642":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:4706":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:50849":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:7906":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8358":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:5210":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:693":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"22:1014":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:47212":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:3446":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:12202":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:7182":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:23012":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:5792":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"1:15306":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:9549":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:10129":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10864":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"24:936":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:43667":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:8095":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:15356":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:48961":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:3518":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:48847":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:5716":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:9232":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:13002":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46789":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:47870":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:303":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:5345":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:50972":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:47221":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:9797":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:5458":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:23597":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:6417":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3258":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"2:7596":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44243":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:2796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:10627":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:9239":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"1:8715":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9284":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:14185":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11760":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7021":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"2:4605":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:5254":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"0:0":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:7484":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"22:365":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:11627":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11650":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:47717":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"24:5271":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"1:14845":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3040":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:44385":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:5278":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:30442":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:7844":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","for_each"],"kind":"foreign_type"},"1:14325":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:13478":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"21:658":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:7692":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:1962":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9296":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"24:2076":{"crate_id":24,"path":["syn","buffer","{{impl}}","empty","UnsafeSyncEntry"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:3201":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:23066":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:4455":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:47650":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46319":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:48568":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:35373":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:45266":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:6119":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"1:14464":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"6:4255":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:187":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:7831":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","advance_by"],"kind":"foreign_type"},"5:7415":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:6050":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:10366":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"24:5021":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11188":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8193":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:6409":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"2:44153":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:567":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:7628":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7845":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:7822":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:90":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:3478":{"crate_id":2,"path":["core","ops","try_trait","FromResidual","from_residual"],"kind":"foreign_type"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11012":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:3986":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1938":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:48616":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1205":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"24:5729":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"5:3830":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:3254":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:858":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4490":{"crate_id":1,"path":["std","io","BufRead","read_line"],"kind":"foreign_type"},"1:5441":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"21:1247":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"24:0":{"crate_id":24,"path":["syn"],"kind":"module"},"2:47670":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4806":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"1:6866":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46294":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:2718":{"crate_id":1,"path":["serde_derive","Output"],"kind":"typedef"},"5:1288":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:808":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:13223":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:45800":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:45274":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3101":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:13213":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46302":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:15351":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2338":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:6141":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3728":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:9759":{"crate_id":2,"path":["core","hash","Hash","hash_slice"],"kind":"foreign_type"},"5:6538":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"22:24":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10565":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:5800":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"24:5742":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1703":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:5740":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2818":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"24:3590":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:4166":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50661":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:5049":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"5:7611":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:13273":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:44105":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:4188":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"1:7644":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:8540":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4465":{"crate_id":1,"path":["std","io","Write","write_all"],"kind":"foreign_type"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:15311":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:973":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:9552":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:2965":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"1:1236":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:9081":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:5718":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1570":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11836":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:18":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"6:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44205":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:5725":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:4933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4117":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46779":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:5737":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:10604":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:14699":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:3178":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:10613":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:928":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:53590":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"1:6483":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:9167":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:5313":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"5:1325":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:915":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2621":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:8092":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43623":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44051":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:45497":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:15322":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:4058":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"2:48992":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6481":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:23081":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:4898":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:194":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:46042":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"24:1164":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6571":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:5768":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:3784":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3025":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11727":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1603":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:14109":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:7839":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","intersperse_with"],"kind":"foreign_type"},"1:7159":{"crate_id":1,"path":["serde_derive","Owned"],"kind":"typedef"},"1:10247":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12867":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"2:43997":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:5165":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10586":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9679":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:2919":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:3352":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:15353":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:1746":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:800":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:5288":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2925":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:3644":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:4307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:23629":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:562":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:2309":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3377":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"24:4677":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"6:3918":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"21:1115":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStreamIter"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:3608":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:45461":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:5422":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"22:919":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:7103":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"1:5540":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","mtime"],"kind":"foreign_type"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:8539":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:45258":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:7832":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","nth"],"kind":"foreign_type"},"1:10966":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7617":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7080":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:12361":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:1314":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:7702":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:21682":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_right","Rotate"],"kind":"struct"},"24:952":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:23197":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44028":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5008":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"1:11061":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:7703":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator","len"],"kind":"foreign_type"},"6:4266":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4147":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"2:10314":{"crate_id":2,"path":["serde_derive","IntoIter"],"kind":"typedef"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:5708":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"1:9367":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:10402":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"6:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:6353":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:7824":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","next"],"kind":"foreign_type"},"2:7825":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","size_hint"],"kind":"foreign_type"},"2:44591":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"24:3806":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:10560":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44284":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:3901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:5772":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:45425":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:2795":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:53577":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:46033":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:4184":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:23210":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10280":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1533":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5563":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4087":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44252":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5888":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:11713":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:7678":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator","next_back"],"kind":"foreign_type"},"2:12224":{"crate_id":2,"path":["core","str","pattern","Searcher","next"],"kind":"foreign_type"},"2:7629":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:5090":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:15348":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:662":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"6:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1676":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:3037":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:11143":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:12140":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22973":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:44163":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:2311":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:3950":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:3160":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:5704":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:50934":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:4660":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"24:5066":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"6:1840":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:3939":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:14168":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:8194":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:3037":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3816":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:4076":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:2068":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"1:15352":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4215":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3107":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:46769":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:53508":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:47678":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10811":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:10257":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:4835":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:45389":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:589":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6004":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:6643":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:5384":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:8538":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:5969":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:8156":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"2:49632":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:9560":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2027":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:3674":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:15360":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1694":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"22:716":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:12932":{"crate_id":2,"path":["serde_derive","Output"],"kind":"typedef"},"24:6083":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:44138":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7149":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:4822":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8630":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:47499":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4244":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:1181":{"crate_id":21,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3234":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:49872":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:46815":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7640":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:15340":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"24:1282":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:7891":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","partition_in_place"],"kind":"foreign_type"},"24:4793":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4221":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44196":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:154":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:46691":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:4148":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:11792":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:5487":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"24:5764":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:48545":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:3778":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47192":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:5193":{"crate_id":5,"path":["serde_derive","Output"],"kind":"typedef"},"6:3772":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5923":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:5415":{"crate_id":5,"path":["serde_derive","Owned"],"kind":"typedef"},"2:50888":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6341":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:6947":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:968":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:3842":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:4407":{"crate_id":1,"path":["std","io","Read","read_to_end"],"kind":"foreign_type"},"5:3921":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3039":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:5414":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"21:3340":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:2963":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:3339":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:3751":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:13109":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:10461":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"1:4020":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2174":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"2:8068":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","is_sorted"],"kind":"foreign_type"},"24:4992":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"1:6469":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4319":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8565":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4024":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:1665":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:3142":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:2858":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:49394":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44038":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:43978":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:1806":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:5990":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:12225":{"crate_id":2,"path":["core","str","pattern","Searcher","next_match"],"kind":"foreign_type"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:1956":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"24:665":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7346":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:3326":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:3770":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:13659":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"24:4004":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:3077":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:5426":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"5:2801":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:26544":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:3626":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:5423":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"24:4256":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:14122":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:5062":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"24:2311":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"5:6096":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"24:3878":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:48866":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:7633":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:2641":{"crate_id":2,"path":["core","clone","Clone","clone"],"kind":"foreign_type"},"1:14091":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:44295":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4242":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:4868":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:3824":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:10555":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:23175":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:940":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10444":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45138":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:15342":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3113":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4489":{"crate_id":1,"path":["std","io","BufRead","read_until"],"kind":"foreign_type"},"24:3680":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:47478":{"crate_id":2,"path":["serde_derive","Searcher"],"kind":"typedef"},"2:10138":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:7677":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:7639":{"crate_id":2,"path":["serde_derive","Item"],"kind":"typedef"},"2:12232":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"2:49015":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:4055":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:22610":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"22:791":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:14413":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:3866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6990":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"1:7278":{"crate_id":1,"path":["serde_derive","Item"],"kind":"typedef"},"1:10430":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"22:0":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"1:932":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2098":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8500":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"1:14562":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:7841":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","map"],"kind":"foreign_type"},"5:1478":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:2194":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47826":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:11942":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:3366":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44112":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:14086":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:9766":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:6712":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:3907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"24:5733":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:1249":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47834":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:9556":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:6305":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:3796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:5455":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:47230":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4902":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46956":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:4955":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"6:603":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:6120":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:49064":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10970":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47160":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:6373":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:45197":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:15347":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47704":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:7592":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:3926":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:14758":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"23:29":{"crate_id":23,"path":["unicode_xid","UnicodeXID"],"kind":"trait"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:5507":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:3410":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:11229":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"22:908":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"24:6003":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:4673":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"1:15350":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:11958":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11831":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10362":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"24:5824":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:10779":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:47524":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2961":{"crate_id":2,"path":["serde_derive","Error"],"kind":"typedef"},"2:47666":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:5435":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"24:5747":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8186":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8001":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:10818":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:1651":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43534":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7380":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10801":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4112":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4106":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7590":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:1371":{"crate_id":21,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"5:1459":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"24:3356":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:15346":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4484":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6645":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:2527":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:3734":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:4123":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:3711":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"0:1257":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"24:4220":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:3129":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4197":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:920":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:13500":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"24:6337":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:48649":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43984":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:12933":{"crate_id":2,"path":["serde_derive","Future"],"kind":"typedef"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3032":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:45807":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46075":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"5:1729":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47879":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:23821":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:13125":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"24:6350":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7463":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10485":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8460":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:6226":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:11721":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:14472":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:3500":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:9413":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44573":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:47042":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10897":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:2706":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11275":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:3536":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"2:47462":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:509":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"2:44076":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22807":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"1:4120":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46057":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:14145":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:3053":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:1275":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:3468":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:47246":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:456":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","{{impl}}","replace","PutBackOnDrop"],"kind":"struct"},"2:45189":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:2553":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"2:21667":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_left","Rotate"],"kind":"struct"},"24:5107":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"6:3999":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11017":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:2095":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8200":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:10307":{"crate_id":2,"path":["serde_derive","Item"],"kind":"typedef"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3060":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"24:1278":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:2176":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6107":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:3554":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"20:521":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44183":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:1945":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2670":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:2554":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:44234":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:4926":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"1:13800":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:67":{"crate_id":24,"path":["syn","token"],"kind":"module"},"1:11876":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:5189":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:8099":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1967":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47202":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"1:15090":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44224":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"2:12212":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:13329":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:45641":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:0":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46134":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2141":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:47455":{"crate_id":2,"path":["serde_derive","Searcher"],"kind":"typedef"},"2:9568":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4403":{"crate_id":1,"path":["std","io","Read","read"],"kind":"foreign_type"},"1:4461":{"crate_id":1,"path":["std","io","Write","write_vectored"],"kind":"foreign_type"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:50724":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:50877":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:44566":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:4914":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"2:50923":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45793":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1392":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:5174":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"22:845":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:3027":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:5860":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:1192":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4761":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"1:15343":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"2:21722":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Odd"],"kind":"struct"},"2:48754":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1437":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"5:3512":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:4577":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:1301":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3557":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:7478":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:49338":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:12911":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:5206":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:1730":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:5125":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"2:3096":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:5911":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"21:426":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:2998":{"crate_id":2,"path":["core","default","Default","default"],"kind":"foreign_type"},"2:47237":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:51002":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:663":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44375":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46908":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:2131":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:2854":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44395":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"22:913":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:7908":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","try_fold"],"kind":"foreign_type"},"24:4856":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"24:2632":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"21:3453":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"1:3162":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:976":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:608":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8469":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:50519":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"2:45533":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5515":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11672":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:50987":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3459":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"21:1675":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:2202":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:4979":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:4747":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5828":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:3267":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8633":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:1214":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:21699":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Lo"],"kind":"struct"},"2:47341":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:49475":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:13039":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:11667":{"crate_id":2,"path":["serde_derive","Item"],"kind":"typedef"},"24:2991":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"2:44313":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:5467":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"2:48914":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1558":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7712":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:6054":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:861":{"crate_id":1,"path":["std","ascii","AsciiExt","to_ascii_uppercase"],"kind":"foreign_type"},"24:2149":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:3323":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4375":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:1049":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"5:1416":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:12432":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:635":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:5284":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5769":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:3896":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:5267":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:5781":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:3662":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:5403":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"1:2237":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4781":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"2:8215":{"crate_id":2,"path":["serde_derive","Target"],"kind":"typedef"},"24:6124":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"22:836":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4765":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:46850":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46048":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:3157":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10770":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:50949":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:12066":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:3205":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"5:7409":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:2365":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2717":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"20:47":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"1:10417":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:50058":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5870":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:13216":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"24:4881":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12351":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"2:10558":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4078":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11165":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:4451":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:862":{"crate_id":1,"path":["std","ascii","AsciiExt","to_ascii_lowercase"],"kind":"foreign_type"},"1:11022":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:7838":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","intersperse"],"kind":"foreign_type"},"24:2279":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:7875":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","fuse"],"kind":"foreign_type"},"2:9562":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:7871":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","flat_map"],"kind":"foreign_type"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"24:6366":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:8787":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"2:3138":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:3089":{"crate_id":24,"path":["serde_derive","Output"],"kind":"typedef"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:6356":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:49907":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:14737":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:523":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10235":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:864":{"crate_id":1,"path":["std","ascii","AsciiExt","make_ascii_uppercase"],"kind":"foreign_type"},"1:9291":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:3716":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:9001":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3061":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:7508":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4438":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"5:4445":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"21:569":{"crate_id":21,"path":["proc_macro","bridge","Bridge"],"kind":"struct"},"24:5751":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"22:964":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:7685":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator","rfold"],"kind":"foreign_type"},"2:47893":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:4459":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:7400":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:5124":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:6104":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:1582":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"2:11882":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:15339":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:6363":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"2:43805":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:5777":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:5148":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"1:11036":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:49165":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8942":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"2:4522":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47682":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:6098":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"22:958":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"6:4099":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10408":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7530":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9380":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:10625":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:11686":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:5218":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8351":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2355":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:45317":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"1:8402":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47088":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7067":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:6331":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"5:5170":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1616":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:5784":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:49238":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2640":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:2058":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:5893":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:4586":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44323":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:803":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3485":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:3031":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8122":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"22:769":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:6687":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6437":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"1:4155":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2966":{"crate_id":2,"path":["serde_derive","Error"],"kind":"typedef"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1505":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11747":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:2447":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:3173":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:10641":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:3858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:3482":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:43713":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1640":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:8582":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"20:424":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"5:505":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"1:8511":{"crate_id":1,"path":["serde_derive","Target"],"kind":"typedef"},"5:5732":{"crate_id":5,"path":["serde_derive","Target"],"kind":"typedef"},"1:3820":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"1:15338":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:1951":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"24:5836":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:11856":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:5395":{"crate_id":5,"path":["serde_derive","Output"],"kind":"typedef"},"2:4823":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"2:54863":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:1986":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:4689":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:47513":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:3829":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:3879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1968":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:47646":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2784":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21912":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10308":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:7874":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","flatten"],"kind":"foreign_type"},"6:576":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:7004":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3469":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:1082":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStreamBuilder"],"kind":"struct"},"1:11248":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:535":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:15355":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:23661":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:23182":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"22:934":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:3476":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:5491":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"2:43598":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:5120":{"crate_id":24,"path":["serde_derive","Target"],"kind":"typedef"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1410":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46310":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:53616":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"22:864":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:4274":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"24:3752":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:3028":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"24:5995":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1540":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:4764":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:45121":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"22:754":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:46742":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9510":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4177":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48808":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:23028":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:2338":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:2454":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"1:7515":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4157":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2212":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"3:313":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:3392":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:49794":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:1355":{"crate_id":21,"path":["proc_macro","bridge","client","Punct"],"kind":"struct"},"2:4923":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:5856":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"21:1280":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"1:3035":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21654":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","reverse","Reverse"],"kind":"struct"},"1:1307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:5224":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:1588":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:23129":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:22890":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12229":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher","next_back"],"kind":"foreign_type"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:6583":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:44344":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9423":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"1:1270":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:5972":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:50810":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:11662":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"22:985":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"1:3503":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:3457":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"24:6359":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:15357":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:48722":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:4880":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8092":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"24:6325":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:6327":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:23533":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:3860":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"5:3857":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2089":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:5740":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4799":{"crate_id":1,"path":["serde_derive","Iter"],"kind":"typedef"},"2:51025":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10867":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:6342":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"12:221":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:162":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:7174":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2928":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"}},"external_crates":{"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.36/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_xid","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.14/"},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.85/"}},"format_version":9}