{"root":"0:0","crate_version":"3.0.0-beta.5","includes_private":false,"index":{"0:392":{"id":"0:392","crate_id":0,"name":"get_subcommands_mut","span":{"filename":"src/build/app/mod.rs","begin":[207,4],"end":[209,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a mutable reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3549":{"id":"b:2:2941-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12417":{"id":"2:12417","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11994","str::split":"1:15275","prim@char":"1:15270","str::split_terminator":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:46490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5405":{"id":"5:5405","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3250":{"id":"2:3250","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3253","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:137":{"id":"0:137","crate_id":0,"name":"FromArgMatches","span":{"filename":"src/derive.rs","begin":[148,0],"end":[185,1]},"visibility":"public","docs":"Converts an instance of [`ArgMatches`] to a user-defined container.","links":{"`ArgMatches`":"0:3583"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:138","0:139"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:171"]}},"0:90":{"id":"0:90","crate_id":0,"name":"crate_name","span":{"filename":"src/macros.rs","begin":[163,0],"end":[167,1]},"visibility":"public","docs":"Allows you to pull the name from your Cargo.toml at compile time.\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# use clap::App;\n# fn main() {\nlet m = App::new(crate_name!())\n            .get_matches();\n# }\n```","links":{},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! crate_name {\n    () => { ... };\n}"},"b:2:2956-0:3597":{"id":"b:2:2956-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2633":{"id":"2:2633","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2634","2:2635"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6430":{"id":"1:6430","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6431","1:6432","1:6433","1:6434","1:6435","1:6436","1:6437","1:6438","1:6439","1:6440","1:6441","1:6442","1:6443","1:6444","1:6445","1:6446","1:6447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:677":{"id":"0:677","crate_id":0,"name":"get_name","span":{"filename":"src/build/arg/arg_value.rs","begin":[51,4],"end":[53,5]},"visibility":"public","docs":"Get the name of the argument value","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3616":{"id":"b:2:2620-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9405":{"id":"2:9405","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9406"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3269":{"id":"0:3269","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[82,33],"end":[82,38]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3270"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2951-0:3746":{"id":"b:2:2951-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3312":{"id":"2:3312","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3314"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3308","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:2807":{"id":"0:2807","crate_id":0,"name":"Output","span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:2776","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:12397":{"id":"2:12397","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:44574","self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:886":{"id":"0:886","crate_id":0,"name":"requires","span":{"filename":"src/build/arg/mod.rs","begin":[1380,4],"end":[1383,5]},"visibility":"public","docs":"Sets an argument by name that is required when this one is present I.e. when\nusing this argument, the following argument *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires(\"input\")\n# ;\n```\n\nSetting [`Arg::requires(name)`] requires that the argument be used at runtime if the\ndefining argument is used. If the defining argument isn't used, the other argument isn't\nrequired\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input wasn't required\n```\n\nSetting [`Arg::requires(name)`] and *not* supplying that argument is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::conflicts_with()":"0:3323","Arg::overrides_with()":"0:3323","Arg::requires()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:485":{"id":"0:485","crate_id":0,"name":"visible_alias","span":{"filename":"src/build/app/mod.rs","begin":[1360,4],"end":[1363,5]},"visibility":"public","docs":"If this `App` instance is a subcommand, this method adds a visible\nalias, which allows this subcommand to be accessed via *either* the\noriginal name or the given alias. This is more efficient and easier\nthan creating hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`App::alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet m = App::new(\"myprog\")\n    .subcommand(App::new(\"test\")\n        .visible_alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: App::alias()","links":{"App::alias()":"0:2889","`ArgMatches`":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3257":{"id":"0:3257","crate_id":0,"name":"HiddenLongHelp","span":{"filename":"src/build/arg/settings.rs","begin":[126,4],"end":[126,18]},"visibility":"default","docs":"The argument should **not** be shown in long help text","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:438":{"id":"0:438","crate_id":0,"name":"short_flag","span":{"filename":"src/build/app/mod.rs","begin":[639,4],"end":[642,5]},"visibility":"public","docs":"Allows the subcommand to be used as if it were an [`Arg::short`].\n\nSets the short version of the subcommand flag without the preceding `-`.\n\n# Examples\n\n```\n# use clap::{App, Arg};\nlet matches = App::new(\"pacman\")\n    .subcommand(\n        App::new(\"sync\").short_flag('S').arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .about(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"-Ss\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(sync_matches.is_present(\"search\"));\n```\n[`Arg::short`]: Arg::short()","links":{"Arg::short()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["short",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3263":{"id":"0:3263","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3264"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1063":{"id":"0:1063","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[590,0],"end":[602,1]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:1064"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:369":{"id":"0:369","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/build/app/mod.rs","begin":[159,4],"end":[161,5]},"visibility":"public","docs":"Iterate through the *visible* aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12720":{"id":"2:12720","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12721","2:12722","2:12723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8360-0:3549":{"id":"a:2:8360-0:3549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:9341":{"id":"2:9341","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9342","2:9343","2:9345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2833":{"id":"0:2833","crate_id":0,"name":"DontDelimitTrailingValues","span":{"filename":"src/build/app/settings.rs","begin":[515,4],"end":[515,29]},"visibility":"default","docs":"Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\nwas used.\n\n**NOTE:** The same thing can be done manually by setting the final positional argument to\n[`Arg::use_delimiter(false)`]. Using this setting is safer, because it's easier to locate\nwhen making changes.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::DontDelimitTrailingValues)\n    .get_matches();\n```\n\n[`Arg::use_delimiter(false)`]: crate::Arg::use_delimiter()","links":{"`AppSettings::TrailingVarArg`":"0:2812","crate::Arg::use_delimiter()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1898":{"id":"0:1898","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1171,0],"end":[1179,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1900"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3024-0:3323":{"id":"a:2:3024-0:3323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1591":{"id":"0:1591","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[483,0],"end":[1115,1]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1593","0:1594","0:1595","0:1622"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2885":{"id":"0:2885","crate_id":0,"name":"eq","span":{"filename":"src/build/app/settings.rs","begin":[143,16],"end":[143,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:426":{"id":"0:426","crate_id":0,"name":"long_about","span":{"filename":"src/build/app/mod.rs","begin":[500,4],"end":[503,5]},"visibility":"public","docs":"Sets a long format string describing what the program does. This will be\ndisplayed when the user requests the long format help message (`--help`).\n\n## Advanced\n\n`clap` can display two different help messages, a [long format] and a\n[short format] depending on whether the user used `-h` (short) or\n`--help` (long). This method sets the message during the long format\n(`--help`) message. However, if no short format message is configured,\nthis message will be displayed for *both* the long format, or short\nformat help message.\n\n**NOTE:** Only [`App::about`] (short format) is used in completion\nscript generation in order to be concise.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .long_about(\n\"Does really amazing things to great people. Now let's talk a little\n more in depth about how this subcommand really works. It may take about\n a few lines of text, but that's ok!\")\n# ;\n```\n[long format]: App::long_about()\n[short format]: App::about()\n[`App::about`]: App::about()","links":{"App::about()":"0:2889","App::long_about()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2928":{"id":"0:2928","crate_id":0,"name":"default","span":{"filename":"src/build/app/mod.rs","begin":[64,9],"end":[64,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2851":{"id":"0:2851","crate_id":0,"name":"IgnoreErrors","span":{"filename":"src/build/app/settings.rs","begin":[775,4],"end":[775,16]},"visibility":"default","docs":"Try not to fail on parse errors like missing option values.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\nIssue: [#1880 Partial / Pre Parsing a\nCLI](https://github.com/clap-rs/clap/issues/1880)\n\nThis is the basis for:\n\n* [Changing app settings based on\n  flags](https://github.com/clap-rs/clap/issues/1880#issuecomment-637779787)\n* [#1232 Dynamic completion\n  support](https://github.com/clap-rs/clap/issues/1232)\n\nSupport is not complete: Errors are still possible but they can be\navoided in many cases.\n\n```rust\n# use clap::{App, AppSettings};\nlet app = App::new(\"app\")\n  .setting(AppSettings::IgnoreErrors)\n  .arg(\"-c, --config=[FILE] 'Sets a custom config file'\")\n  .arg(\"-x, --stuff=[FILE] 'Sets a custom stuff file'\")\n  .arg(\"-f 'Flag'\");\n\nlet r = app.try_get_matches_from(vec![\"app\", \"-c\", \"file\", \"-f\", \"-x\"]);\n\nassert!(r.is_ok(), \"unexpected error: {:?}\", r);\nlet m = r.unwrap();\nassert_eq!(m.value_of(\"config\"), Some(\"file\"));\nassert!(m.is_present(\"f\"));\nassert_eq!(m.value_of(\"stuff\"), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2887":{"id":"0:2887","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[143,33],"end":[143,38]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2888"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:860":{"id":"0:860","crate_id":0,"name":"long_about","span":{"filename":"src/build/arg/mod.rs","begin":[784,4],"end":[787,5]},"visibility":"public","docs":"Sets the long help text of the argument that will be displayed to the user when they print\nthe help information with `--help`. Typically this a more detailed (multi-line) message\nthat describes the arg.\n\n**NOTE:** If only `long_about` is provided, and not [`Arg::about`] but the user requests `-h`\nclap will still display the contents of `long_about` appropriately\n\n**NOTE:** Only [`Arg::about`] is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"config\")\n    .long_about(\n\"The config file used by the myprog must be in JSON format\nwith only valid keys and may not contain other nonsense\nthat cannot be read by this program. Obviously I'm going on\nand on, so I'll stop now.\")\n# ;\n```\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .long_about(\n\"The config file used by the myprog must be in JSON format\nwith only valid keys and may not contain other nonsense\nthat cannot be read by this program. Obviously I'm going on\nand on, so I'll stop now.\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nprog\n\nUSAGE:\n    prog [OPTIONS]\n\nOPTIONS:\n        --config\n            The config file used by the myprog must be in JSON format\n            with only valid keys and may not contain other nonsense\n            that cannot be read by this program. Obviously I'm going on\n            and on, so I'll stop now.\n\n    -h, --help\n            Print help information\n\n    -V, --version\n            Print version information\n```\n[`Arg::about`]: Arg::about()","links":{"Arg::about()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3519":{"id":"0:3519","crate_id":0,"name":"ArgumentConflict","span":{"filename":"src/parse/errors.rs","begin":[260,4],"end":[260,20]},"visibility":"default","docs":"Occurs when the user provides two values which conflict with each other and can't be used\ntogether.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .conflicts_with(\"color\"))\n    .arg(Arg::new(\"color\")\n        .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--color\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::ArgumentConflict);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3302":{"id":"0:3302","crate_id":0,"name":"eq","span":{"filename":"src/build/arg/value_hint.rs","begin":[25,16],"end":[25,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3274":{"id":"0:3274","crate_id":0,"name":"Other","span":{"filename":"src/build/arg/value_hint.rs","begin":[31,4],"end":[31,9]},"visibility":"default","docs":"None of the hints below apply. Disables shell completion for this argument.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:5:658-0:3369":{"id":"b:5:658-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3378":{"id":"0:3378","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,9],"end":[78,16]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3380"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[35,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:671"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9596":{"id":"2:9596","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9597","2:9599"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:441":{"id":"0:441","crate_id":0,"name":"version","span":{"filename":"src/build/app/mod.rs","begin":[706,4],"end":[709,5]},"visibility":"public","docs":"Sets a string of the version number to be displayed when displaying the\nshort format version message (`-V`) or the help message.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time. See the [`examples/`] directory for more\ninformation.\n\n`clap` can display two different version messages, a [long format] and a\n[short format] depending on whether the user used `-V` (short) or\n`--version` (long). This method sets the message during the short format\n(`-V`). However, if no long format message is configured, this\nmessage will be displayed for *both* the long format, or short format\nversion message.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .version(\"v0.1.24\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html\n[`examples/`]: https://github.com/clap-rs/clap/tree/master/examples\n[`App::long_version`]: App::long_version()","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[222,4],"end":[222,56]},"visibility":"default","docs":"Append to [`App`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`IntoApp`].","links":{"`IntoApp`":"0:132","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:859":{"id":"0:859","crate_id":0,"name":"help","span":{"filename":"src/build/arg/mod.rs","begin":[713,4],"end":[715,5]},"visibility":"public","docs":"Deprecated, see [`Arg::about`]","links":{"`Arg::about`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::about`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::about`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3593":{"id":"0:3593","crate_id":0,"name":"ne","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,23],"end":[75,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2829":{"id":"0:2829","crate_id":0,"name":"SubcommandPrecedenceOverArg","span":{"filename":"src/build/app/settings.rs","begin":[484,4],"end":[484,31]},"visibility":"default","docs":"Instructs the parser to stop when encountering a subcommand instead of greedily consuming\nargs.\n\nBy default, if an option taking multiple values is followed by a subcommand, the\nsubcommand will be parsed as another value.\n\n```text\napp --foo val1 val2 subcommand\n          --------- ----------\n            values   another value\n```\n\nThis setting instructs the parser to stop when encountering a subcommand instead of\ngreedily consuming arguments.\n\n```text\napp --foo val1 val2 subcommand\n          --------- ----------\n            values   subcommand\n```\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, Arg};\nlet app = App::new(\"app\").subcommand(App::new(\"sub\")).arg(\n    Arg::new(\"arg\")\n        .long(\"arg\")\n        .multiple_values(true)\n        .takes_value(true),\n);\n\nlet matches = app\n    .clone()\n    .try_get_matches_from(&[\"app\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\n\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\", \"sub\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_none());\n\nlet matches = app\n    .setting(AppSettings::SubcommandPrecedenceOverArg)\n    .try_get_matches_from(&[\"app\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\n\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1053":{"id":"0:1053","crate_id":0,"name":"required","span":{"filename":"src/build/arg_group.rs","begin":[275,4],"end":[278,5]},"visibility":"public","docs":"Sets the group as required or not. A required group will be displayed in the usage string\nof the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states\nthat one argument from this group *must* be present at runtime (unless\nconflicting with another argument).\n\n**NOTE:** This setting only applies to the current [`App`] / [`Subcommand`]s, and not\nglobally.\n\n**NOTE:** By default, [`ArgGroup::multiple`] is set to `false` which when combined with\n`ArgGroup::required(true)` states, \"One and *only one* arg must be used from this group.\nUse of more than one arg is an error.\" Vice setting `ArgGroup::multiple(true)` which\nstates, '*At least* one arg from this group must be used. Using multiple is OK.\"\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .required(true))\n    .try_get_matches_from(vec![\"myprog\"]);\n// Because we didn't use any of the args in the group, it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::MissingRequiredArgument);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`ArgGroup::multiple`]: ArgGroup::multiple()\n[`App`]: crate::App","links":{"ArgGroup::multiple()":"0:3369","crate::Subcommand":"0:143","crate::App":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["r",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12377":{"id":"2:12377","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3312","`str`":"1:15275","str::slice_unchecked":"1:15275"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:816":{"id":"0:816","crate_id":0,"name":"get_help_heading","span":{"filename":"src/build/arg/mod.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Get the help heading specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3084":{"id":"2:3084","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3086","2:3087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3251":{"id":"0:3251","crate_id":0,"name":"HideEnv","span":{"filename":"src/build/arg/settings.rs","begin":[118,4],"end":[118,11]},"visibility":"default","docs":"Hides environment variable arguments from the help message","links":{},"attrs":["#[cfg(feature = \"env\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12455":{"id":"2:12455","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1797":{"id":"0:1797","crate_id":0,"name":"grouped_values_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[250,4],"end":[265,5]},"visibility":"public","docs":"Placeholder documentation.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"GroupedValues","id":"0:3604","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:905":{"id":"0:905","crate_id":0,"name":"requires_all","span":{"filename":"src/build/arg/mod.rs","begin":[1843,4],"end":[1846,5]},"visibility":"public","docs":"Sets multiple arguments by names that are required when this one is present I.e. when\nusing this argument, the following arguments *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\nby default.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_all(&[\"input\", \"output\"])\n# ;\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` requires that all the arguments be used at\nruntime if the defining argument is used. If the defining argument isn't used, the other\nargument isn't required\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .arg(Arg::new(\"output\")\n        .index(2))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input and output weren't required\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` and *not* supplying all the arguments is an\nerror.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_all(&[\"input\", \"output\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .arg(Arg::new(\"output\")\n        .index(2))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"in.txt\"\n    ]);\n\nassert!(res.is_err());\n// We didn't use output\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::overrides_with()":"0:3323","Arg::conflicts_with()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3745":{"id":"0:3745","crate_id":0,"name":"eq","span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3597":{"id":"b:2:2620-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:900":{"id":"0:900","crate_id":0,"name":"required_ifs","span":{"filename":"src/build/arg/mod.rs","begin":[1694,4],"end":[1696,5]},"visibility":"public","docs":"Deprecated, see [`Arg::required_if_eq_any`]","links":{"`Arg::required_if_eq_any`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `Arg::required_if_eq_any`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::required_if_eq_any`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3271":{"id":"b:5:658-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3265":{"id":"0:3265","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3737":{"id":"0:3737","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3024-0:3583":{"id":"a:2:3024-0:3583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1804":{"id":"0:1804","crate_id":0,"name":"values_of_lossy","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[294,4],"end":[300,5]},"visibility":"public","docs":"Gets the lossy values of a specific argument. If the option wasn't present at runtime\nit returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\nthose invalid points will be replaced with `\\u{FFFD}`\n\n*NOTE:* Recommend having set [`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n ```\n# use clap::{App, Arg};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::OsStringExt;\n\nlet m = App::new(\"utf8\")\n    .arg(Arg::from(\"<arg>... 'some arg'\")\n        .allow_invalid_utf8(true))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi\"\n                            OsString::from_vec(vec![b'H', b'i']),\n                            // \"{0xe9}!\"\n                            OsString::from_vec(vec![0xe9, b'!'])]);\nlet mut itr = m.values_of_lossy(\"arg\").unwrap().into_iter();\nassert_eq!(&itr.next().unwrap()[..], \"Hi\");\nassert_eq!(&itr.next().unwrap()[..], \"\\u{FFFD}!\");\nassert_eq!(itr.next(), None);\n```","links":{"crate::ArgSettings::AllowInvalidUtf8":"0:3220"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3388":{"id":"0:3388","crate_id":0,"name":"eq","span":{"filename":"src/build/arg_group.rs","begin":[78,25],"end":[78,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3597":{"id":"a:2:8361-0:3597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12461":{"id":"2:12461","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8360-0:3220":{"id":"a:2:8360-0:3220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8360-0:3496":{"id":"a:2:8360-0:3496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:916":{"id":"0:916","crate_id":0,"name":"group","span":{"filename":"src/build/arg/mod.rs","begin":[2137,4],"end":[2140,5]},"visibility":"public","docs":"Specifies the name of the [`ArgGroup`] the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .group(\"mode\")\n# ;\n```\n\nMultiple arguments can be a member of a single group and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .group(\"mode\"))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .group(\"mode\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.is_present(\"mode\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3369"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:453":{"id":"0:453","crate_id":0,"name":"help","span":{"filename":"src/build/app/mod.rs","begin":[845,4],"end":[847,5]},"visibility":"public","docs":"Deprecated, see [`App::override_help`]","links":{"`App::override_help`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::override_help`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::override_help`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:531":{"id":"0:531","crate_id":0,"name":"get_matches_from_safe","span":{"filename":"src/build/app/mod.rs","begin":[2175,4],"end":[2181,5]},"visibility":"public","docs":"Deprecated, see [`App::try_get_matches_from`]","links":{"`App::try_get_matches_from`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `App::try_get_matches_from`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::try_get_matches_from`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:857":{"id":"0:857","crate_id":0,"name":"visible_short_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[647,4],"end":[653,5]},"visibility":"public","docs":"Allows adding multiple [`Arg`] aliases that functions exactly like those defined\nwith [`Arg::aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_short_aliases(&['t', 'e']))\n       .get_matches_from(vec![\n            \"prog\", \"-t\"\n        ]);\nassert!(m.is_present(\"test\"));\n```\n[`App::aliases`]: Arg::short_aliases()","links":{"`Arg`":"0:3323","`Arg::aliases`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:2960":{"id":"b:2:2941-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2983":{"id":"0:2983","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,43],"end":[27,45]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3253":{"id":"0:3253","crate_id":0,"name":"HideEnvValues","span":{"filename":"src/build/arg/settings.rs","begin":[122,4],"end":[122,17]},"visibility":"default","docs":"Hides any values currently assigned to ENV variables in the help message (good for sensitive\ninformation)","links":{},"attrs":["#[cfg(feature = \"env\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2956-0:3616":{"id":"b:2:2956-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:995":{"id":"0:995","crate_id":0,"name":"value_hint","span":{"filename":"src/build/arg/mod.rs","begin":[4843,4],"end":[4846,5]},"visibility":"public","docs":"Sets a hint about the type of the value for shell completions\n\nCurrently this is only supported by the zsh completions generator.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`].\n\nFor example, to take a username as argument:\n\n```\n# use clap::{Arg, ValueHint};\nArg::new(\"user\")\n    .short('u')\n    .long(\"user\")\n    .value_hint(ValueHint::Username);\n```\n\nTo take a full command line and its arguments (for example, when writing a command wrapper):\n\n```\n# use clap::{App, AppSettings, Arg, ValueHint};\nApp::new(\"prog\")\n    .setting(AppSettings::TrailingVarArg)\n    .arg(\n        Arg::new(\"command\")\n            .takes_value(true)\n            .multiple_values(true)\n            .value_hint(ValueHint::CommandWithArguments)\n    );\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_hint",{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3094":{"id":"2:3094","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3096","2:3097"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6608":{"id":"1:6608","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6609"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2941-0:3583":{"id":"b:2:2941-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5541":{"id":"1:5541","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5542"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:98":{"id":"0:98","crate_id":0,"name":"values_t","span":{"filename":"src/macros.rs","begin":[684,0],"end":[691,1]},"visibility":"public","docs":"Deprecated, see [`ArgMatches::values_of_t`]","links":{},"attrs":["#[macro_export]","#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `ArgMatches::values_of_t`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `ArgMatches::values_of_t`"},"kind":"macro","inner":"macro_rules! values_t {\n    ($m : ident, $v : expr, $t : ty) => { ... };\n    ($m : ident.values_of($v : expr), $t : ty) => { ... };\n}"},"0:3597":{"id":"0:3597","crate_id":0,"name":"Values","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[997,0],"end":[1000,1]},"visibility":"public","docs":"An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\nmethod.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .multiple_occurrences(true)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.values_of(\"output\").unwrap();\n\nassert_eq!(values.next(), Some(\"val1\"));\nassert_eq!(values.next(), Some(\"val2\"));\nassert_eq!(values.next(), None);\n```\n[`ArgMatches::values_of`]: ArgMatches::values_of()","links":{"ArgMatches::values_of()":"0:3583"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3012-0:3597","a:2:3024-0:3597","a:2:3053-0:3597","a:2:8360-0:3597","a:2:8361-0:3597","b:2:2945-0:3597","b:2:2941-0:3597","b:2:7466-0:3597","b:5:658-0:3597","b:2:2956-0:3597","b:2:2951-0:3597","b:2:2617-0:3597","b:2:2620-0:3597","b:2:3675-0:3597","0:1846","0:1849","0:1841","0:3601","0:1851"]}},"a:2:8360-0:3746":{"id":"a:2:8360-0:3746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2817":{"id":"0:2817","crate_id":0,"name":"AllArgsOverrideSelf","span":{"filename":"src/build/app/settings.rs","begin":[216,4],"end":[216,23]},"visibility":"default","docs":"Specifies that all arguments override themselves. This is the equivalent to saying the `foo`\narg using [`Arg::overrides_with(\"foo\")`] for all defined arguments.\n\n[`Arg::overrides_with(\"foo\")`]: crate::Arg::overrides_with()","links":{"crate::Arg::overrides_with()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:966":{"id":"0:966","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/build/arg/mod.rs","begin":[3657,4],"end":[3663,5]},"visibility":"public","docs":"Allows values which start with a leading hyphen (`-`)\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n**WARNING**: Take caution when using this setting combined with\n[`ArgSettings::MultipleValues`], as this becomes ambiguous `$ prog --arg -- -- val`. All\nthree `--, --, val` will be values when the user may have thought the second `--` would\nconstitute the normal, \"Only positional args follow\" idiom. To fix this, consider using\n[`ArgSettings::MultipleOccurrences`] which only allows a single value at a time.\n\n**WARNING**: When building your CLIs, consider the effects of allowing leading hyphens and\nthe user passing in a value that matches a valid short. For example, `prog -opt -F` where\n`-F` is supposed to be a value, yet `-F` is *also* a valid short for another arg.\nCare should be taken when designing these args. This is compounded by the ability to \"stack\"\nshort args. I.e. if `-val` is supposed to be a value, but `-v`, `-a`, and `-l` are all valid\nshorts.\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgSettings};\nArg::new(\"pattern\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::AllowHyphenValues)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::AllowHyphenValues)\n        .long(\"pattern\"))\n    .get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert_eq!(m.value_of(\"pat\"), Some(\"-file\"));\n```\n\nNot setting `Arg::allow_hyphen_values(true)` and supplying a value which starts with a\nhyphen is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .setting(ArgSettings::TakesValue)\n        .long(\"pattern\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```\n[`Arg::number_of_values(1)`]: Arg::number_of_values()","links":{"`ArgSettings::MultipleValues`":"0:3220","`ArgSettings::MultipleOccurrences`":"0:3220","`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2909":{"id":"2:2909","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2911"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"a:2:8361-0:3728":{"id":"a:2:8361-0:3728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12391":{"id":"2:12391","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7458":{"id":"2:7458","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7460"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5722":{"id":"5:5722","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8360-0:2960":{"id":"a:2:8360-0:2960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3675-0:3746":{"id":"b:2:3675-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3053":{"id":"2:3053","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2845":{"id":"0:2845","crate_id":0,"name":"Hidden","span":{"filename":"src/build/app/settings.rs","begin":[704,4],"end":[704,10]},"visibility":"default","docs":"Specifies that this [`subcommand`] should be hidden from help messages\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings, };\nApp::new(\"myprog\")\n    .subcommand(App::new(\"test\")\n    .setting(AppSettings::Hidden))\n# ;\n```\n\n[`subcommand`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2617-0:3323":{"id":"b:2:2617-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12363":{"id":"2:12363","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:25:25-0:2889":{"id":"b:25:25-0:2889","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:3546":{"id":"0:3546","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[25,29],"end":[25,38]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3738":{"id":"0:3738","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3739"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:432":{"id":"0:432","crate_id":0,"name":"after_long_help","span":{"filename":"src/build/app/mod.rs","begin":[568,4],"end":[571,5]},"visibility":"public","docs":"Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **after** the auto-generated help information and is meant to be\nmore verbose than `after_help`. This is often used to describe how to use the arguments, or\ncaveats to be noted in man pages.\n\n**NOTE:** If only `after_help` is provided, and not [`App::after_long_help`] but the user\nrequests `--help`, clap will still display the contents of `after_help` appropriately.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .after_long_help(\"Does really amazing things to great people... but be careful with -R, \\\n                     like, for real, be careful with this!\")\n# ;\n```\n[`App::after_long_help`]: App::after_long_help()","links":{"App::after_long_help()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3245":{"id":"0:3245","crate_id":0,"name":"Last","span":{"filename":"src/build/arg/settings.rs","begin":[111,4],"end":[111,8]},"visibility":"default","docs":"Says that a positional arg will be the last positional, and requires `--` to be accessed.\nIt can also be accessed early (i.e. before other positionals) by providing `--`","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3392":{"id":"0:3392","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,36],"end":[78,38]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8361-0:3746":{"id":"a:2:8361-0:3746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2835":{"id":"0:2835","crate_id":0,"name":"DisableHelpFlag","span":{"filename":"src/build/app/settings.rs","begin":[531,4],"end":[531,19]},"visibility":"default","docs":"Disables `-h` and `--help` flag.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, ErrorKind};\nlet res = App::new(\"myprog\")\n    .setting(AppSettings::DisableHelpFlag)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-h\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3012-0:3746":{"id":"a:2:3012-0:3746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:508":{"id":"0:508","crate_id":0,"name":"error","span":{"filename":"src/build/app/mod.rs","begin":[1813,4],"end":[1817,5]},"visibility":"public","docs":"Custom error message for post-parsing validation\n\n# Examples\n\n```rust\n# use clap::{App, ErrorKind};\nlet mut app = App::new(\"myprog\");\nlet err = app.error(ErrorKind::InvalidValue, \"Some failure case\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:493":{"id":"0:493","crate_id":0,"name":"group","span":{"filename":"src/build/app/mod.rs","begin":[1623,4],"end":[1626,5]},"visibility":"public","docs":"Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\nFor instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\none) argument from that group must be present at runtime.\n\nYou can also do things such as name an [`ArgGroup`] as a conflict to another argument.\nMeaning any of the arguments that belong to that group will cause a failure if present with\nthe conflicting argument.\n\nAnother added benefit of [`ArgGroup`]s is that you can extract a value from a group instead\nof determining exactly which argument was used.\n\nFinally, using [`ArgGroup`]s to ensure exclusion between arguments is another very common\nuse.\n\n# Examples\n\nThe following example demonstrates using an [`ArgGroup`] to ensure that one, and only one,\nof the arguments from the specified group is present at runtime.\n\n```no_run\n# use clap::{App, ArgGroup};\nApp::new(\"app\")\n    .arg(\"--set-ver [ver] 'set the version manually'\")\n    .arg(\"--major 'auto increase major'\")\n    .arg(\"--minor 'auto increase minor'\")\n    .arg(\"--patch 'auto increase patch'\")\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n# ;\n```","links":{"`ArgGroup`":"0:3369"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:436":{"id":"0:436","crate_id":0,"name":"before_long_help","span":{"filename":"src/build/app/mod.rs","begin":[610,4],"end":[613,5]},"visibility":"public","docs":"Adds additional help information to be displayed prior to the\nauto-generated help. This is often used for header, copyright, or\nlicense information.\n\n**NOTE:** If only `before_help` is provided, and not [`App::before_long_help`] but the user\nrequests `--help`, clap will still display the contents of `before_help` appropriately.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .before_long_help(\"Some verbose and long info I'd like to appear before the help info\")\n# ;\n```\n[`App::before_long_help`]: App::before_long_help()","links":{"App::before_long_help()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1062":{"id":"0:1062","crate_id":0,"name":"from","span":{"filename":"src/build/arg_group.rs","begin":[426,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["g",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1881":{"id":"0:1881","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1112,0],"end":[1112,46]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:7531","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:829":{"id":"0:829","crate_id":0,"name":"get_value_hint","span":{"filename":"src/build/arg/mod.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Get the value hint of this argument","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3267":{"id":"0:3267","crate_id":0,"name":"eq","span":{"filename":"src/build/arg/settings.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1057":{"id":"0:1057","crate_id":0,"name":"conflicts_with","span":{"filename":"src/build/arg_group.rs","begin":[381,4],"end":[384,5]},"visibility":"public","docs":"Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.\n\n**NOTE:** The name provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group conflicts with \"-d\", it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::ArgumentConflict);\n```\n[argument exclusion rules]: crate::Arg::conflicts_with()","links":{"crate::Arg::conflicts_with()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3743":{"id":"0:3743","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:178":{"id":"0:178","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[362,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:3220":{"id":"a:2:3053-0:3220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:914":{"id":"0:914","crate_id":0,"name":"possible_value","span":{"filename":"src/build/arg/mod.rs","begin":[2098,4],"end":[2104,5]},"visibility":"public","docs":"Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\nthat only one of the specified values was used, or fails with error message.\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** You can use both strings directly or use [`ArgValue`] if you want more controll\nover single possible values.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"mode\")\n    .takes_value(true)\n    .possible_value(\"fast\")\n    .possible_value(\"slow\")\n    .possible_value(\"medium\")\n# ;\n```\nThe same using [`ArgValue`]:\n\n```rust\n# use clap::{App, Arg, ArgValue};\nArg::new(\"mode\").takes_value(true)\n    .possible_value(ArgValue::new(\"fast\"))\n// value with a help text\n    .possible_value(ArgValue::new(\"slow\").about(\"not that fast\"))\n// value that is hidden from completion and help text\n    .possible_value(ArgValue::new(\"medium\").hidden(true))\n# ;\n```\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true)\n        .possible_value(\"fast\")\n        .possible_value(\"slow\")\n        .possible_value(\"medium\"))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\nassert!(m.is_present(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\"));\n```\n\nThe next example shows a failed parse from using a value which wasn't defined as one of the\npossible values.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true)\n        .possible_value(\"fast\")\n        .possible_value(\"slow\")\n        .possible_value(\"medium\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--mode\", \"wrong\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::InvalidValue);\n```\n[options]: Arg::takes_value()\n[positional arguments]: Arg::index()","links":{"Arg::takes_value()":"0:3323","`ArgValue`":"0:2960","Arg::index()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1624":{"id":"0:1624","crate_id":0,"name":"from","span":{"filename":"src/parse/errors.rs","begin":[1118,4],"end":[1122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"29:29":{"id":"29:29","crate_id":29,"name":"WriteColor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:30","29:31","29:32","29:33"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4409","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:8360":{"id":"2:8360","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2941-0:2812":{"id":"b:2:2941-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:880":{"id":"0:880","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/build/arg/mod.rs","begin":[1130,4],"end":[1133,5]},"visibility":"public","docs":"The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conflicts per\nargument.\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not need\nneed to also do B.conflicts_with(A))\n\n**NOTE:** This option does not exist when using a YAML configuration file. Using [`Arg::conflicts_with`]\nfollowed by an array of strings will achieve the equivalent effect.\n\n**NOTE:** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with_all(&[\"debug\", \"input\"])\n# ;\n```\n\nSetting conflicting argument, and having any of the arguments present at runtime with a\nconflicting argument is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with_all(&[\"debug\", \"input\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::ArgumentConflict);\n```\n[`Arg::conflicts_with`]: Arg::conflicts_with()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with()":"0:3323","Arg::exclusive()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3549":{"id":"a:2:8361-0:3549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:12479":{"id":"2:12479","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:46721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3591":{"id":"0:3591","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,23],"end":[75,32]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3592","0:3593"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3292":{"id":"0:3292","crate_id":0,"name":"Hostname","span":{"filename":"src/build/arg/value_hint.rs","begin":[59,4],"end":[59,12]},"visibility":"default","docs":"Host name of a computer.\nShells usually parse `/etc/hosts` and `.ssh/known_hosts` to complete hostnames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2956-0:2812":{"id":"b:2:2956-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2941-0:3597":{"id":"b:2:2941-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8361-0:2889":{"id":"a:2:8361-0:2889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2869":{"id":"0:2869","crate_id":0,"name":"TrailingVarArg","span":{"filename":"src/build/app/settings.rs","begin":[979,4],"end":[979,18]},"visibility":"default","docs":"Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\nattempt to parse any further args.\n\nThe values of the trailing positional argument will contain all args from itself on.\n\n**NOTE:** The final positional argument **must** have [`Arg::multiple_values(true)`] or the usage\nstring equivalent.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::TrailingVarArg)\n    .arg(Arg::from(\"<cmd>... 'commands to run'\"))\n    .get_matches_from(vec![\"myprog\", \"arg1\", \"-r\", \"val1\"]);\n\nlet trail: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(trail, [\"arg1\", \"-r\", \"val1\"]);\n```\n[`Arg::multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2871":{"id":"0:2871","crate_id":0,"name":"WaitOnError","span":{"filename":"src/build/app/settings.rs","begin":[995,4],"end":[995,15]},"visibility":"default","docs":"Will display a message \"Press \\[ENTER\\]/\\[RETURN\\] to continue...\" and wait for user before\nexiting\n\nThis is most useful when writing an application which is run from a GUI shortcut, or on\nWindows where a user tries to open the binary by double-clicking instead of using the\ncommand line.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::WaitOnError);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:8361-0:3323":{"id":"a:2:8361-0:3323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:658-0:2960":{"id":"b:5:658-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:377":{"id":"0:377","crate_id":0,"name":"get_visible_long_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[174,4],"end":[179,5]},"visibility":"public","docs":"Iterate through the *visible* long aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:954":{"id":"0:954","crate_id":0,"name":"default_value_if_os","span":{"filename":"src/build/arg/mod.rs","begin":[3073,4],"end":[3081,5]},"visibility":"public","docs":"Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_value_if`]: Arg::default_value_if()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value_if()":"0:3323","std::ffi::OsStr":"1:2786"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3525":{"id":"0:3525","crate_id":0,"name":"UnexpectedMultipleUsage","span":{"filename":"src/parse/errors.rs","begin":[312,4],"end":[312,27]},"visibility":"default","docs":"Occurs when the user provides multiple values to an argument which doesn't allow that.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .multiple_occurrences(false))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--debug\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::UnexpectedMultipleUsage);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:688":{"id":"0:688","crate_id":0,"name":"new","span":{"filename":"src/build/arg/arg_value.rs","begin":[125,4],"end":[130,5]},"visibility":"public","docs":"Creates a new instance of [`ArgValue`] using a string name. The name will be used to\ndecide wether this value was provided by the user to an argument.\n\n**NOTE:** In case it is not [hidden] it will also be shown in help messages for arguments\nthat use it as a [possible value] and have not hidden them through [`Arg::hide_possible_values(true)`].\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nArgValue::new(\"fast\")\n# ;\n```\n[hidden]: ArgValue::hidden\n[possible value]: crate::Arg::possible_values\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"crate::Arg::hide_possible_values()":"0:3323","crate::Arg::possible_values":"0:3323","`ArgValue`":"0:2960","ArgValue::hidden":"0:2960"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:528":{"id":"0:528","crate_id":0,"name":"try_get_matches_from","span":{"filename":"src/build/app/mod.rs","begin":[2165,4],"end":[2171,5]},"visibility":"public","docs":"Starts the parsing process. A combination of [`App::get_matches_from`], and\n[`App::try_get_matches`].\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`AppSettings::NoBinaryName`] is used.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = App::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches_from(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::get_matches_from`]: App::get_matches_from()\n[`App::try_get_matches`]: App::try_get_matches()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Error`]: crate::Error\n[`Error::exit`]: crate::Error::exit()\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion","links":{"App::try_get_matches()":"0:2889","crate::ErrorKind::DisplayVersion":"0:3496","std::process::exit()":"1:7478","App::get_matches_from()":"0:2889","`AppSettings::NoBinaryName`":"0:2812","crate::Error":"0:3549","crate::ErrorKind::DisplayHelp":"0:3496","crate::Error::exit()":"0:3549"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1827":{"id":"0:1827","crate_id":0,"name":"occurrences_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[595,4],"end":[597,5]},"visibility":"public","docs":"Returns the number of times an argument was used at runtime. If an argument isn't present\nit will return `0`.\n\n**NOTE:** This returns the number of times the argument was used, *not* the number of\nvalues. For example, `-o val1 val2 val3 -o val4` would return `2` (2 occurrences, but 4\nvalues).\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .setting(ArgSettings::MultipleOccurrences))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\", \"-d\", \"-d\"\n    ]);\n\nassert_eq!(m.occurrences_of(\"debug\"), 3);\n```\n\nThis next example shows that counts actual uses of the argument, not just `-`'s\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .setting(ArgSettings::MultipleOccurrences))\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .get_matches_from(vec![\n        \"myprog\", \"-ddfd\"\n    ]);\n\nassert_eq!(m.occurrences_of(\"debug\"), 3);\nassert_eq!(m.occurrences_of(\"flag\"), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:830":{"id":"0:830","crate_id":0,"name":"get_global","span":{"filename":"src/build/arg/mod.rs","begin":[270,4],"end":[272,5]},"visibility":"public","docs":"Get information on if this argument is global or not","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1783":{"id":"0:1783","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[81,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:167":{"id":"0:167","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3214":{"id":"0:3214","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BitOr","id":"2:3140","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3215","0:3216"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12435":{"id":"2:12435","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15275","`DoubleEndedIterator`":"2:7506","self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:46644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2611":{"id":"2:2611","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2613"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:3750":{"id":"0:3750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[69,22],"end":[69,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3501":{"id":"0:3501","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/parse/errors.rs","begin":[81,4],"end":[81,21]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.\nIf it doesn't meet the threshold, or the 'suggestions' feature is disabled,\nthe more general [`UnknownArgument`] error is returned.\n\n# Examples\n\n ```\n# use clap::{App, Arg, ErrorKind, };\nlet result = App::new(\"prog\")\n    .subcommand(App::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .about(\"The configuration file to use\")\n            .index(1)))\n    .try_get_matches_from(vec![\"prog\", \"confi\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::InvalidSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"crate::Subcommand":"0:143","ErrorKind::UnknownArgument":"0:3496"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1004":{"id":"0:1004","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5065,0],"end":[5069,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1006"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3053-0:3369":{"id":"a:2:3053-0:3369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:434":{"id":"0:434","crate_id":0,"name":"before_help","span":{"filename":"src/build/app/mod.rs","begin":[589,4],"end":[592,5]},"visibility":"public","docs":"Adds additional help information to be displayed prior to the\nauto-generated help. This is often used for header, copyright, or\nlicense information.\n\n**NOTE:** If only `before_long_help` is provided, and not [`App::before_help`] but the user\nrequests `-h` clap will still display the contents of `before_long_help` appropriately.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .before_help(\"Some info I'd like to appear before the help info\")\n# ;\n```\n[`App::before_help`]: App::before_help()","links":{"App::before_help()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2883":{"id":"0:2883","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[143,16],"end":[143,25]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3675-0:2889":{"id":"b:2:3675-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"23:76":{"id":"23:76","crate_id":23,"name":"OsStrBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:77","23:80"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:1844":{"id":"0:1844","crate_id":0,"name":"next","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1005,4],"end":[1007,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12432":{"id":"2:12432","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15270","`DoubleEndedIterator`":"2:7506","str::matches":"1:15275","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:46626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3266":{"id":"0:3266","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3267"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2853":{"id":"0:2853","crate_id":0,"name":"InferSubcommands","span":{"filename":"src/build/app/settings.rs","begin":[805,4],"end":[805,20]},"visibility":"default","docs":"Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example, to\nmatch a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match `te`\nto `test` there could not also be a subcommand or alias `temp` because both start with `te`\n\n**CAUTION:** This setting can interfere with [positional/free arguments], take care when\ndesigning CLIs which allow inferred subcommands and have potential positional/free\narguments whose values could start with the same characters as subcommands. If this is the\ncase, it's recommended to use settings such as [`AppSettings::ArgsNegateSubcommands`] in\nconjunction with this setting.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nlet m = App::new(\"prog\")\n    .setting(AppSettings::InferSubcommands)\n    .subcommand(App::new(\"test\"))\n    .get_matches_from(vec![\n        \"prog\", \"te\"\n    ]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n\n[`subcommands`]: crate::App::subcommand()\n[positional/free arguments]: crate::Arg::index()\n[aliases]: crate::App::alias()","links":{"crate::App::alias()":"0:2889","crate::Arg::index()":"0:3323","`AppSettings::ArgsNegateSubcommands`":"0:2812","crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:514":{"id":"0:514","crate_id":0,"name":"write_long_help","span":{"filename":"src/build/app/mod.rs","begin":[1917,4],"end":[1923,5]},"visibility":"public","docs":"Writes the full help message to the user to a [`io::Write`] object in the same method as if\nthe user ran `--help`.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" help messages\ndepending on if the user ran [`-h` (short)] or [`--help` (long)].\n\n# Examples\n\n```rust\n# use clap::App;\nuse std::io;\nlet mut app = App::new(\"myprog\");\nlet mut out = io::stdout();\napp.write_long_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::about()\n[`--help` (long)]: Arg::long_about()","links":{"Arg::long_about()":"0:3323","Arg::about()":"0:3323","std::io::Write":"1:4409"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4409","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:91":{"id":"0:91","crate_id":0,"name":"app_from_crate","span":{"filename":"src/macros.rs","begin":[194,0],"end":[209,1]},"visibility":"public","docs":"Allows you to build the `App` instance from your Cargo.toml at compile time.\n\nEquivalent to using the `crate_*!` macros with their respective fields.\n\nProvided separator is for the [`crate_authors!`] macro,\nrefer to the documentation therefor.\n\n**NOTE:** Changing the values in your `Cargo.toml` does not trigger a re-build automatically,\nand therefore won't change the generated output until you recompile.\n\n**Pro Tip:** In some cases you can \"trick\" the compiler into triggering a rebuild when your\n`Cargo.toml` is changed by including this in your `src/main.rs` file\n`include_str!(\"../Cargo.toml\");`\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# fn main() {\nlet m = app_from_crate!().get_matches();\n# }\n```","links":{"`crate_authors!`":"0:88"},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! app_from_crate {\n    () => { ... };\n    ($sep : expr) => { ... };\n}"},"2:3162":{"id":"2:3162","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9397":{"id":"2:9397","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2945-0:3369":{"id":"b:2:2945-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1016":{"id":"0:1016","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg/mod.rs","begin":[5146,4],"end":[5166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:949":{"id":"0:949","crate_id":0,"name":"default_missing_values","span":{"filename":"src/build/arg/mod.rs","begin":[2929,4],"end":[2932,5]},"visibility":"public","docs":"Like [`Arg::default_missing_value`] but for args taking multiple values\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()","links":{"Arg::default_missing_value()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12481":{"id":"2:12481","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:46730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4409":{"id":"1:4409","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4410","1:4411","1:4413","1:4414","1:4415","1:4416","1:4417","1:4426"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:815":{"id":"0:815","crate_id":0,"name":"get_long_about","span":{"filename":"src/build/arg/mod.rs","begin":[152,4],"end":[154,5]},"visibility":"public","docs":"Get the long help specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").long_about(\"long about\");\nassert_eq!(Some(\"long about\"), arg.get_long_about());\n```\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:657":{"id":"0:657","crate_id":0,"name":"fmt","span":{"filename":"src/build/app/mod.rs","begin":[3102,4],"end":[3104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1039":{"id":"0:1039","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[89,0],"end":[423,1]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1042","0:1044","0:1046","0:1048","0:1050","0:1052","0:1053","0:1054","0:1056","0:1057","0:1059"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2945-0:3496":{"id":"b:2:2945-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2951-0:3610":{"id":"b:2:2951-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:920":{"id":"0:920","crate_id":0,"name":"number_of_values","span":{"filename":"src/build/arg/mod.rs","begin":[2217,4],"end":[2220,5]},"visibility":"public","docs":"Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f <file>` argument where you wanted exactly 3 'files' you would set\n`.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n3 and only 3 values.\n\n**NOTE:** Does *not* require [`Arg::multiple_occurrences(true)`] to be set. Setting\n[`Arg::multiple_occurrences(true)`] would allow `-f <file> <file> <file> -f <file> <file> <file>` where\nas *not* setting it would only allow one occurrence of this argument.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"file\")\n    .short('f')\n    .number_of_values(3);\n```\n\nNot supplying the correct number of values is an error\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .number_of_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::WrongNumberOfValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3583":{"id":"b:2:2945-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5529":{"id":"1:5529","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2875":{"id":"0:2875","crate_id":0,"name":"NoAutoVersion","span":{"filename":"src/build/app/settings.rs","begin":[1036,4],"end":[1036,17]},"visibility":"default","docs":"Tells clap to treat the auto-generated `-V, --version` flags just like any other flag, and\n*not* print the version message. This allows one to handle printing of the version message\nmanually.\n\n```rust\n# use clap::{App, AppSettings};\nlet result = App::new(\"myprog\")\n    .version(\"3.0\")\n    .setting(AppSettings::NoAutoVersion)\n    .try_get_matches_from(\"myprog --version\".split(\" \"));\n\n// Normally, if `--version` is used clap prints the version message and returns an\n// ErrorKind::DisplayVersion\n//\n// However, `--version` was treated like a normal flag\n\nassert!(result.is_ok());\nassert!(result.unwrap().is_present(\"version\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2620-0:2889":{"id":"b:2:2620-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2934":{"id":"0:2934","crate_id":0,"name":"clone","span":{"filename":"src/build/app/mod.rs","begin":[64,25],"end":[64,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3521":{"id":"0:3521","crate_id":0,"name":"MissingRequiredArgument","span":{"filename":"src/parse/errors.rs","begin":[275,4],"end":[275,27]},"visibility":"default","docs":"Occurs when the user does not provide one or more required arguments.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .required(true))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:143":{"id":"0:143","crate_id":0,"name":"Subcommand","span":{"filename":"src/derive.rs","begin":[250,0],"end":[263,1]},"visibility":"public","docs":"Parse a sub-command into a user-defined enum.\n\nImplementing this trait lets a parent container delegate subcommand behavior to `Self`.\nwith:\n- `#[clap(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum\n  variants that impl `Subcommand`.\n- `#[clap(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl\n  `Subcommand`.\n\n# Example\n\n ```\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(subcommand)]\n    action: Action,\n}\n\n#[derive(clap::Subcommand)]\nenum Action {\n    Add,\n    Remove,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:144","0:145","0:146"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:137","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:179"]}},"b:2:3675-0:3323":{"id":"b:2:3675-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:447":{"id":"0:447","crate_id":0,"name":"override_usage","span":{"filename":"src/build/app/mod.rs","begin":[792,4],"end":[795,5]},"visibility":"public","docs":"Overrides the `clap` generated usage string.\n\nThis will be displayed to the user when errors are found in argument parsing.\n\n**CAUTION:** Using this setting disables `clap`s \"context-aware\" usage\nstrings. After this setting is set, this will be *the only* usage string\ndisplayed to the user!\n\n**NOTE:** This will not replace the entire help message, *only* the portion\nshowing the usage.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    .override_usage(\"myapp [-clDas] <some_file>\")\n# ;\n```\n[`ArgMatches::usage`]: ArgMatches::usage()","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2977":{"id":"0:2977","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,32],"end":[27,41]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2979","0:2980"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3236":{"id":"2:3236","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3237"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:987":{"id":"0:987","crate_id":0,"name":"setting","span":{"filename":"src/build/arg/mod.rs","begin":[4755,4],"end":[4761,5]},"visibility":"public","docs":"Enables a single setting for the current (this `Arg` instance) argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required)\n    .setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:498":{"id":"0:498","crate_id":0,"name":"subcommand","span":{"filename":"src/build/app/mod.rs","begin":[1677,4],"end":[1680,5]},"visibility":"public","docs":"Adds a subcommand to the list of valid possibilities. Subcommands are effectively\nsub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\netc. They also function just like [`App`]s, in that they get their own auto generated help,\nversion, and usage.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nApp::new(\"myprog\")\n    .subcommand(App::new(\"config\")\n        .about(\"Controls configuration features\")\n        .arg(\"<config> 'Required configuration file to use'\"))\n# ;\n```","links":{"`App`":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[181,4],"end":[181,62]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```no_run\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches` serves as the equivalent of:\n\n ```no_run\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.value_of(\"name\").unwrap().to_string(),\n           debug: m.is_present(\"debug\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:12441":{"id":"2:12441","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994","`DoubleEndedIterator`":"2:7506","str::match_indices":"1:15275"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:46590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2931":{"id":"0:2931","crate_id":0,"name":"fmt","span":{"filename":"src/build/app/mod.rs","begin":[64,18],"end":[64,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3586":{"id":"0:3586","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,9],"end":[75,14]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3587"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5424":{"id":"5:5424","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15275"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3590":{"id":"0:3590","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,23],"end":[75,32]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:491":{"id":"0:491","crate_id":0,"name":"visible_short_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[1449,4],"end":[1455,5]},"visibility":"public","docs":"Allows adding multiple short flag aliases that functions exactly like those defined\nwith [`App::short_flag_aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").short_flag('b')\n                .visible_short_flag_aliases(&['t']))\n            .get_matches_from(vec![\"myprog\", \"-t\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_aliases`]: App::short_flag_aliases()","links":{"App::short_flag_aliases()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:479":{"id":"0:479","crate_id":0,"name":"short_flag_alias","span":{"filename":"src/build/app/mod.rs","begin":[1221,4],"end":[1225,5]},"visibility":"public","docs":"Allows adding an alias, which function as \"hidden\" short flag subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").short_flag('t')\n                .short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:373":{"id":"0:373","crate_id":0,"name":"get_visible_short_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[165,4],"end":[170,5]},"visibility":"public","docs":"Iterate through the *visible* short aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"primitive","inner":"char"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2837":{"id":"0:2837","crate_id":0,"name":"DisableHelpSubcommand","span":{"filename":"src/build/app/settings.rs","begin":[552,4],"end":[552,25]},"visibility":"default","docs":"Disables the `help` [`subcommand`].\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, ErrorKind, };\nlet res = App::new(\"myprog\")\n    .setting(AppSettings::DisableHelpSubcommand)\n    // Normally, creating a subcommand causes a `help` subcommand to automatically\n    // be generated as well\n    .subcommand(App::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"help\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```\n\n[`subcommand`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:7913":{"id":"2:7913","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:971":{"id":"0:971","crate_id":0,"name":"hide_default_value","span":{"filename":"src/build/arg/mod.rs","begin":[3925,4],"end":[3931,5]},"visibility":"public","docs":"Specifies that the default value of an argument should not be displayed in the help text.\n\nThis is useful when default behavior of an arg is explained elsewhere in the help text.\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::HideDefaultValue)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"connect\")\n    .arg(Arg::new(\"host\")\n        .long(\"host\")\n        .default_value(\"localhost\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::HideDefaultValue));\n\n```\n\nIf we were to run the above program with `--help` the `[default: localhost]` portion of\nthe help text would be omitted.","links":{"`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12470":{"id":"2:12470","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":"values_t_or_exit","span":{"filename":"src/macros.rs","begin":[699,0],"end":[706,1]},"visibility":"public","docs":"Deprecated, see [`ArgMatches::values_of_t_or_exit`]","links":{},"attrs":["#[macro_export]","#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `ArgMatches::values_of_t_or_exit`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `ArgMatches::values_of_t_or_exit`"},"kind":"macro","inner":"macro_rules! values_t_or_exit {\n    ($m : ident, $v : expr, $t : ty) => { ... };\n    ($m : ident.values_of($v : expr), $t : ty) => { ... };\n}"},"0:500":{"id":"0:500","crate_id":0,"name":"subcommands","span":{"filename":"src/build/app/mod.rs","begin":[1697,4],"end":[1706,5]},"visibility":"public","docs":"Adds multiple subcommands to the list of valid possibilities by iterating over an\n[`IntoIterator`] of [`App`]s.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, };\n# App::new(\"myprog\")\n.subcommands( vec![\n       App::new(\"config\").about(\"Controls configuration functionality\")\n                                .arg(Arg::new(\"config_file\").index(1)),\n       App::new(\"debug\").about(\"Controls debug functionality\")])\n# ;\n```\n[`IntoIterator`]: std::iter::IntoIterator","links":{"std::iter::IntoIterator":"2:7462","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmds",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3379":{"id":"2:3379","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381","2:3382","2:3383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:3621":{"id":"0:3621","crate_id":0,"name":"clone","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1145,9],"end":[1145,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8360-0:3583":{"id":"a:2:8360-0:3583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1044":{"id":"0:1044","crate_id":0,"name":"with_name","span":{"filename":"src/build/arg_group.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Deprecated, see [`ArgGroup::new`]","links":{"`ArgGroup::new`":"0:3369"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `ArgGroup::new`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `ArgGroup::new`"},"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:968":{"id":"0:968","crate_id":0,"name":"global","span":{"filename":"src/build/arg/mod.rs","begin":[3768,4],"end":[3771,5]},"visibility":"public","docs":"Specifies that an argument can be matched to all child [`Subcommand`]s.\n\n**NOTE:** Global arguments *only* propagate down, **not** up (to parent commands), however\ntheir values once a user uses them will be propagated back up to parents. In effect, this\nmeans one should *define* all global arguments at the top level, however it doesn't matter\nwhere the user *uses* the global argument.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"debug\")\n    .short('d')\n    .global(true)\n# ;\n```\n\nFor example, assume an appliction with two subcommands, and you'd like to define a\n`--verbose` flag that can be called on any of the subcommands and parent, but you don't\nwant to clutter the source with three duplicate [`Arg`] definitions.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"verb\")\n        .long(\"verbose\")\n        .short('v')\n        .global(true))\n    .subcommand(App::new(\"test\"))\n    .subcommand(App::new(\"do-stuff\"))\n    .get_matches_from(vec![\n        \"prog\", \"do-stuff\", \"--verbose\"\n    ]);\n\nassert_eq!(m.subcommand_name(), Some(\"do-stuff\"));\nlet sub_m = m.subcommand_matches(\"do-stuff\").unwrap();\nassert!(sub_m.is_present(\"verb\"));\n```\n\n[`Subcommand`]: crate::Subcommand\n[required]: ArgSettings::Required\n[`ArgMatches::is_present(\"flag\")`]: ArgMatches::is_present()","links":{"crate::Subcommand":"0:143","`Arg`":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["g",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4349":{"id":"1:4349","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4350","1:4351","1:4353","1:4354","1:4355","1:4356","1:4357","1:4358","1:4359","1:4360","1:4362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:123":{"id":"0:123","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[99,4],"end":[108,5]},"visibility":"default","docs":"Parse from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9606":{"id":"2:9606","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9607","2:9608","2:9609","2:9610","2:9611","2:9612","2:9613","2:9614","2:9615","2:9616","2:9617","2:9618","2:9619","2:9620"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8361-0:3583":{"id":"a:2:8361-0:3583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"23:198":{"id":"23:198","crate_id":23,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:940":{"id":"0:940","crate_id":0,"name":"value_names","span":{"filename":"src/build/arg/mod.rs","begin":[2685,4],"end":[2688,5]},"visibility":"public","docs":"Specify multiple names for values of option arguments. These names are cosmetic only, used\nfor help and usage strings only. The names are **not** used to access arguments. The values\nof the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n`two` `one` will be the first matched value, `two` will be the second).\n\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**Pro Tip:** It may help to use [`Arg::next_line_help(true)`] if there are long, or\nmultiple value names in order to not throw off the help text alignment of all options.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"speed\")\n    .short('s')\n    .value_names(&[\"fast\", \"slow\"]);\n```\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"io\")\n        .long(\"io-files\")\n        .value_names(&[\"INFILE\", \"OUTFILE\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    -h, --help                       Print help information\n    --io-files <INFILE> <OUTFILE>    Some help text\n    -V, --version                    Print version information\n```\n[`Arg::next_line_help(true)`]: Arg::next_line_help()\n[`Arg::number_of_values`]: Arg::number_of_values()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()","links":{"Arg::next_line_help()":"0:3323","Arg::takes_value()":"0:3323","Arg::multiple_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1812":{"id":"0:1812","crate_id":0,"name":"value_of_t","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[382,4],"end":[399,5]},"visibility":"public","docs":"Gets the value of a specific argument (i.e. an argument that takes an additional\nvalue at runtime) and then converts it into the result type using [`std::str::FromStr`].\n\nThere are two types of errors, parse failures and those where the argument wasn't present\n(such as a non-required argument). Check [`ErrorKind`] to distinguish them.\n\n*NOTE:* If getting a value for an option or positional argument that allows multiples,\nprefer [`ArgMatches::values_of_t`] as this method will only return the *first*\nvalue.\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```\n# extern crate clap;\n# use clap::App;\nlet matches = App::new(\"myapp\")\n              .arg(\"[length] 'Set the length to use as a pos whole num, i.e. 20'\")\n              .get_matches_from(&[\"test\", \"12\"]);\n\n// Specify the type explicitly (or use turbofish)\nlet len: u32 = matches.value_of_t(\"length\").unwrap_or_else(|e| e.exit());\nassert_eq!(len, 12);\n\n// You can often leave the type for rustc to figure out\nlet also_len = matches.value_of_t(\"length\").unwrap_or_else(|e| e.exit());\n// Something that expects u32\nlet _: u32 = also_len;\n```\n\n[`ArgMatches::values_of_t`]: ArgMatches::values_of_t()\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html\n[`ErrorKind`]: crate::ErrorKind","links":{"crate::ArgSettings::AllowInvalidUtf8":"0:3220","`std::str::FromStr`":"2:11931","crate::ErrorKind":"0:3496","ArgMatches::values_of_t()":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:471":{"id":"0:471","crate_id":0,"name":"help_heading","span":{"filename":"src/build/app/mod.rs","begin":[1135,4],"end":[1141,5]},"visibility":"public","docs":"Set the default section heading for future args.\n\nThis will be used for any arg that hasn't had [`Arg::help_heading`] called.\n\nThis is useful if the default `OPTIONS` or `ARGS` headings are\nnot specific enough for one's use case.\n\n[`App::arg`]: App::arg()\n[`Arg::help_heading`]: crate::Arg::help_heading()","links":{"crate::Arg::help_heading()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:534":{"id":"0:534","crate_id":0,"name":"try_get_matches_from_mut","span":{"filename":"src/build/app/mod.rs","begin":[2202,4],"end":[2279,5]},"visibility":"public","docs":"Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\nthe desired functionality, instead prefer [`App::try_get_matches_from`] which *does*\nconsume `self`.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`AppSettings::NoBinaryName`] is used.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet mut app = App::new(\"myprog\");\n    // Args and options go here...\nlet matches = app.try_get_matches_from_mut(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::try_get_matches_from`]: App::try_get_matches_from()","links":{"App::try_get_matches_from()":"0:2889","`App`":"0:2889","`AppSettings::NoBinaryName`":"0:2812"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:2889":{"id":"a:2:3012-0:2889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3053-0:3616":{"id":"a:2:3053-0:3616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3024-0:3496":{"id":"a:2:3024-0:3496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:181":{"id":"0:181","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[368,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1832":{"id":"0:1832","crate_id":0,"name":"indices_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[808,4],"end":[812,5]},"visibility":"public","docs":"Gets all indices of the argument in respect to all other arguments. Indices are\nsimilar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\n*NOTE:* For more information about how clap indices compare to argv indices, see\n[`ArgMatches::index_of`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n            // ARGV idices: ^0       ^1\n            // clap idices:             ^2   ^3   ^4\n            //\n            // clap sees the above as 'myapp -o val1 val2 val3'\n            //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n\nAnother quick example is when flags and options are used together\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .multiple_occurrences(true))\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .multiple_occurrences(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-f\", \"-o\", \"val2\", \"-f\"]);\n            // ARGV idices: ^0       ^1    ^2      ^3    ^4    ^5      ^6\n            // clap idices:                ^2      ^3          ^5      ^6\n\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 5]);\nassert_eq!(m.indices_of(\"flag\").unwrap().collect::<Vec<_>>(), &[3, 6]);\n```\n\nOne final example, which is an odd case; if we *don't* use  value delimiter as we did with\nthe first example above instead of `val1`, `val2` and `val3` all being distinc values, they\nwould all be a single value of `val1,val2,val3`, in which case they'd only receive a single\nindex.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n            // ARGV idices: ^0       ^1\n            // clap idices:             ^2\n            //\n            // clap sees the above as 'myapp -o \"val1,val2,val3\"'\n            //                         ^0    ^1  ^2\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2]);\n```\n[`ArgMatches::index_of`]: ArgMatches::index_of()\n[delimiter]: Arg::value_delimiter()","links":{"ArgMatches::index_of()":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:457":{"id":"0:457","crate_id":0,"name":"template","span":{"filename":"src/build/app/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Deprecated, see [`App::help_template`]","links":{"`App::help_template`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::help_template`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::help_template`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:2812":{"id":"a:2:3012-0:2812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12420":{"id":"2:12420","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15270","str::rsplitn":"1:15275","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:46526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2944":{"id":"2:2944","crate_id":2,"name":"into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1595":{"id":"0:1595","crate_id":0,"name":"print","span":{"filename":"src/parse/errors.rs","begin":[533,4],"end":[535,5]},"visibility":"public","docs":"Prints formatted and colored error to `stdout` or `stderr` according to its error kind\n\n# Example\n```no_run\nuse clap::App;\n\nmatch App::new(\"App\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        err.print().expect(\"Error writing Error\");\n        // do_something\n    },\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3597":{"id":"b:5:658-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3503":{"id":"0:3503","crate_id":0,"name":"UnrecognizedSubcommand","span":{"filename":"src/parse/errors.rs","begin":[109,4],"end":[109,26]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which either\ndoesn't meet the threshold for being similar enough to an existing subcommand,\nor the 'suggestions' feature is disabled.\nOtherwise the more detailed [`InvalidSubcommand`] error is returned.\n\nThis error typically happens when passing additional subcommand names to the `help`\nsubcommand. Otherwise, the more general [`UnknownArgument`] error is used.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind, };\nlet result = App::new(\"prog\")\n    .subcommand(App::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .about(\"The configuration file to use\")\n            .index(1)))\n    .try_get_matches_from(vec![\"prog\", \"help\", \"nothing\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::UnrecognizedSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`InvalidSubcommand`]: ErrorKind::InvalidSubcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::UnknownArgument":"0:3496","crate::Subcommand":"0:143","ErrorKind::InvalidSubcommand":"0:3496"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2839":{"id":"0:2839","crate_id":0,"name":"DisableVersionFlag","span":{"filename":"src/build/app/settings.rs","begin":[568,4],"end":[568,22]},"visibility":"default","docs":"Disables `-V` and `--version` flag.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, ErrorKind};\nlet res = App::new(\"myprog\")\n    .setting(AppSettings::DisableVersionFlag)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-V\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:97":{"id":"0:97","crate_id":0,"name":"value_t_or_exit","span":{"filename":"src/macros.rs","begin":[672,0],"end":[679,1]},"visibility":"public","docs":"Deprecated, see [`ArgMatches::value_of_t_or_exit`]","links":{},"attrs":["#[macro_export]","#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `ArgMatches::value_of_t_or_exit`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `ArgMatches::value_of_t_or_exit`"},"kind":"macro","inner":"macro_rules! value_t_or_exit {\n    ($m : ident, $v : expr, $t : ty) => { ... };\n    ($m : ident.value_of($v : expr), $t : ty) => { ... };\n}"},"a:2:3053-0:2960":{"id":"a:2:3053-0:2960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2617-0:2960":{"id":"b:2:2617-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:833":{"id":"0:833","crate_id":0,"name":"get_default_values","span":{"filename":"src/build/arg/mod.rs","begin":[298,4],"end":[300,5]},"visibility":"public","docs":"Get the default values specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").default_value(\"default value\");\nassert_eq!(&[\"default value\"], arg.get_default_values());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12381":{"id":"2:12381","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:46398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3496":{"id":"a:2:8361-0:3496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:25:25-0:2960":{"id":"b:25:25-0:2960","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"2:12451":{"id":"2:12451","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12367":{"id":"2:12367","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15284"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3145":{"id":"2:3145","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3147","2:3148"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:908":{"id":"0:908","crate_id":0,"name":"index","span":{"filename":"src/build/arg/mod.rs","begin":[1899,4],"end":[1902,5]},"visibility":"public","docs":"Specifies the index of a positional argument **starting at** 1.\n\n**NOTE:** The index refers to position according to **other positional argument**. It does\nnot define position in the argument list as a whole.\n\n**NOTE:** This is only meant to be used for positional arguments and shouldn't to be used\nwith [`Arg::short`] or [`Arg::long`].\n\n**NOTE:** You can optionally leave off the `index` method, and the index will be\nassigned in order of evaluation. Utilizing the `index` method allows for setting\nindexes out of order\n\n**NOTE:** When utilized with [`Arg::multiple_values(true)`], only the **last** positional argument\nmay be defined as multiple (i.e. with the highest index)\n\n# Panics\n\nAlthough not in this method directly, [`App`] will [`panic!`] if indexes are skipped (such\nas defining `index(1)` and `index(3)` but not `index(2)`, or a positional argument is\ndefined as multiple and is not the highest index\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"config\")\n    .index(1)\n# ;\n```\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .index(1))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\", \"fast\"\n    ]);\n\nassert!(m.is_present(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\")); // notice index(1) means \"first positional\"\n                                              // *not* first argument\n```\n[`Arg::short`]: Arg::short()\n[`Arg::long`]: Arg::long()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html\n[`App`]: crate::App","links":{"Arg::multiple_values()":"0:3323","Arg::long()":"0:3323","Arg::short()":"0:3323","crate::App":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["idx",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:2889":{"id":"b:2:2951-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:484":{"id":"0:484","crate_id":0,"name":"long_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[1327,4],"end":[1332,5]},"visibility":"public","docs":"Allows adding aliases, which function as \"hidden\" long flag subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").long_flag(\"test\")\n                .long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n                .arg(Arg::new(\"input\")\n                            .about(\"the file to add\")\n                            .index(1)\n                            .required(false))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:909":{"id":"0:909","crate_id":0,"name":"value_terminator","span":{"filename":"src/build/arg/mod.rs","begin":[1952,4],"end":[1955,5]},"visibility":"public","docs":"Specifies a value that *stops* parsing multiple values of a give argument. By default when\none sets [`multiple_values(true)`] on an argument, clap will continue parsing values for that\nargument until it reaches another valid argument, or one of the other more specific settings\nfor multiple values is used (such as [`min_values`], [`max_values`] or\n[`number_of_values`]).\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** When the terminator is passed in on the command line, it is **not** stored as one\nof the values\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"vals\")\n    .takes_value(true)\n    .multiple_values(true)\n    .value_terminator(\";\")\n# ;\n```\n\nThe following example uses two arguments, a sequence of commands, and the location in which\nto perform them\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cmds\")\n        .takes_value(true)\n        .multiple_values(true)\n        .allow_hyphen_values(true)\n        .value_terminator(\";\"))\n    .arg(Arg::new(\"location\"))\n    .get_matches_from(vec![\n        \"prog\", \"find\", \"-type\", \"f\", \"-name\", \"special\", \";\", \"/home/clap\"\n    ]);\nlet cmds: Vec<_> = m.values_of(\"cmds\").unwrap().collect();\nassert_eq!(&cmds, &[\"find\", \"-type\", \"f\", \"-name\", \"special\"]);\nassert_eq!(m.value_of(\"location\"), Some(\"/home/clap\"));\n```\n[options]: Arg::takes_value()\n[positional arguments]: Arg::index()\n[`multiple_values(true)`]: Arg::multiple_values()\n[`min_values`]: Arg::min_values()\n[`number_of_values`]: Arg::number_of_values()\n[`max_values`]: Arg::max_values()","links":{"Arg::max_values()":"0:3323","Arg::min_values()":"0:3323","Arg::takes_value()":"0:3323","Arg::index()":"0:3323","Arg::multiple_values()":"0:3323","Arg::number_of_values()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["term",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12364":{"id":"2:12364","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11477"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:2935":{"id":"0:2935","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,32],"end":[64,41]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:828":{"id":"0:828","crate_id":0,"name":"get_index","span":{"filename":"src/build/arg/mod.rs","begin":[260,4],"end":[262,5]},"visibility":"public","docs":"Get the index of this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1825":{"id":"0:1825","crate_id":0,"name":"is_present","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":"Returns `true` if an argument was present at runtime, otherwise `false`.\n\n*NOTE:* This will always return `true` if [`default_value`] has been set.\n[`occurrences_of`] can be used to check if a value is present at runtime.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert!(m.is_present(\"debug\"));\n```\n\n[`default_value`]: crate::Arg::default_value()\n[`occurrences_of`]: ArgMatches::occurrences_of()","links":{"ArgMatches::occurrences_of()":"0:3583","crate::Arg::default_value()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:5724-0:3549":{"id":"b:5:5724-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:5722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:5726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2620-0:3496":{"id":"b:2:2620-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:976":{"id":"0:976","crate_id":0,"name":"hide_env_values","span":{"filename":"src/build/arg/mod.rs","begin":[4166,4],"end":[4172,5]},"visibility":"public","docs":"Specifies that any values inside the associated ENV variables of an argument should not be\ndisplayed in the help text.\n\nThis is useful when ENV vars contain sensitive values.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::HideEnvValues)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"connect\")\n    .arg(Arg::new(\"host\")\n        .long(\"host\")\n        .env(\"CONNECT\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::HideEnvValues));\n\n```\n\nIf we were to run the above program with `$ CONNECT=super_secret connect --help` the\n`[default: CONNECT=super_secret]` portion of the help text would be omitted.","links":{},"attrs":["#[cfg(feature = \"env\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:3616":{"id":"a:2:3012-0:3616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2810":{"id":"0:2810","crate_id":0,"name":"Err","span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:182":{"id":"0:182","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"28:53":{"id":"28:53","crate_id":28,"name":"UnicodeWidthStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["28:54","28:56"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3366":{"id":"0:3366","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[84,18],"end":[84,23]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3368"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:855":{"id":"0:855","crate_id":0,"name":"visible_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[625,4],"end":[628,5]},"visibility":"public","docs":"Allows adding multiple [`Arg`] aliases that functions exactly like those defined\nwith [`Arg::aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_aliases(&[\"something\", \"awesome\", \"cool\"]))\n       .get_matches_from(vec![\n            \"prog\", \"--awesome\"\n        ]);\nassert!(m.is_present(\"test\"));\n```\n[`App::aliases`]: Arg::aliases()","links":{"`Arg::aliases`":"0:3323","`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:3323":{"id":"a:2:3012-0:3323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3290":{"id":"0:3290","crate_id":0,"name":"Username","span":{"filename":"src/build/arg/value_hint.rs","begin":[56,4],"end":[56,12]},"visibility":"default","docs":"Name of a local operating system user.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3595":{"id":"0:3595","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,34],"end":[75,36]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:366":{"id":"0:366","crate_id":0,"name":"get_about","span":{"filename":"src/build/app/mod.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Get the help message specified via [`App::about`].\n\n[`App::about`]: App::about()","links":{"App::about()":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3549":{"id":"0:3549","crate_id":0,"name":"Error","span":{"filename":"src/parse/errors.rs","begin":[431,0],"end":[441,1]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`App::error`] to create an error.\n\n[`App::error`]: crate::App::error","links":{"crate::App::error":"0:2889"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":["0:3551","0:3552"],"impls":["0:1591","a:2:3012-0:3549","a:2:3024-0:3549","a:2:3053-0:3549","a:2:8360-0:3549","a:2:8361-0:3549","b:2:2945-0:3549","b:2:2941-0:3549","b:5:5724-0:3549","b:2:2956-0:3549","b:2:2951-0:3549","b:2:2617-0:3549","b:2:2620-0:3549","b:2:3675-0:3549","0:1623","0:1625","0:3555","0:1584","0:1627"]}},"2:9409":{"id":"2:9409","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:960":{"id":"0:960","crate_id":0,"name":"env","span":{"filename":"src/build/arg/mod.rs","begin":[3331,4],"end":[3333,5]},"visibility":"public","docs":"Specifies that if the value is not passed in as an argument, that it should be retrieved\nfrom the environment, if available. If it is not present in the environment, then default\nrules will apply.\n\nIf user sets the argument in the environment:\n- When [`Arg::takes_value(true)`] is not set, the flag is considered raised.\n- When [`Arg::takes_value(true)`] is set, [`ArgMatches::value_of`] will\n  return value of the environment variable.\n\nIf user doesn't set the argument in the environment:\n- When [`Arg::takes_value(true)`] is not set, the flag is considered off.\n- When [`Arg::takes_value(true)`] is set, [`ArgMatches::value_of`] will\n  return the default specified.\n\n# Examples\n\nIn this example, we show the variable coming from the environment:\n\n```rust\n# use std::env;\n# use clap::{App, Arg};\n\nenv::set_var(\"MY_FLAG\", \"env\");\n\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .env(\"MY_FLAG\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"flag\"), Some(\"env\"));\n```\n\nIn this example, because [`Arg::takes_value(false)`] (by default),\n`prog` is a flag that accepts an optional, case-insensitive boolean literal.\nA `false` literal is `n`, `no`, `f`, `false`, `off` or `0`.\nAn absent environment variable will also be considered as `false`.\nAnything else will considered as `true`.\n\n```rust\n# use std::env;\n# use clap::{App, Arg};\n\nenv::set_var(\"TRUE_FLAG\", \"true\");\nenv::set_var(\"FALSE_FLAG\", \"0\");\n\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"true_flag\")\n        .long(\"true_flag\")\n        .env(\"TRUE_FLAG\"))\n    .arg(Arg::new(\"false_flag\")\n        .long(\"false_flag\")\n        .env(\"FALSE_FLAG\"))\n    .arg(Arg::new(\"absent_flag\")\n        .long(\"absent_flag\")\n        .env(\"ABSENT_FLAG\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(m.is_present(\"true_flag\"));\nassert_eq!(m.value_of(\"true_flag\"), None);\nassert!(!m.is_present(\"false_flag\"));\nassert!(!m.is_present(\"absent_flag\"));\n```\n\nIn this example, we show the variable coming from an option on the CLI:\n\n```rust\n# use std::env;\n# use clap::{App, Arg};\n\nenv::set_var(\"MY_FLAG\", \"env\");\n\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .env(\"MY_FLAG\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\", \"opt\"\n    ]);\n\nassert_eq!(m.value_of(\"flag\"), Some(\"opt\"));\n```\n\nIn this example, we show the variable coming from the environment even with the\npresence of a default:\n\n```rust\n# use std::env;\n# use clap::{App, Arg};\n\nenv::set_var(\"MY_FLAG\", \"env\");\n\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .env(\"MY_FLAG\")\n        .takes_value(true)\n        .default_value(\"default\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"flag\"), Some(\"env\"));\n```\n\nIn this example, we show the use of multiple values in a single environment variable:\n\n```rust\n# use std::env;\n# use clap::{App, Arg};\n\nenv::set_var(\"MY_FLAG_MULTI\", \"env1,env2\");\n\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .env(\"MY_FLAG_MULTI\")\n        .takes_value(true)\n        .multiple_values(true)\n        .use_delimiter(true))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.values_of(\"flag\").unwrap().collect::<Vec<_>>(), vec![\"env1\", \"env2\"]);\n```\n[`ArgMatches::occurrences_of`]: ArgMatches::occurrences_of()\n[`ArgMatches::value_of`]: crate::ArgMatches::value_of()\n[`ArgMatches::is_present`]: ArgMatches::is_present()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::use_delimiter(true)`]: Arg::use_delimiter()","links":{"crate::ArgMatches::value_of()":"0:3583","Arg::takes_value()":"0:3323"},"attrs":["#[cfg(feature = \"env\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1837":{"id":"0:1837","crate_id":0,"name":"subcommand_name","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[912,4],"end":[914,5]},"visibility":"public","docs":"Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\nas well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know\nwhich subcommand was actually used. This method returns the name of the subcommand that was\nused at runtime, or `None` if one wasn't.\n\n*NOTE*: Subcommands form a hierarchy, where multiple subcommands can be used at runtime,\nbut only a single subcommand from any group of sibling commands may used at once.\n\nAn ASCII art depiction may help explain this better...Using a fictional version of `git` as\nthe demo subject. Imagine the following are all subcommands of `git` (note, the author is\naware these aren't actually all subcommands in the real `git` interface, but it makes\nexplanation easier)\n\n```notrust\n             Top Level App (git)                         TOP\n                             |\n      -----------------------------------------\n     /             |                \\          \\\n  clone          push              add       commit      LEVEL 1\n    |           /    \\            /    \\       |\n   url      origin   remote    ref    name   message     LEVEL 2\n            /                  /\\\n         path            remote  local                   LEVEL 3\n```\n\nGiven the above fictional subcommand hierarchy, valid runtime uses would be (not an all\ninclusive list, and not including argument options per command for brevity and clarity):\n\n```sh\n$ git clone url\n$ git push origin path\n$ git add ref local\n$ git commit message\n```\n\nNotice only one command per \"level\" may be used. You could not, for example, do `$ git\nclone url push origin path`\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\n let app_m = App::new(\"git\")\n     .subcommand(App::new(\"clone\"))\n     .subcommand(App::new(\"push\"))\n     .subcommand(App::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand_name() {\n    Some(\"clone\")  => {}, // clone was used\n    Some(\"push\")   => {}, // push was used\n    Some(\"commit\") => {}, // commit was used\n    _              => {}, // Either no subcommand or one not tested for...\n}\n```\n[`Subcommand`]: crate::Subcommand\n[`App`]: crate::App","links":{"crate::App":"0:2889","crate::Subcommand":"0:143","`ArgMatches`":"0:3583"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[358,0],"end":[365,1]},"visibility":{"restricted":{"parent":"0:100","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Args","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Args","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:177","0:178"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:881":{"id":"0:881","crate_id":0,"name":"exclusive","span":{"filename":"src/build/arg/mod.rs","begin":[1175,4],"end":[1179,5]},"visibility":"public","docs":"Set an exclusive argument by name. An exclusive argument conflict with every other flag\nand must be always passed alone.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .exclusive(true)\n# ;\n```\n**NOTE:** If using YAML the above example should be laid out as follows\n\n```yaml\n- config\n    exclusive: true\n```\n\nSetting an exclusive argument and having any other arguments present at runtime\nis an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"exclusive\")\n        .takes_value(true)\n        .exclusive(true)\n        .long(\"exclusive\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\")\n        .index(1))\n    .try_get_matches_from(vec![\n        \"prog\", \"--exclusive\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::ArgumentConflict);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exclusive",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:956":{"id":"0:956","crate_id":0,"name":"default_value_ifs","span":{"filename":"src/build/arg/mod.rs","begin":[3167,4],"end":[3175,5]},"visibility":"public","docs":"Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\nThe method takes a slice of tuples in the `(arg, Option<val>, default)` format.\n\n**NOTE**: The conditions are stored in order and evaluated in the same order. I.e. the first\nif multiple conditions are true, the first one found will be applied and the ultimate value.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\ndefault_value_if:\n    - [arg, val, default]\n    - [arg2, null, default2]\n```\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"chan\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nWe can also see that these values are applied in order, and if more than one condition is\ntrue, only the first evaluated \"wins\"\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"Arg::default_value_if()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:162":{"id":"0:162","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[330,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"It","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"It"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1875":{"id":"0:1875","crate_id":0,"name":"Item","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1096,4],"end":[1096,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:3675-0:3728":{"id":"b:2:3675-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3278":{"id":"0:3278","crate_id":0,"name":"FilePath","span":{"filename":"src/build/arg/value_hint.rs","begin":[35,4],"end":[35,12]},"visibility":"default","docs":"Path to a file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2951-0:3271":{"id":"b:2:2951-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:145":{"id":"0:145","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[260,4],"end":[260,63]},"visibility":"default","docs":"Append to [`App`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`IntoApp`].","links":{"`IntoApp`":"0:132","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:7421":{"id":"2:7421","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7423"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2945-0:3271":{"id":"b:2:2945-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5421":{"id":"5:5421","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:313","`String`":"5:7606"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:2812":{"id":"a:2:3053-0:2812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3749":{"id":"0:3749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[69,16],"end":[69,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12411":{"id":"2:12411","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7506","prim@char":"1:15270","str::split":"1:15275","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:46440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9390":{"id":"2:9390","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2882":{"id":"0:2882","crate_id":0,"name":"fmt","span":{"filename":"src/build/app/settings.rs","begin":[143,9],"end":[143,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3610":{"id":"a:2:8361-0:3610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5423":{"id":"5:5423","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15275"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1890":{"id":"0:1890","crate_id":0,"name":"Item","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1152,4],"end":[1152,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"primitive","inner":"usize"},"generics":{"params":[],"where_predicates":[]}}},"b:2:2617-0:3597":{"id":"b:2:2617-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3545":{"id":"0:3545","crate_id":0,"name":"clone","span":{"filename":"src/parse/errors.rs","begin":[25,22],"end":[25,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3728":{"id":"b:2:2941-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2867":{"id":"0:2867","crate_id":0,"name":"SubcommandRequired","span":{"filename":"src/build/app/settings.rs","begin":[956,4],"end":[956,22]},"visibility":"default","docs":"Allows specifying that if no [`subcommand`] is present at runtime,\nerror and exit gracefully.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, ErrorKind};\nlet err = App::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired)\n    .subcommand(App::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind, ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`subcommand`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3012":{"id":"2:3012","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:364":{"id":"0:364","crate_id":0,"name":"set_bin_name","span":{"filename":"src/build/app/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"public","docs":"Set binary name. Uses `&mut self` instead of `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"generic","inner":"S"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1896":{"id":"0:1896","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1168,0],"end":[1168,45]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:7531","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:672":{"id":"0:672","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[41,0],"end":[45,1]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:674"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:967":{"id":"0:967","crate_id":0,"name":"require_equals","span":{"filename":"src/build/arg/mod.rs","begin":[3717,4],"end":[3723,5]},"visibility":"public","docs":"Requires that options use the `--option=val` syntax (i.e. an equals between the option and\nassociated value) **Default:** `false`\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .long(\"config\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::RequireEquals)\n# ;\n```\n\nSetting [`RequireEquals`] requires that the option have an equals sign between\nit and the associated value.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::RequireEquals)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=file.conf\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`RequireEquals`] and *not* supplying the equals will cause an\nerror.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::RequireEquals)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::NoEquals);\n```\n[`RequireEquals`]: ArgSettings::RequireEquals","links":{"ArgSettings::RequireEquals":"0:3220","`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["r",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3249":{"id":"0:3249","crate_id":0,"name":"IgnoreCase","span":{"filename":"src/build/arg/settings.rs","begin":[115,4],"end":[115,14]},"visibility":"default","docs":"Possible values become case insensitive","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:689":{"id":"0:689","crate_id":0,"name":"about","span":{"filename":"src/build/arg/arg_value.rs","begin":[144,4],"end":[147,5]},"visibility":"public","docs":"Sets the help text of the value that will be displayed to the user when completing the\nvalue in a compatible shell. Typically, this is a short description of the value.\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nArgValue::new(\"slow\")\n    .about(\"not fast\")\n# ;\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12478":{"id":"2:12478","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2617-0:3220":{"id":"b:2:2617-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1873":{"id":"0:1873","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1095,0],"end":[1104,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["max","partition","flatten","skip_while","max_by","chain","fold","ge","count","find","partial_cmp_by","flat_map","rposition","partition_in_place","max_by_key","map_while","size_hint","advance_by","min_by_key","map","ne","skip","for_each","eq_by","unzip","any","take_while","is_partitioned","scan","gt","nth","copied","rev","try_for_each","is_sorted","cycle","try_fold","fuse","last","step_by","cmp","cloned","position","is_sorted_by","sum","zip","reduce","collect","inspect","intersperse","partial_cmp","le","min","take","is_sorted_by_key","product","find_map","min_by","by_ref","intersperse_with","all","filter","lt","filter_map","peekable","eq","__iterator_get_unchecked","cmp_by","enumerate","try_find"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1875","0:1876","0:1877"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1893":{"id":"0:1893","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1162,0],"end":[1166,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:7506","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1895"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8360-0:3597":{"id":"a:2:8360-0:3597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:854":{"id":"0:854","crate_id":0,"name":"visible_short_alias","span":{"filename":"src/build/arg/mod.rs","begin":[601,4],"end":[606,5]},"visibility":"public","docs":"Allows adding a [`Arg`] alias that functions exactly like those defined with\n[`Arg::alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_short_alias('t')\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-t\", \"coffee\"\n        ]);\nassert!(m.is_present(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```\n[`App::alias`]: Arg::short_alias()","links":{"`Arg::alias`":"0:3323","`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9637":{"id":"2:9637","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9638","2:9639","2:9640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3537":{"id":"0:3537","crate_id":0,"name":"Io","span":{"filename":"src/parse/errors.rs","begin":[415,4],"end":[415,6]},"visibility":"default","docs":"Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n\n[I/O error]: std::io::Error","links":{"std::io::Error":"1:3806"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2929":{"id":"0:2929","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,18],"end":[64,23]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2931"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1021":{"id":"0:1021","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5175,0],"end":[5179,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12383":{"id":"2:12383","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15275"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:46696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3746":{"id":"b:5:658-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173":{"id":"0:173","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[350,4],"end":[352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3555":{"id":"0:3555","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[430,9],"end":[430,14]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3556"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1056":{"id":"0:1056","crate_id":0,"name":"requires_all","span":{"filename":"src/build/arg_group.rs","begin":[347,4],"end":[352,5]},"visibility":"public","docs":"Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when one of the arguments from this\ngroup is used.\n\n**NOTE:** The names provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group requires \"-d\" and \"-v\" to be used,\n// yet we only used \"-d\" it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires_all()","links":{"ArgGroup::required()":"0:3369","crate::Arg::requires_all()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:846":{"id":"0:846","crate_id":0,"name":"alias","span":{"filename":"src/build/arg/mod.rs","begin":[473,4],"end":[476,5]},"visibility":"public","docs":"Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden arguments as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .long(\"test\")\n            .alias(\"alias\")\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--alias\", \"cool\"\n        ]);\nassert!(m.is_present(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{"`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[144,4],"end":[144,50]},"visibility":"default","docs":"Build an [`App`] that can update `self`.\n\nSee [`FromArgMatches::update_from_arg_matches`] for updating `self`.","links":{"`App`":"0:2889","`FromArgMatches::update_from_arg_matches`":"0:137"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:3239":{"id":"0:3239","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/build/arg/settings.rs","begin":[104,4],"end":[104,22]},"visibility":"default","docs":"Hides the possible values from the help message","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:118":{"id":"0:118","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[75,4],"end":[78,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:120":{"id":"0:120","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[88,4],"end":[96,5]},"visibility":"default","docs":"Parse from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3509":{"id":"0:3509","crate_id":0,"name":"ValueValidation","span":{"filename":"src/parse/errors.rs","begin":[166,4],"end":[166,19]},"visibility":"default","docs":"Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nfn is_numeric(val: &str) -> Result<(), String> {\n    match val.parse::<i64>() {\n        Ok(..) => Ok(()),\n        Err(..) => Err(String::from(\"Value wasn't a number!\")),\n    }\n}\n\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"num\")\n         .validator(is_numeric))\n    .try_get_matches_from(vec![\"prog\", \"NotANumber\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::ValueValidation);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3594":{"id":"0:3594","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,34],"end":[75,36]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3215":{"id":"0:3215","crate_id":0,"name":"Output","span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:944":{"id":"0:944","crate_id":0,"name":"default_values","span":{"filename":"src/build/arg/mod.rs","begin":[2822,4],"end":[2825,5]},"visibility":"public","docs":"Like [`Arg::default_value`] but for args taking multiple values\n\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:117":{"id":"0:117","crate_id":0,"name":"Parser","span":{"filename":"src/derive.rs","begin":[73,0],"end":[133,1]},"visibility":"public","docs":"Parse command-line arguments into `Self`.\n\nThe primary one-stop-shop trait used to create an instance of a `clap`\n[`App`], conduct the parsing, and turn the resulting [`ArgMatches`] back\ninto concrete instance of the user struct.\n\nThis trait is primarily a convenience on top of [`FromArgMatches`] +\n[`IntoApp`] which uses those two underlying traits to build the two\nfundamental functions `parse` which uses the `std::env::args_os` iterator,\nand `parse_from` which allows the consumer to supply the iterator (along\nwith fallible options for each).\n\nSee also [`Subcommand`] and [`Args`].\n\n# Examples\n\nThe following example creates a `Context` struct that would be used\nthroughout the application representing the normalized values coming from\nthe CLI.\n\n ```\n/// My super CLI\n#[derive(clap::Parser)]\n#[clap(name = \"demo\")]\nstruct Context {\n    /// More verbose output\n    #[clap(long)]\n    verbose: bool,\n    /// An optional name\n    #[clap(short, long)]\n    name: Option<String>,\n}\n```\n\nThe equivalent [`App`] struct + `From` implementation:\n\n```rust\n# use clap::{App, Arg, ArgMatches};\nApp::new(\"demo\")\n    .about(\"My super CLI\")\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .about(\"More verbose output\"))\n    .arg(Arg::new(\"name\")\n        .long(\"name\")\n        .short('n')\n        .about(\"An optional name\")\n        .takes_value(true));\n\nstruct Context {\n    verbose: bool,\n    name: Option<String>,\n}\n\nimpl From<ArgMatches> for Context {\n    fn from(m: ArgMatches) -> Self {\n        Context {\n            verbose: m.is_present(\"verbose\"),\n            name: m.value_of(\"name\").map(|n| n.to_owned()),\n        }\n    }\n}\n```\n","links":{"`Args`":"0:140","`Subcommand`":"0:143","`ArgMatches`":"0:3583","`IntoApp`":"0:132","`App`":"0:2889","`FromArgMatches`":"0:137"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:118","0:119","0:120","0:123","0:126","0:129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:137","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoApp","id":"0:132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:155"]}},"0:1892":{"id":"0:1892","crate_id":0,"name":"size_hint","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1157,4],"end":[1159,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9403":{"id":"2:9403","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:827":{"id":"0:827","crate_id":0,"name":"get_num_vals","span":{"filename":"src/build/arg/mod.rs","begin":[254,4],"end":[256,5]},"visibility":"public","docs":"Get the number of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:897":{"id":"0:897","crate_id":0,"name":"required_if_eq_any","span":{"filename":"src/build/arg/mod.rs","begin":[1686,4],"end":[1690,5]},"visibility":"public","docs":"Allows specifying that this argument is [required] based on multiple conditions. The\nconditions are set up in a `(arg, val)` style tuple. The requirement will only become valid\nif one of the specified `arg`'s value equals its corresponding `val`.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\nrequired_if_eq:\n    - [arg, val]\n    - [arg2, val2]\n```\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_any(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` makes this arg required if any of the `arg`s\nare used at runtime and it's corresponding value is equal to `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"other\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec, or --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` and having any of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1888":{"id":"0:1888","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1151,0],"end":[1160,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["max","partition","flatten","skip_while","max_by","chain","fold","ge","count","find","partial_cmp_by","flat_map","rposition","partition_in_place","max_by_key","map_while","size_hint","advance_by","min_by_key","map","ne","skip","for_each","eq_by","unzip","any","take_while","is_partitioned","scan","gt","nth","copied","rev","try_for_each","is_sorted","cycle","try_fold","fuse","last","step_by","cmp","cloned","position","is_sorted_by","sum","zip","reduce","collect","inspect","intersperse","partial_cmp","le","min","take","is_sorted_by_key","product","find_map","min_by","by_ref","intersperse_with","all","filter","lt","filter_map","peekable","eq","__iterator_get_unchecked","cmp_by","enumerate","try_find"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1890","0:1891","0:1892"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12705":{"id":"2:12705","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12706","2:12707"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2813":{"id":"0:2813","crate_id":0,"name":"AllowInvalidUtf8ForExternalSubcommands","span":{"filename":"src/build/app/settings.rs","begin":[185,4],"end":[185,42]},"visibility":"default","docs":"Specifies that external subcommands that are invalid UTF-8 should *not* be treated as an error.\n\n**NOTE:** Using external subcommand argument values with invalid UTF-8 requires using\n[`ArgMatches::values_of_os`] or [`ArgMatches::values_of_lossy`] for those particular\narguments which may contain invalid UTF-8 values\n\n**NOTE:** Setting this requires [`AppSettings::AllowExternalSubcommands`]\n\n# Platform Specific\n\nNon Windows systems only\n\n# Examples\n\n ```\n# use clap::{App, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowInvalidUtf8ForExternalSubcommands)\n    .setting(AppSettings::AllowExternalSubcommands)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&std::ffi::OsStr> = ext_m.values_of_os(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`ArgMatches::values_of_os`]: crate::ArgMatches::values_of_os()\n[`ArgMatches::values_of_lossy`]: crate::ArgMatches::values_of_lossy()\n[`subcommands`]: crate::App::subcommand()","links":{"`AppSettings::AllowExternalSubcommands`":"0:2812","crate::ArgMatches::values_of_os()":"0:3583","crate::ArgMatches::values_of_lossy()":"0:3583"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2941-0:3616":{"id":"b:2:2941-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3024-0:2889":{"id":"a:2:3024-0:2889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1054":{"id":"0:1054","crate_id":0,"name":"requires","span":{"filename":"src/build/arg_group.rs","begin":[310,4],"end":[313,5]},"visibility":"public","docs":"Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when any one of the arguments from\nthis group is used.\n\n**NOTE:** The name provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\"]);\n// because we used an arg from the group, and the group requires \"-d\" to be used, it's an\n// error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires()","links":{"ArgGroup::required()":"0:3369","crate::Arg::requires()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2849":{"id":"0:2849","crate_id":0,"name":"HelpRequired","span":{"filename":"src/build/app/settings.rs","begin":[739,4],"end":[739,16]},"visibility":"default","docs":" Tells `clap` to panic if help strings are omitted\n\n # Examples\n\n ```rust\n # use clap::{App, Arg, AppSettings};\n App::new(\"myprog\")\n     .setting(AppSettings::HelpRequired)\n     .arg(\n         Arg::new(\"foo\").about(\"It does foo stuff\")\n         // As required via AppSettings::HelpRequired, a help message was supplied\n      )\n #    .get_matches();\n ```\n\n # Panics\n\n ```rust,no_run\n # use clap::{App, Arg, AppSettings};\n App::new(\"myapp\")\n     .setting(AppSettings::HelpRequired)\n     .arg(\n         Arg::new(\"foo\")\n         // Someone forgot to put .about(\"...\") here\n         // Since the setting AppSettings::HelpRequired is activated, this will lead to\n         // a panic (if you are in debug mode)\n     )\n #   .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3020":{"id":"2:3020","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:467":{"id":"0:467","crate_id":0,"name":"set_term_width","span":{"filename":"src/build/app/mod.rs","begin":[1063,4],"end":[1065,5]},"visibility":"public","docs":"Deprecated, see [`App::term_width`]","links":{"`App::term_width`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::term_width`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::term_width`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:394":{"id":"0:394","crate_id":0,"name":"get_arguments","span":{"filename":"src/build/app/mod.rs","begin":[213,4],"end":[215,5]},"visibility":"public","docs":"Iterate through the set of arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1784":{"id":"0:1784","crate_id":0,"name":"default","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[82,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:843":{"id":"0:843","crate_id":0,"name":"short","span":{"filename":"src/build/arg/mod.rs","begin":[405,4],"end":[410,5]},"visibility":"public","docs":"Sets the short version of the argument without the preceding `-`.\n\nBy default `clap` automatically assigns `V` and `h` to the auto-generated `version` and\n`help` arguments respectively. You may use the uppercase `V` or lowercase `h` for your own\narguments, in which case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n# Examples\n\nTo set [`short`] use a single valid UTF-8 character. If you supply a leading `-` such as\n`-c`, the `-` will be stripped.\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"config\")\n    .short('c')\n# ;\n```\n\nSetting [`short`] allows using the argument via a single hyphen (`-`) such as `-c`\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c'))\n    .get_matches_from(vec![\n        \"prog\", \"-c\"\n    ]);\n\nassert!(m.is_present(\"config\"));\n```\n[`short`]: Arg::short()","links":{"Arg::short()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[81,4],"end":[85,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2979":{"id":"0:2979","crate_id":0,"name":"eq","span":{"filename":"src/build/arg/arg_value.rs","begin":[27,32],"end":[27,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6535":{"id":"1:6535","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2956-0:3220":{"id":"b:2:2956-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2941-0:3496":{"id":"b:2:2941-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:993":{"id":"0:993","crate_id":0,"name":"help_heading","span":{"filename":"src/build/arg/mod.rs","begin":[4806,4],"end":[4812,5]},"visibility":"public","docs":"Set a custom heading for this arg to be printed under","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:820":{"id":"0:820","crate_id":0,"name":"get_short_and_visible_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[186,4],"end":[195,5]},"visibility":"public","docs":"Get the short option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:3728":{"id":"a:2:3053-0:3728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3299":{"id":"0:3299","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg/value_hint.rs","begin":[25,9],"end":[25,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7506":{"id":"2:7506","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7507","2:7508","2:7509","2:7510","2:7514","2:7517"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[367,0],"end":[377,1]},"visibility":{"restricted":{"parent":"0:100","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Subcommand","id":"0:143","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Subcommand","id":"0:143","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:181","0:182","0:183"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:461":{"id":"0:461","crate_id":0,"name":"unset_setting","span":{"filename":"src/build/app/mod.rs","begin":[953,4],"end":[959,5]},"visibility":"public","docs":"Disables a single setting for the current (this `App` instance) command or subcommand.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired)\n    .unset_setting(AppSettings::WaitOnError)\n# ;\n```\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired | AppSettings::WaitOnError)\n# ;\n```","links":{"`AppSettings`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:2776","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:169":{"id":"0:169","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[344,4],"end":[346,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:367":{"id":"0:367","crate_id":0,"name":"get_long_about","span":{"filename":"src/build/app/mod.rs","begin":[145,4],"end":[147,5]},"visibility":"public","docs":"Get the help message specified via [`App::long_about`].\n\n[`App::long_about`]: App::long_about()","links":{"App::long_about()":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3497":{"id":"0:3497","crate_id":0,"name":"InvalidValue","span":{"filename":"src/parse/errors.rs","begin":[42,4],"end":[42,16]},"visibility":"default","docs":"Occurs when an [`Arg`] has a set of possible values,\nand the user provides a value which isn't in that set.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"speed\")\n        .possible_value(\"fast\")\n        .possible_value(\"slow\"))\n    .try_get_matches_from(vec![\"prog\", \"other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::InvalidValue);\n```","links":{"`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[72,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:729","0:730"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5391":{"id":"1:5391","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5392","1:5393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"27:122":{"id":"27:122","crate_id":27,"name":"Fragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["27:123","27:124","27:125"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:523":{"id":"0:523","crate_id":0,"name":"get_matches_safe","span":{"filename":"src/build/app/mod.rs","begin":[2083,4],"end":[2085,5]},"visibility":"public","docs":"Deprecated, see [`App::try_get_matches`]","links":{"`App::try_get_matches`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::try_get_matches`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::try_get_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1841":{"id":"0:1841","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1002,0],"end":[1011,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["max","partition","flatten","skip_while","max_by","chain","fold","ge","count","find","partial_cmp_by","flat_map","rposition","partition_in_place","max_by_key","map_while","size_hint","advance_by","min_by_key","map","ne","skip","for_each","eq_by","unzip","any","take_while","is_partitioned","scan","gt","nth","copied","rev","try_for_each","is_sorted","cycle","try_fold","fuse","last","step_by","cmp","cloned","position","is_sorted_by","sum","zip","reduce","collect","inspect","intersperse","partial_cmp","le","min","take","is_sorted_by_key","product","find_map","min_by","by_ref","intersperse_with","all","filter","lt","filter_map","peekable","eq","__iterator_get_unchecked","cmp_by","enumerate","try_find"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1843","0:1844","0:1845"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3592":{"id":"0:3592","crate_id":0,"name":"eq","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,23],"end":[75,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12024":{"id":"2:12024","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2620-0:3583":{"id":"b:2:2620-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:540":{"id":"0:540","crate_id":0,"name":"subcommand_placeholder","span":{"filename":"src/build/app/mod.rs","begin":[2351,4],"end":[2359,5]},"visibility":"public","docs":"Sets the placeholder text used for subcommands when printing usage and help.\nBy default, this is \"SUBCOMMAND\" with a header of \"SUBCOMMANDS\".\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    .subcommand(App::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```\n\nbut usage of `subcommand_placeholder`\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    .subcommand(App::new(\"sub1\"))\n    .subcommand_placeholder(\"THING\", \"THINGS\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [THING]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nTHINGS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["placeholder",{"kind":"generic","inner":"S"}],["header",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3739":{"id":"0:3739","crate_id":0,"name":"clone","span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3610":{"id":"a:2:3024-0:3610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:420":{"id":"0:420","crate_id":0,"name":"author","span":{"filename":"src/build/app/mod.rs","begin":[407,4],"end":[410,5]},"visibility":"public","docs":"Sets a string of author(s) that will be displayed to the user when they\nrequest the help message.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to\nautomatically set your application's author(s) to the same thing as your\ncrate at compile time.\n\nSee the [`examples/`] directory for more information.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n     .author(\"Me, me@mymain.com\")\n# ;\n```\n[`crate_authors!`]: ./macro.crate_authors!.html\n[`examples/`]: https://github.com/clap-rs/clap/tree/master/examples","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["author",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[184,4],"end":[184,64]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:9401":{"id":"2:9401","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7531":{"id":"2:7531","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7532","2:7533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:3024-0:3746":{"id":"a:2:3024-0:3746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:522":{"id":"0:522","crate_id":0,"name":"try_get_matches","span":{"filename":"src/build/app/mod.rs","begin":[2076,4],"end":[2079,5]},"visibility":"public","docs":"Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\nthe process on failed parse. By default this method gets matches from [`env::args_os`].\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a\n[`ErrorKind::DisplayHelp`] or [`ErrorKind::DisplayVersion`] respectively. You must call\n[`Error::exit`] or perform a [`std::process::exit`].\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet matches = App::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches()\n    .unwrap_or_else(|e| e.exit());\n```\n[`env::args_os`]: std::env::args_os()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion","links":{"crate::Error::exit()":"0:3549","crate::ErrorKind::DisplayHelp":"0:3496","Result":"2:44700","std::process::exit()":"1:7478","std::env::args_os()":"1:2243","crate::Error":"0:3549","crate::ErrorKind::DisplayVersion":"0:3496"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:3323":{"id":"b:2:2951-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2932":{"id":"0:2932","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,25],"end":[64,30]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2934"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3535":{"id":"0:3535","crate_id":0,"name":"ArgumentNotFound","span":{"filename":"src/parse/errors.rs","begin":[409,4],"end":[409,20]},"visibility":"default","docs":"Occurs when using the [`ArgMatches::value_of_t`] and friends to convert an argument value\ninto type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn't used by the user.\n\n[`ArgMatches::value_of_t`]: crate::ArgMatches::value_of_t()","links":{"crate::ArgMatches::value_of_t()":"0:3583"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3241":{"id":"0:3241","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/build/arg/settings.rs","begin":[106,4],"end":[106,21]},"visibility":"default","docs":"Allows values that start with a hyphen","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3290":{"id":"2:3290","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292","2:3293","2:3294"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3677":{"id":"2:3677","crate_id":2,"name":"type_id","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:43271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8883":{"id":"2:8883","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8884","2:8885","2:8886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:153":{"id":"0:153","crate_id":0,"name":"to_arg_value","span":{"filename":"src/derive.rs","begin":[309,4],"end":[309,55]},"visibility":"default","docs":"The canonical argument value.\n\nThe value is `None` for skipped variants.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:3089":{"id":"2:3089","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3091","2:3092"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3740":{"id":"0:3740","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3507":{"id":"0:3507","crate_id":0,"name":"NoEquals","span":{"filename":"src/parse/errors.rs","begin":[143,4],"end":[143,12]},"visibility":"default","docs":"Occurs when the user doesn't use equals for an option that requres equal\nsign to provide values.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .setting(ArgSettings::TakesValue)\n         .setting(ArgSettings::RequireEquals)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color\", \"red\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::NoEquals);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:941":{"id":"0:941","crate_id":0,"name":"value_name","span":{"filename":"src/build/arg/mod.rs","begin":[2736,4],"end":[2738,5]},"visibility":"public","docs":"Specifies the name for value of [option] or [positional] arguments inside of help\ndocumentation. This name is cosmetic only, the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"cfg\")\n    .long(\"config\")\n    .value_name(\"FILE\")\n# ;\n```\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .long(\"config\")\n        .value_name(\"FILE\")\n        .about(\"Some help text\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    --config <FILE>     Some help text\n    -h, --help          Print help information\n    -V, --version       Print version information\n```\n[option]: Arg::takes_value()\n[positional]: Arg::index()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::takes_value()":"0:3323","Arg::index()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1059":{"id":"0:1059","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/build/arg_group.rs","begin":[417,4],"end":[422,5]},"visibility":"public","docs":"Sets the exclusion rules of this group. Exclusion rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.\n\n**NOTE:** The names provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-v\"]);\n// because we used an arg from the group, and the group conflicts with either \"-v\" or \"-d\"\n// it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::ArgumentConflict);\n```\n\n[argument exclusion rules]: crate::Arg::conflicts_with_all()","links":{"crate::Arg::conflicts_with_all()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3549":{"id":"b:2:2620-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1006":{"id":"0:1006","crate_id":0,"name":"from","span":{"filename":"src/build/arg/mod.rs","begin":[5066,4],"end":[5068,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2614":{"id":"2:2614","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2616"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:7466-0:3597":{"id":"b:2:7466-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:7468","2:7469","2:7470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:520":{"id":"0:520","crate_id":0,"name":"get_matches_mut","span":{"filename":"src/build/app/mod.rs","begin":[2028,4],"end":[2048,5]},"visibility":"public","docs":"Starts the parsing process, just like [`App::get_matches`] but doesn't consume the `App`.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet mut app = App::new(\"myprog\")\n    // Args and options go here...\n    ;\nlet matches = app.get_matches_mut();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::get_matches`]: App::get_matches()","links":{"App::get_matches()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3389":{"id":"0:3389","crate_id":0,"name":"ne","span":{"filename":"src/build/arg_group.rs","begin":[78,25],"end":[78,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1042":{"id":"0:1042","crate_id":0,"name":"new","span":{"filename":"src/build/arg_group.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\nget values from the group or refer to the group inside of conflict and requirement rules.\n\n# Examples\n\n```rust\n# use clap::{App, ArgGroup};\nArgGroup::new(\"config\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:852":{"id":"0:852","crate_id":0,"name":"visible_alias","span":{"filename":"src/build/arg/mod.rs","begin":[577,4],"end":[580,5]},"visibility":"public","docs":"Allows adding a [`Arg`] alias that functions exactly like those defined with\n[`Arg::alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .visible_alias(\"something-awesome\")\n                .long(\"test\")\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--something-awesome\", \"coffee\"\n        ]);\nassert!(m.is_present(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```\n[`App::alias`]: Arg::alias()","links":{"`Arg::alias`":"0:3323","`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3501":{"id":"2:3501","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:362":{"id":"0:362","crate_id":0,"name":"get_long_flag","span":{"filename":"src/build/app/mod.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Get the long flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3728":{"id":"a:2:3024-0:3728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:465":{"id":"0:465","crate_id":0,"name":"color","span":{"filename":"src/build/app/mod.rs","begin":[1024,4],"end":[1027,5]},"visibility":"public","docs":"Sets the behaviour of colored output during runtime.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n**NOTE:** Default behaviour is [`ColorChoice::Auto`].\n\n# Examples\n\n```no_run\n# use clap::{App, ColorChoice};\nApp::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```\n[`ColorChoice::Auto`]: crate::ColorChoice::Auto","links":{"crate::ColorChoice::Auto":"0:3728"},"attrs":["#[cfg(feature = \"color\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["color",{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:2341":{"id":"1:2341","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2342","1:2344","1:2345","1:2346"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3135":{"id":"2:3135","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137","2:3138"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[128,0],"end":[317,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":"Getters","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:813","0:814","0:815","0:816","0:817","0:818","0:820","0:821","0:822","0:824","0:825","0:826","0:827","0:828","0:829","0:830","0:831","0:833","0:834"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3256":{"id":"2:3256","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3258","2:3259"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:1046":{"id":"0:1046","crate_id":0,"name":"name","span":{"filename":"src/build/arg_group.rs","begin":[133,4],"end":[137,5]},"visibility":"public","docs":"Sets the group name.\n\n# Examples\n\n```rust\n# use clap::{App, ArgGroup};\nArgGroup::default().name(\"config\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:11931":{"id":"2:11931","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11932","2:11933"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:422":{"id":"0:422","crate_id":0,"name":"bin_name","span":{"filename":"src/build/app/mod.rs","begin":[437,4],"end":[440,5]},"visibility":"public","docs":"Overrides the runtime-determined name of the binary. This should only be\nused when absolutely necessary, such as when the binary name for your\napplication is misleading, or perhaps *not* how the user should invoke\nyour program.\n\nNormally, the binary name is used in help and error messages. `clap`\nautomatically determines the binary name at runtime, however by manually\nsetting the binary name, one can effectively override what will be\ndisplayed in the help or error messages.\n\n**Pro-tip:** When building things such as third party `cargo`\nsubcommands, this setting **should** be used!\n\n**NOTE:** This *does not* change or set the name of the binary file on\ndisk. It only changes what clap thinks the name is for the purposes of\nerror or help messages.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"My Program\")\n     .bin_name(\"my_binary\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:974":{"id":"0:974","crate_id":0,"name":"use_delimiter","span":{"filename":"src/build/arg/mod.rs","begin":[4086,4],"end":[4097,5]},"visibility":"public","docs":"Specifies that an argument should allow grouping of multiple values via a\ndelimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)\n\n**NOTE:** When this setting is used, it will default [`Arg::value_delimiter`]\nto the comma `,`.\n\n**NOTE:** Implicitly sets [`ArgSettings::TakesValue`]\n\n# Examples\n\nThe following example shows the default behavior.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet delims = App::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .setting(ArgSettings::UseValueDelimiter)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(delims.is_present(\"option\"));\nassert_eq!(delims.occurrences_of(\"option\"), 1);\nassert_eq!(delims.values_of(\"option\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\nThe next example shows the difference when turning delimiters off. This is the default\nbehavior\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet nodelims = App::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .setting(ArgSettings::TakesValue))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(nodelims.is_present(\"option\"));\nassert_eq!(nodelims.occurrences_of(\"option\"), 1);\nassert_eq!(nodelims.value_of(\"option\").unwrap(), \"val1,val2,val3\");\n```\n[`Arg::value_delimiter`]: Arg::value_delimiter()","links":{"`ArgSettings::TakesValue`":"0:3220","Arg::value_delimiter()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1822":{"id":"0:1822","crate_id":0,"name":"values_of_t_or_exit","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[522,4],"end":[528,5]},"visibility":"public","docs":"Gets the typed values of a specific argument (i.e. an argument that takes multiple\nvalues at runtime) and then converts them into the result type using [`std::str::FromStr`].\n\nIf parsing (of any value) has failed, exits the program.\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```\n# extern crate clap;\n# use clap::App;\nlet matches = App::new(\"myapp\")\n              .arg(\"[length]... 'A sequence of integers because integers are neat!'\")\n              .get_matches_from(&[\"test\", \"12\", \"77\", \"40\"]);\n\n// Specify the type explicitly (or use turbofish)\nlet len: Vec<u32> = matches.values_of_t_or_exit(\"length\");\nassert_eq!(len, vec![12, 77, 40]);\n\n// You can often leave the type for rustc to figure out\nlet also_len = matches.values_of_t_or_exit(\"length\");\n// Something that expects Vec<u32>\nlet _: Vec<u32> = also_len;\n```\n\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html","links":{"`std::str::FromStr`":"2:11931","crate::ArgSettings::AllowInvalidUtf8":"0:3220"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3587":{"id":"0:3587","crate_id":0,"name":"fmt","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3280":{"id":"0:3280","crate_id":0,"name":"DirPath","span":{"filename":"src/build/arg/value_hint.rs","begin":[37,4],"end":[37,11]},"visibility":"default","docs":"Path to a directory.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3544":{"id":"0:3544","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[25,22],"end":[25,27]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3545"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2975":{"id":"0:2975","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,32],"end":[27,41]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:831":{"id":"0:831","crate_id":0,"name":"get_env","span":{"filename":"src/build/arg/mod.rs","begin":[285,4],"end":[287,5]},"visibility":"public","docs":"Get the environment variable name specified for this argument, if any\n\n# Examples\n\n```rust\n# use std::ffi::OsStr;\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").env(\"ENVIRONMENT\");\nassert_eq!(Some(OsStr::new(\"ENVIRONMENT\")), arg.get_env());\n```","links":{},"attrs":["#[cfg(feature = \"env\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2827":{"id":"0:2827","crate_id":0,"name":"ArgRequiredElseHelp","span":{"filename":"src/build/app/settings.rs","begin":[425,4],"end":[425,23]},"visibility":"default","docs":"Specifies that the help text should be displayed (and then exit gracefully),\nif no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.\n\n**NOTE:** [`subcommands`] count as arguments\n\n**NOTE:** Setting [`Arg::default_value`] effectively disables this option as it will\nensure that some argument is always present.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::ArgRequiredElseHelp);\n```\n\n[`subcommands`]: crate::App::subcommand()\n[`Arg::default_value`]: crate::Arg::default_value()","links":{"crate::App::subcommand()":"0:2889","crate::Arg::default_value()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:7910":{"id":"2:7910","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3126":{"id":"2:3126","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3128"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"25:28":{"id":"25:28","crate_id":25,"name":"equivalent","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[24,4],"end":[24,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3304":{"id":"0:3304","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[25,33],"end":[25,38]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3305"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8360-0:3610":{"id":"a:2:8360-0:3610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:965":{"id":"0:965","crate_id":0,"name":"takes_value","span":{"filename":"src/build/arg/mod.rs","begin":[3590,4],"end":[3596,5]},"visibility":"public","docs":"Specifies that the argument takes a value at run time.\n\n**NOTE:** values for arguments may be specified in any of the following methods\n\n* Using a space such as `-o value` or `--option value`\n* Using an equals and no space such as `-o=value` or `--option=value`\n* Use a short and no space such as `-ovalue`\n\n**NOTE:** By default, args which allow [multiple values] are delimited by commas, meaning\n`--option=val1,val2,val3` is three values for the `--option` argument. If you wish to\nchange the delimiter to another character you can use [`Arg::value_delimiter(char)`],\nalternatively you can turn delimiting values **OFF** by using\n[`Arg::unset_setting(ArgSettings::UseValueDelimiter)`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::TakesValue)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .setting(ArgSettings::TakesValue))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\n\nassert!(m.is_present(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\"));\n```\n[`Arg::value_delimiter(char)`]: Arg::value_delimiter()\n[`Arg::unset_setting(ArgSettings::UseValueDelimiter)`]: ArgSettings::UseValueDelimiter\n[multiple values]: ArgSettings::MultipleValues","links":{"ArgSettings::MultipleValues":"0:3220","Arg::value_delimiter()":"0:3323","ArgSettings::UseValueDelimiter":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["tv",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3100":{"id":"2:3100","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3102","2:3103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3747":{"id":"0:3747","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[69,9],"end":[69,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3748"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1849":{"id":"0:1849","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1019,0],"end":[1019,44]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:7531","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9407":{"id":"2:9407","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9408"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:5:658-0:3583":{"id":"b:5:658-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3288":{"id":"0:3288","crate_id":0,"name":"CommandWithArguments","span":{"filename":"src/build/arg/value_hint.rs","begin":[54,4],"end":[54,24]},"visibility":"default","docs":"Capture the remaining arguments as a command name and arguments for that command. This is\ncommon when writing shell wrappers that execute anther command, for example `sudo` or `env`.\n\nThis hint is special, the argument must be a positional argument and have\n[`.multiple_values(true)`] and App must use [`AppSettings::TrailingVarArg`]. The result is that the\ncommand line `my_app ls -la /` will be parsed as `[\"ls\", \"-la\", \"/\"]` and clap won't try to\nparse the `-la` argument itself.\n\n[`AppSettings::TrailingVarArg`]: crate::AppSettings::TrailingVarArg\n[`.multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:3323","crate::AppSettings::TrailingVarArg":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3735":{"id":"0:3735","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3736"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:679":{"id":"0:679","crate_id":0,"name":"is_hidden","span":{"filename":"src/build/arg/arg_value.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Should the value be hidden from help messages and completion","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:989":{"id":"0:989","crate_id":0,"name":"set","span":{"filename":"src/build/arg/mod.rs","begin":[4765,4],"end":[4767,5]},"visibility":"public","docs":"Deprecated, see [`Arg::setting`]","links":{"`Arg::setting`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::setting`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::setting`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:990":{"id":"0:990","crate_id":0,"name":"unset_setting","span":{"filename":"src/build/arg/mod.rs","begin":[4790,4],"end":[4796,5]},"visibility":"public","docs":"Disables a single setting for the current (this `Arg` instance) argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required)\n    .unset_setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:692":{"id":"0:692","crate_id":0,"name":"aliases","span":{"filename":"src/build/arg/arg_value.rs","begin":[198,4],"end":[204,5]},"visibility":"public","docs":"Sets multiple aliases for this argument value.\n\nThe aliases will be hidden from completion and help texts.\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nArgValue::new(\"slow\")\n    .aliases([\"not-fast\", \"snake-like\"])\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:2960":{"id":"b:2:2620-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2619":{"id":"2:2619","crate_id":2,"name":"borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2971":{"id":"0:2971","crate_id":0,"name":"default","span":{"filename":"src/build/arg/arg_value.rs","begin":[27,16],"end":[27,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5153":{"id":"5:5153","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5155","5:5156"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:3523":{"id":"0:3523","crate_id":0,"name":"MissingSubcommand","span":{"filename":"src/parse/errors.rs","begin":[296,4],"end":[296,21]},"visibility":"default","docs":"Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\nbut the user does not provide one.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings, ErrorKind};\nlet err = App::new(\"prog\")\n    .setting(AppSettings::SubcommandRequired)\n    .subcommand(App::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind, ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`AppSettings::SubcommandRequired`]: crate::AppSettings::SubcommandRequired","links":{"crate::AppSettings::SubcommandRequired":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:159":{"id":"0:159","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[321,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"It","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"It"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:844":{"id":"0:844","crate_id":0,"name":"long","span":{"filename":"src/build/arg/mod.rs","begin":[448,4],"end":[451,5]},"visibility":"public","docs":"Sets the long version of the argument without the preceding `--`.\n\nBy default `clap` automatically assigns `version` and `help` to the auto-generated\n`version` and `help` arguments respectively. You may use the word `version` or `help` for\nthe long form of your own arguments, in which case `clap` simply will not assign those to\nthe auto-generated `version` or `help` arguments.\n\n**NOTE:** Any leading `-` characters will be stripped\n\n# Examples\n\nTo set `long` use a word containing valid UTF-8 codepoints. If you supply a double leading\n`--` such as `--config` they will be stripped. Hyphens in the middle of the word, however,\nwill *not* be stripped (i.e. `config-file` is allowed)\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"cfg\")\n    .long(\"config\")\n# ;\n```\n\nSetting `long` allows using the argument via a double hyphen (`--`) such as `--config`\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\"))\n    .get_matches_from(vec![\n        \"prog\", \"--config\"\n    ]);\n\nassert!(m.is_present(\"cfg\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["l",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3220":{"id":"b:2:2941-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12372":{"id":"2:12372","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:3601":{"id":"0:3601","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[995,9],"end":[995,14]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:3603"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2941-0:2889":{"id":"b:2:2941-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2806":{"id":"0:2806","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BitOr","id":"2:3140","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2807","0:2808"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:489":{"id":"0:489","crate_id":0,"name":"visible_aliases","span":{"filename":"src/build/app/mod.rs","begin":[1430,4],"end":[1433,5]},"visibility":"public","docs":"If this `App` instance is a subcommand, this method adds multiple visible\naliases, which allows this subcommand to be accessed via *either* the\noriginal name or any of the given aliases. This is more efficient and easier\nthan creating multiple hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`App::alias`].\n\n**NOTE:** When using aliases, and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n    .subcommand(App::new(\"test\")\n        .visible_aliases(&[\"do-stuff\", \"tests\"]))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: App::alias()","links":{"`ArgMatches`":"0:3583","App::alias()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:818":{"id":"0:818","crate_id":0,"name":"get_visible_short_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[170,4],"end":[182,5]},"visibility":"public","docs":"Get visible short aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:495":{"id":"0:495","crate_id":0,"name":"groups","span":{"filename":"src/build/app/mod.rs","begin":[1650,4],"end":[1659,5]},"visibility":"public","docs":"Adds multiple [`ArgGroup`]s to the [`App`] at once.\n\n# Examples\n\n```no_run\n# use clap::{App, ArgGroup};\nApp::new(\"app\")\n    .arg(\"--set-ver [ver] 'set the version manually'\")\n    .arg(\"--major         'auto increase major'\")\n    .arg(\"--minor         'auto increase minor'\")\n    .arg(\"--patch         'auto increase patch'\")\n    .arg(\"-c [FILE]       'a config file'\")\n    .arg(\"-i [IFACE]      'an interface'\")\n    .groups(&[\n        ArgGroup::new(\"vers\")\n            .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n            .required(true),\n        ArgGroup::new(\"input\")\n            .args(&[\"c\", \"i\"])\n    ])\n# ;\n```","links":{"`ArgGroup`":"0:3369","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["groups",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1895":{"id":"0:1895","crate_id":0,"name":"next_back","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1163,4],"end":[1165,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:7466-0:3610":{"id":"b:2:7466-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:7468","2:7469","2:7470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:2821":{"id":"0:2821","crate_id":0,"name":"AllowMissingPositional","span":{"filename":"src/build/app/settings.rs","begin":[345,4],"end":[345,26]},"visibility":"default","docs":"Allows one to implement two styles of CLIs where positionals can be used out of order.\n\nThe first example is a CLI where the second to last positional argument is optional, but\nthe final positional argument is required. Such as `$ prog [optional] <required>` where one\nof the two following usages is allowed:\n\n* `$ prog [optional] <required>`\n* `$ prog <required>`\n\nThis would otherwise not be allowed. This is useful when `[optional]` has a default value.\n\n**Note:** when using this style of \"missing positionals\" the final positional *must* be\n[required] if `--` will not be used to skip to the final positional argument.\n\n**Note:** This style also only allows a single positional argument to be \"skipped\" without\nthe use of `--`. To skip more than one, see the second example.\n\nThe second example is when one wants to skip multiple optional positional arguments, and use\nof the `--` operator is OK (but not required if all arguments will be specified anyways).\n\nFor example, imagine a CLI which has three positional arguments `[foo] [bar] [baz]...` where\n`baz` accepts multiple values (similar to man `ARGS...` style training arguments).\n\nWith this setting the following invocations are posisble:\n\n* `$ prog foo bar baz1 baz2 baz3`\n* `$ prog foo -- baz1 baz2 baz3`\n* `$ prog -- baz1 baz2 baz3`\n\n# Examples\n\nStyle number one from above:\n\n```rust\n# use clap::{App, Arg, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowMissingPositional)\n    .arg(Arg::new(\"arg1\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), None);\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nNow the same example, but using a default value for the first optional positional argument\n\n```rust\n# use clap::{App, Arg, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowMissingPositional)\n    .arg(Arg::new(\"arg1\")\n        .default_value(\"something\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), Some(\"something\"));\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nStyle number two from above:\n\n```rust\n# use clap::{App, Arg, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowMissingPositional)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"foo\", \"bar\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), Some(\"foo\"));\nassert_eq!(m.value_of(\"bar\"), Some(\"bar\"));\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\nNow nofice if we don't specify `foo` or `baz` but use the `--` operator.\n\n```rust\n# use clap::{App, Arg, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowMissingPositional)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"--\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), None);\nassert_eq!(m.value_of(\"bar\"), None);\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\n[required]: crate::Arg::required()","links":{"crate::Arg::required()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3012-0:3597":{"id":"a:2:3012-0:3597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3583":{"id":"0:3583","crate_id":0,"name":"ArgMatches","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"Used to get information about the arguments that were supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`App::get_matches`] family of\nmethods.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet matches = App::new(\"MyApp\")\n    .arg(Arg::new(\"out\")\n        .long(\"output\")\n        .required(true)\n        .takes_value(true))\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .multiple_occurrences(true))\n    .arg(Arg::new(\"cfg\")\n        .short('c')\n        .takes_value(true))\n    .get_matches(); // builds the instance of ArgMatches\n\n// to get information about the \"cfg\" argument we created, such as the value supplied we use\n// various ArgMatches methods, such as ArgMatches::value_of\nif let Some(c) = matches.value_of(\"cfg\") {\n    println!(\"Value for -c: {}\", c);\n}\n\n// The ArgMatches::value_of method returns an Option because the user may not have supplied\n// that argument at runtime. But if we specified that the argument was \"required\" as we did\n// with the \"out\" argument, we can safely unwrap because `clap` verifies that was actually\n// used at runtime.\nprintln!(\"Value for --output: {}\", matches.value_of(\"out\").unwrap());\n\n// You can check the presence of an argument\nif matches.is_present(\"out\") {\n    // Another way to check if an argument was present, or if it occurred multiple times is to\n    // use occurrences_of() which returns 0 if an argument isn't found at runtime, or the\n    // number of times that it occurred, if it was. To allow an argument to appear more than\n    // once, you must use the .multiple_occurrences(true) method, otherwise it will only return 1 or 0.\n    if matches.occurrences_of(\"debug\") > 2 {\n        println!(\"Debug mode is REALLY on, don't be crazy\");\n    } else {\n        println!(\"Debug mode kind of on\");\n    }\n}\n```\n[`App::get_matches`]: crate::App::get_matches()","links":{"crate::App::get_matches()":"0:2889"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1785","a:2:3012-0:3583","a:2:3024-0:3583","a:2:3053-0:3583","a:2:8360-0:3583","a:2:8361-0:3583","b:2:2945-0:3583","b:2:2941-0:3583","b:5:658-0:3583","b:2:2956-0:3583","b:2:2951-0:3583","b:2:2617-0:3583","b:2:2620-0:3583","b:2:3675-0:3583","b:25:25-0:3583","0:3588","0:1783","0:3595","0:3591","0:3586","0:3590","0:3594"]}},"1:5485":{"id":"1:5485","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5486","1:5487","1:5488","1:5489","1:5490","1:5491","1:5492","1:5493","1:5494","1:5495","1:5496","1:5497","1:5498","1:5499","1:5500","1:5501"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:25:25-0:3728":{"id":"b:25:25-0:3728","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"5:5420":{"id":"5:5420","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3323":{"id":"b:2:2941-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12394":{"id":"2:12394","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3369":{"id":"a:2:8361-0:3369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:22229":{"id":"2:22229","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8360-0:3271":{"id":"a:2:8360-0:3271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3673":{"id":"2:3673","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"b:2:2951-0:3220":{"id":"b:2:2951-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2857":{"id":"0:2857","crate_id":0,"name":"NoBinaryName","span":{"filename":"src/build/app/settings.rs","begin":[834,4],"end":[834,16]},"visibility":"default","docs":"Specifies that the parser should not assume the first argument passed is the binary name.\nThis is normally the case when using a \"daemon\" style mode, or an interactive CLI where\none would not normally type the binary or program name for each command.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::NoBinaryName)\n    .arg(Arg::from(\"<cmd>... 'commands to run'\"))\n    .get_matches_from(vec![\"command\", \"set\"]);\n\nlet cmds: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(cmds, [\"command\", \"set\"]);\n```\n[`try_get_matches_from_mut`]: crate::App::try_get_matches_from_mut()","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3053-0:3549":{"id":"a:2:3053-0:3549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:148":{"id":"0:148","crate_id":0,"name":"value_variants","span":{"filename":"src/derive.rs","begin":[291,4],"end":[291,42]},"visibility":"default","docs":"All possible argument values, in display order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"b:2:3675-0:3369":{"id":"b:2:3675-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1014":{"id":"0:1014","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5145,0],"end":[5167,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1016"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:821":{"id":"0:821","crate_id":0,"name":"get_long","span":{"filename":"src/build/arg/mod.rs","begin":[199,4],"end":[201,5]},"visibility":"public","docs":"Get the long option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3247":{"id":"2:3247","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3156":{"id":"2:3156","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158","2:3159"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3053-0:3583":{"id":"a:2:3053-0:3583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5401":{"id":"5:5401","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":"mut_arg","span":{"filename":"src/build/app/mod.rs","begin":[1782,4],"end":[1802,5]},"visibility":"public","docs":"Allows one to mutate an [`Arg`] after it's been added to an [`App`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\n\nlet mut app = App::new(\"foo\")\n    .arg(Arg::new(\"bar\")\n        .short('b'))\n    .mut_arg(\"bar\", |a| a.short('B'));\n\nlet res = app.try_get_matches_from_mut(vec![\"foo\", \"-b\"]);\n\n// Since we changed `bar`'s short to \"B\" this should err as there\n// is no `-b` anymore, only `-B`\n\nassert!(res.is_err());\n\nlet res = app.try_get_matches_from_mut(vec![\"foo\", \"-B\"]);\nassert!(res.is_ok());\n```","links":{"`Arg`":"0:3323","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3256","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3748":{"id":"0:3748","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[69,9],"end":[69,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3174":{"id":"2:3174","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3588":{"id":"0:3588","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,16],"end":[75,21]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3589"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3053-0:3323":{"id":"a:2:3053-0:3323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3217":{"id":"0:3217","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3218","0:3219"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:428":{"id":"0:428","crate_id":0,"name":"name","span":{"filename":"src/build/app/mod.rs","begin":[523,4],"end":[526,5]},"visibility":"public","docs":"(Re)Sets the program's name. This will be displayed when displaying help\nor version messages.\n\n**Pro-tip:** This function is particularly useful when configuring a\nprogram via `App::from(yaml)` in conjunction with the [`crate_name!`]\nmacro to derive the program's name from its `Cargo.toml`.\n\n# Examples\n\n```ignore\n# use clap::{App, load_yaml};\nlet yaml = load_yaml!(\"app.yaml\");\nlet app = App::from(yaml)\n    .name(crate_name!());\n\n// continued logic goes here, such as `app.get_matches()` etc.\n```\n","links":{"`crate_name!`":"0:90"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:459":{"id":"0:459","crate_id":0,"name":"setting","span":{"filename":"src/build/app/mod.rs","begin":[924,4],"end":[930,5]},"visibility":"public","docs":"Enables a single settings for the current (this `App` instance) command or subcommand.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired)\n    .setting(AppSettings::WaitOnError)\n# ;\n```\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired | AppSettings::WaitOnError)\n# ;\n```","links":{"`AppSettings`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:2776","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3301":{"id":"0:3301","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[25,16],"end":[25,25]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3302"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:412":{"id":"0:412","crate_id":0,"name":"has_subcommands","span":{"filename":"src/build/app/mod.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Returns `true` if this `App` has subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6532":{"id":"1:6532","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6533","1:6534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:3539":{"id":"0:3539","crate_id":0,"name":"Format","span":{"filename":"src/parse/errors.rs","begin":[422,4],"end":[422,10]},"visibility":"default","docs":"Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n\n[`Display`]: std::fmt::Display\n[Format error]: std::fmt::Error","links":{"std::fmt::Display":"2:9397","std::fmt::Error":"2:45573"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:141":{"id":"0:141","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[216,4],"end":[216,45]},"visibility":"default","docs":"Append to [`App`] so it can instantiate `Self`.\n\nSee also [`IntoApp`].","links":{"`IntoApp`":"0:132","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:3106":{"id":"2:3106","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3107","2:3108"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:1843":{"id":"0:1843","crate_id":0,"name":"Item","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1003,4],"end":[1003,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:3675-0:3616":{"id":"b:2:3675-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3012-0:3583":{"id":"a:2:3012-0:3583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:729":{"id":"0:729","crate_id":0,"name":"Err","span":{"filename":"src/build/arg/value_hint.rs","begin":[73,4],"end":[73,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:946":{"id":"0:946","crate_id":0,"name":"default_values_os","span":{"filename":"src/build/arg/mod.rs","begin":[2833,4],"end":[2836,5]},"visibility":"public","docs":"Provides default values in the exact same manner as [`Arg::default_values`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_values`]: Arg::default_values()\n[`OsStr`]: std::ffi::OsStr","links":{"std::ffi::OsStr":"1:2786","Arg::default_values()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2617-0:3583":{"id":"b:2:2617-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2956-0:3496":{"id":"b:2:2956-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174":{"id":"0:174","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[353,4],"end":[355,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3746":{"id":"0:3746","crate_id":0,"name":"SubCommand","span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,24]},"visibility":"public","docs":"Deprecated, see [`App`]","links":{"`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:2474","a:2:3012-0:3746","a:2:3024-0:3746","a:2:3053-0:3746","a:2:8360-0:3746","a:2:8361-0:3746","b:2:2945-0:3746","b:2:2941-0:3746","b:5:658-0:3746","b:2:2956-0:3746","b:2:2951-0:3746","b:2:2617-0:3746","b:2:2620-0:3746","b:2:3675-0:3746","0:3750","0:3749","0:3747"]}},"0:984":{"id":"0:984","crate_id":0,"name":"hidden_short_help","span":{"filename":"src/build/arg/mod.rs","begin":[4640,4],"end":[4646,5]},"visibility":"public","docs":"Hides an argument from short help message output.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"debug\")\n    .hidden_short_help(true);\n```\n\nSetting `hidden_short_help(true)` will hide the argument when displaying short help text\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hidden_short_help(true)\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when --help is called\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hidden_short_help(true)\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2617-0:2812":{"id":"b:2:2617-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3024-0:3597":{"id":"a:2:3024-0:3597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:469":{"id":"0:469","crate_id":0,"name":"arg","span":{"filename":"src/build/app/mod.rs","begin":[1118,4],"end":[1123,5]},"visibility":"public","docs":"Adds an [argument] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    // Adding a single \"flag\" argument with a short and help text, using Arg::new()\n    .arg(\n        Arg::new(\"debug\")\n           .short('d')\n           .about(\"turns on debugging mode\")\n    )\n    // Adding a single \"option\" argument with a short, a long, and help text using the less\n    // verbose Arg::from()\n    .arg(\n        Arg::from(\"-c --config=[CONFIG] 'Optionally sets a config file to use'\")\n    )\n# ;\n```\n[argument]: Arg","links":{"Arg":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:517":{"id":"0:517","crate_id":0,"name":"render_long_version","span":{"filename":"src/build/app/mod.rs","begin":[1971,4],"end":[1973,5]},"visibility":"public","docs":"Returns the version message rendered as if the user ran `--version`.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" version messages\ndepending on if the user ran [`-V` (short)] or [`--version` (long)].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::App;\nuse std::io;\nlet app = App::new(\"myprog\");\nprintln!(\"{}\", app.render_long_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: App::version()\n[`--version` (long)]: App::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"App::long_version()":"0:2889","App::version()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:396":{"id":"0:396","crate_id":0,"name":"get_positionals","span":{"filename":"src/build/app/mod.rs","begin":[219,4],"end":[221,5]},"visibility":"public","docs":"Iterate through the *positionals* arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:158":{"id":"0:158","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[317,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:384":{"id":"0:384","crate_id":0,"name":"get_all_short_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[189,4],"end":[191,5]},"visibility":"public","docs":"Iterate through the set of *all* the short aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"primitive","inner":"char"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3220":{"id":"a:2:3024-0:3220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:943":{"id":"0:943","crate_id":0,"name":"default_value_os","span":{"filename":"src/build/arg/mod.rs","begin":[2814,4],"end":[2816,5]},"visibility":"public","docs":"Provides a default value in the exact same manner as [`Arg::default_value`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_value`]: Arg::default_value()\n[`OsStr`]: std::ffi::OsStr","links":{"std::ffi::OsStr":"1:2786","Arg::default_value()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3746":{"id":"b:2:2941-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3515":{"id":"0:3515","crate_id":0,"name":"TooManyOccurrences","span":{"filename":"src/parse/errors.rs","begin":[219,4],"end":[219,22]},"visibility":"default","docs":"Occurs when a user provides more occurrences for an argument than were defined by setting\n[`Arg::max_occurrences`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .short('v')\n        .max_occurrences(2))\n    .try_get_matches_from(vec![\"prog\", \"-vvv\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::TooManyOccurrences);\n```\n[`Arg::max_occurrences`]: Arg::max_occurrences()","links":{"Arg::max_occurrences()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3243":{"id":"0:3243","crate_id":0,"name":"RequireEquals","span":{"filename":"src/build/arg/settings.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":"Requires that an equals be used to provide a value to an option such as `--option=value`","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12408":{"id":"2:12408","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:872":{"id":"0:872","crate_id":0,"name":"required_unless_present_any","span":{"filename":"src/build/arg/mod.rs","begin":[1012,4],"end":[1019,5]},"visibility":"public","docs":"Sets this arg as [required] unless *any* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *one or more* of the `unless` arguments.\n\n**NOTE:** If you wish for this argument to be required unless *all of* these args are\npresent see [`Arg::required_unless_present_all`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_any(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nSetting [`Arg::required_unless_present_any(names)`] requires that the argument be used at runtime\n*unless* *at least one of* the args in `names` are present. In the following example, the\nrequired argument is *not* provided, but it's not an error because one the `unless` args\nhave been supplied.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_any(names)`] and *not* supplying *at least one of* `names`\nor this arg is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any(names)`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all`]: Arg::required_unless_present_all()","links":{"Arg::required()":"0:3323","Arg::required_unless_present_any()":"0:3323","Arg::required_unless_present_all()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3733":{"id":"0:3733","crate_id":0,"name":"Never","span":{"filename":"src/util/color.rs","begin":[55,4],"end":[55,9]},"visibility":"default","docs":"Disables colored output no matter if the output is going to a terminal/TTY, or not.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms)\n\n# Examples\n\n ```no_run\n# use clap::{App, ColorChoice};\nApp::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2699":{"id":"2:2699","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2700","2:2701","2:2702","2:2703"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2710","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7468":{"id":"2:7468","crate_id":2,"name":"Item","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Item","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:468":{"id":"0:468","crate_id":0,"name":"max_term_width","span":{"filename":"src/build/app/mod.rs","begin":[1092,4],"end":[1095,5]},"visibility":"public","docs":"Sets the maximum terminal width at which to wrap help messages. Using `0`\nwill ignore terminal widths and use source formatting.\n\n`clap` automatically tries to determine the terminal width on Unix,\nLinux, OSX and Windows if the `wrap_help` cargo \"feature\" has been\nenabled at compile time, but one might want to limit the size to some\nmaximum (e.g. when the terminal is running fullscreen).\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n**NOTE:** This setting must be set **before** any subcommands are added!\n\n# Platform Specific\n\nOnly Unix, Linux, OSX and Windows support automatic determination of terminal width.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .max_term_width(100)\n# ;\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["w",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1023":{"id":"0:1023","crate_id":0,"name":"cmp","span":{"filename":"src/build/arg/mod.rs","begin":[5176,4],"end":[5178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:34877","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"27:20":{"id":"27:20","crate_id":27,"name":"WordSeparator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["27:21"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WordSeparatorClone","id":"27:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:7481":{"id":"1:7481","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7482"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2951-0:3496":{"id":"b:2:2951-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:368":{"id":"0:368","crate_id":0,"name":"get_help_heading","span":{"filename":"src/build/app/mod.rs","begin":[153,4],"end":[155,5]},"visibility":"public","docs":"Get the custom section heading specified via [`App::help_heading`].\n\n[`App::help_heading`]: App::help_heading()","links":{"App::help_heading()":"0:2889"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1790":{"id":"0:1790","crate_id":0,"name":"value_of_os","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[206,4],"end":[210,5]},"visibility":"public","docs":"Gets the OS version of a string value of a specific argument. If the option wasn't present\nat runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\nregardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\nRust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\nvalue may contain invalid UTF-8 code points.\n\n*NOTE:* Recommend having set [`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n*NOTE:* If getting a value for an option or positional argument that allows multiples,\nprefer [`ArgMatches::values_of_os`] as `Arg::value_of_os` will only return the *first*\nvalue.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`occurrences_of`] can be used to check if a value is present at runtime.\n\n# Examples\n\n ```\n# use clap::{App, Arg};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = App::new(\"utf8\")\n    .arg(Arg::from(\"<arg> 'some arg'\")\n        .allow_invalid_utf8(true))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(&*m.value_of_os(\"arg\").unwrap().as_bytes(), [b'H', b'i', b' ', 0xe9, b'!']);\n```\n[`default_value`]: crate::Arg::default_value()\n[`occurrences_of`]: ArgMatches::occurrences_of()\n[`ArgMatches::values_of_os`]: ArgMatches::values_of_os()","links":{"crate::ArgSettings::AllowInvalidUtf8":"0:3220","crate::Arg::default_value()":"0:3323","`String`":"5:7606","ArgMatches::values_of_os()":"0:3583","ArgMatches::occurrences_of()":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:492":{"id":"0:492","crate_id":0,"name":"visible_long_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[1471,4],"end":[1476,5]},"visibility":"public","docs":"Allows adding multiple long flag aliases that functions exactly like those defined\nwith [`App::long_flag_aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_aliases`]: App::long_flag_aliases()","links":{"App::long_flag_aliases()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6604":{"id":"1:6604","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6605"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2815":{"id":"0:2815","crate_id":0,"name":"AllowLeadingHyphen","span":{"filename":"src/build/app/settings.rs","begin":[210,4],"end":[210,22]},"visibility":"default","docs":"Specifies that leading hyphens are allowed in all argument *values*, such as negative numbers\nlike `-10`. (which would otherwise be parsed as another flag or option)\n\n**NOTE:** Use this setting with caution as it silences certain circumstances which would\notherwise be an error (such as accidentally forgetting to specify a value for leading\noption). It is preferred to set this on a per argument basis, via [`Arg::allow_hyphen_values`]\n\n# Examples\n\n```rust\n# use clap::{Arg, App, AppSettings};\n// Imagine you needed to represent negative numbers as well, such as -10\nlet m = App::new(\"nums\")\n    .setting(AppSettings::AllowLeadingHyphen)\n    .arg(Arg::new(\"neg\"))\n    .get_matches_from(vec![\n        \"nums\", \"-20\"\n    ]);\n\nassert_eq!(m.value_of(\"neg\"), Some(\"-20\"));\n# ;\n```\n[`Arg::allow_hyphen_values`]: crate::Arg::allow_hyphen_values()","links":{"crate::Arg::allow_hyphen_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2956-0:2960":{"id":"b:2:2956-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3140":{"id":"2:3140","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142","2:3143"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3012-0:3549":{"id":"a:2:3012-0:3549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2941-0:3369":{"id":"b:2:2941-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2968":{"id":"0:2968","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg/arg_value.rs","begin":[27,9],"end":[27,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:488":{"id":"0:488","crate_id":0,"name":"visible_long_flag_alias","span":{"filename":"src/build/app/mod.rs","begin":[1399,4],"end":[1402,5]},"visibility":"public","docs":"Allows adding an alias that functions exactly like those defined with\n[`App::long_flag_alias`], except that they are visible inside the help message.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_alias`]: App::long_flag_alias()","links":{"App::long_flag_alias()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:948":{"id":"0:948","crate_id":0,"name":"default_missing_value_os","span":{"filename":"src/build/arg/mod.rs","begin":[2921,4],"end":[2923,5]},"visibility":"public","docs":"Provides a default value in the exact same manner as [`Arg::default_missing_value`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()\n[`OsStr`]: std::ffi::OsStr","links":{"std::ffi::OsStr":"1:2786","Arg::default_missing_value()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3589":{"id":"0:3589","crate_id":0,"name":"clone","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2960":{"id":"0:2960","crate_id":0,"name":"ArgValue","span":{"filename":"src/build/arg/arg_value.rs","begin":[28,0],"end":[33,1]},"visibility":"public","docs":"The representation of a possible value of an argument.\n\nThis is used for specifying [possible values] of [Args].\n\n**NOTE:** This struct is likely not needed for most usecases as it is only required to\n[hide] single values from help messages and shell completions or to attach [about] to possible values.\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgValue};\nlet cfg = Arg::new(\"config\")\n      .takes_value(true)\n      .value_name(\"FILE\")\n      .possible_value(ArgValue::new(\"fast\"))\n      .possible_value(ArgValue::new(\"slow\").about(\"slower than fast\"))\n      .possible_value(ArgValue::new(\"secret speed\").hidden(true));\n```\n[Args]: crate::Arg\n[possible values]: crate::Arg::possible_value()\n[hide]: ArgValue::hidden()\n[about]: ArgValue::about()","links":{"ArgValue::hidden()":"0:2960","crate::Arg::possible_value()":"0:3323","crate::Arg":"0:3323","ArgValue::about()":"0:2960"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:675","0:686","a:2:3012-0:2960","a:2:3024-0:2960","a:2:3053-0:2960","a:2:8360-0:2960","a:2:8361-0:2960","b:2:2945-0:2960","b:2:2941-0:2960","b:5:658-0:2960","b:2:2956-0:2960","b:2:2951-0:2960","b:2:2617-0:2960","b:2:2620-0:2960","b:2:3675-0:2960","b:25:25-0:2960","0:669","0:672","0:2972","0:2969","0:2983","0:2977","0:2966","0:2975","0:2981"]}},"2:12360":{"id":"2:12360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11466","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12361","2:12362","2:12363","2:12364","2:12365","2:12366","2:12367","2:12368","2:12370","2:12372","2:12374","2:12376","2:12377","2:12378","2:12379","2:12380","2:12381","2:12382","2:12383","2:12384","2:12385","2:12386","2:12387","2:12388","2:12391","2:12394","2:12397","2:12401","2:12405","2:12408","2:12411","2:12414","2:12417","2:12420","2:12423","2:12426","2:12429","2:12432","2:12435","2:12438","2:12441","2:12444","2:12446","2:12448","2:12450","2:12451","2:12452","2:12455","2:12458","2:12461","2:12464","2:12467","2:12470","2:12473","2:12475","2:12476","2:12477","2:12478","2:12479","2:12481","2:12482"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12448":{"id":"2:12448","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2859":{"id":"0:2859","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/build/app/settings.rs","begin":[846,4],"end":[846,16]},"visibility":"default","docs":"Places the help string for all arguments on the line after the argument.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::NextLineHelp)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2474":{"id":"0:2474","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[72,0],"end":[85,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2475"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1848":{"id":"0:1848","crate_id":0,"name":"next_back","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:730":{"id":"0:730","crate_id":0,"name":"from_str","span":{"filename":"src/build/arg/value_hint.rs","begin":[74,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2855":{"id":"0:2855","crate_id":0,"name":"InferLongArgs","span":{"filename":"src/build/app/settings.rs","begin":[815,4],"end":[815,17]},"visibility":"default","docs":"Tries to match unknown args to partial long arguments or their [aliases]. For example, to\nmatch an argument named `--test`, one could use `--t`, `--te`, `--tes`, and `--test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match\n`--te` to `--test` there could not also be another argument or alias `--temp` because both\nstart with `--te`\n\n[aliases]: crate::App::alias()","links":{"crate::App::alias()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3114":{"id":"2:3114","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3116"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12477":{"id":"2:12477","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1018":{"id":"0:1018","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5169,0],"end":[5173,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2710","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1020"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2620-0:2812":{"id":"b:2:2620-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:822":{"id":"0:822","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[205,4],"end":[217,5]},"visibility":"public","docs":"Get visible aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7642":{"id":"2:7642","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7643","2:7644","2:7645","2:7646","2:7648","2:7651","2:7652","2:7653","2:7654","2:7656","2:7658","2:7659","2:7661","2:7664","2:7671","2:7673","2:7676","2:7677","2:7678","2:7680","2:7682","2:7685","2:7686","2:7687","2:7691","2:7694","2:7695","2:7696","2:7698","2:7699","2:7701","2:7711","2:7726","2:7728","2:7732","2:7741","2:7744","2:7746","2:7753","2:7760","2:7767","2:7776","2:7787","2:7794","2:7801","2:7802","2:7803","2:7815","2:7822","2:7834","2:7841","2:7842","2:7847","2:7850","2:7853","2:7854","2:7856","2:7858","2:7861","2:7864","2:7867","2:7870","2:7873","2:7876","2:7878","2:7880","2:7882","2:7884","2:7886","2:7887","2:7895"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:817":{"id":"0:817","crate_id":0,"name":"get_short","span":{"filename":"src/build/arg/mod.rs","begin":[164,4],"end":[166,5]},"visibility":"public","docs":"Get the short option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8360-0:3369":{"id":"a:2:8360-0:3369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:21663":{"id":"2:21663","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:22229","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2617-0:3549":{"id":"b:2:2617-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:92":{"id":"0:92","crate_id":0,"name":"clap_app","span":{"filename":"src/macros.rs","begin":[303,0],"end":[529,1]},"visibility":"public","docs":"Build `App`, `Arg` and `Group` with Usage-string like input\nbut without the associated parsing runtime cost.\n\n`clap_app!` also supports several shorthand syntaxes.\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# fn main() {\nlet matches = clap_app!(myapp =>\n    (version: \"1.0\")\n    (author: \"Kevin K. <kbknapp@gmail.com>\")\n    (about: \"Does awesome things\")\n    (@arg CONFIG: -c --config +takes_value \"Sets a custom config file\")\n    (@arg INPUT: +required \"Sets the input file to use\")\n    (@arg debug: -d ... \"Sets the level of debugging information\")\n    (@group difficulty: +required !multiple\n        (@arg hard: -h --hard \"Sets hard mode\")\n        (@arg normal: -n --normal \"Sets normal mode\")\n        (@arg easy: -e --easy \"Sets easy mode\")\n    )\n    (@subcommand test =>\n        (about: \"controls testing features\")\n        (version: \"1.3\")\n        (author: \"Someone E. <someone_else@other.com>\")\n        (@arg verbose: -v --verbose \"Print test information verbosely\")\n    )\n)\n.get_matches();\n# }\n```\n\n# Shorthand Syntax for Args\n\n* A single hyphen followed by a character (such as `-c`) sets the [`Arg::short`]\n* A double hyphen followed by a character or word (such as `--config`) sets [`Arg::long`]\n* Three dots (`...`) sets [`Arg::multiple_values(true)`]\n* Three dots (`...`) sets [`Arg::multiple_occurrences(true)`]\n* Angled brackets after either a short or long will set [`Arg::value_name`] and\n`Arg::required(true)` such as `--config <FILE>` = `Arg::value_name(\"FILE\")` and\n`Arg::required(true)`\n* Square brackets after either a short or long will set [`Arg::value_name`] and\n`Arg::required(false)` such as `--config [FILE]` = `Arg::value_name(\"FILE\")` and\n`Arg::required(false)`\n* There are short hand syntaxes for Arg methods that accept booleans\n  * A plus sign will set that method to `true` such as `+required` = `Arg::required(true)`\n  * An exclamation will set that method to `false` such as `!required` = `Arg::required(false)`\n* A `#{min, max}` will set [`Arg::min_values(min)`] and [`Arg::max_values(max)`]\n* An asterisk (`*`) will set `Arg::required(true)`\n* Curly brackets around a `fn` will set [`Arg::validator`] as in `{fn}` = `Arg::validator(fn)`\n* An Arg method that accepts a string followed by square brackets will set that method such as\n`conflicts_with[FOO]` will set `Arg::conflicts_with(\"FOO\")` (note the lack of quotes around\n`FOO` in the macro)\n* An Arg method that takes a string and can be set multiple times (such as\n[`Arg::conflicts_with`]) followed by square brackets and a list of values separated by spaces\nwill set that method such as `conflicts_with[FOO BAR BAZ]` will set\n`Arg::conflicts_with(\"FOO\")`, `Arg::conflicts_with(\"BAR\")`, and `Arg::conflicts_with(\"BAZ\")`\n(note the lack of quotes around the values in the macro)\n\n# Shorthand Syntax for Groups\n* Some shorthand syntaxes for `Arg` are also available for `ArgGroup`:\n  * For methods accepting a boolean: `+required` and `!multiple`, etc.\n  * For methods accepting strings: `conflicts_with[FOO]` and `conflicts_with[FOO BAR BAZ]`, etc.\n  * `*` for `ArgGroup::required`\n  * `...` for `ArgGroup::multiple`\n\n# Alternative form for non-ident values\n\nCertain places that normally accept an `ident` also optionally accept an alternative of `(\"expr enclosed by parens\")`\n* `(@arg something: --something)` could also be `(@arg (\"something-else\"): --(\"something-else\"))`\n* `(@subcommand something => ...)` could also be `(@subcommand (\"something-else\") => ...)`\n\nOr it can be even simpler by using the literal directly\n* `(@arg \"something-else\": --\"something-else\")`\n* `(@subcommand \"something-else\" => ...)`\n\n[`Arg::short`]: crate::Arg::short()\n[`Arg::long`]: crate::Arg::long()\n[`Arg::multiple_values(true)`]: crate::Arg::multiple_values()\n[`Arg::multiple_occurrences(true)`]: crate::Arg::multiple_occurrences()\n[`Arg::value_name`]: crate::Arg::value_name()\n[`Arg::min_values(min)`]: crate::Arg::min_values()\n[`Arg::max_values(max)`]: crate::Arg::max_values()\n[`Arg::validator`]: crate::Arg::validator()\n[`Arg::conflicts_with`]: crate::Arg::conflicts_with()","links":{"crate::Arg::min_values()":"0:3323","crate::Arg::short()":"0:3323","crate::Arg::multiple_values()":"0:3323","crate::Arg::validator()":"0:3323","crate::Arg::max_values()":"0:3323","crate::Arg::multiple_occurrences()":"0:3323","crate::Arg::value_name()":"0:3323","crate::Arg::conflicts_with()":"0:3323","crate::Arg::long()":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `App` builder API (with `From::from` for parsing usage) or `Parser` derive API (Issue #2835)\")]","#[macro_export]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App` builder API (with `From::from` for parsing usage) or `Parser` derive API (Issue #2835)"},"kind":"macro","inner":"macro_rules! clap_app {\n    (@ app($builder : expr)) => { ... };\n    (@ app($builder : expr) (@ arg($name : expr) : $($tail : tt) *) $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ arg $name : literal : $($tail : tt) *) $($tt : tt)\n *) => { ... };\n    (@ app($builder : expr) (@ arg $name : ident : $($tail : tt) *) $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ global_setting $setting : ident) $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ setting $setting : ident) $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ attributes $($attr : tt) *) $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ group $name : ident : $($attrs : tt) *) $($tt : tt)\n *) => { ... };\n    (@ app($builder : expr) (@ subcommand($name : expr) => $($tail : tt) *)\n $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ subcommand $name : literal => $($tail : tt) *)\n $($tt : tt) *) => { ... };\n    (@ app($builder : expr) (@ subcommand $name : ident => $($tail : tt) *)\n $($tt : tt) *) => { ... };\n    (@ app($builder : expr) ($ident : ident : $($v : expr), *) $($tt : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr)) => { ... };\n    (@ group($builder : expr, $group : expr) (@ attributes $($attr : tt) *)\n $($tt : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr)\n (@ arg($name : expr) : $($tail : tt) *) $($tt : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr)\n (@ arg $name : literal : $($tail : tt) *) $($tt : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr)\n (@ arg $name : ident : $($tail : tt) *) $($tt : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr)! $ident : ident $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) + $ident : ident $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) * $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) ... $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) $ident : ident\n [$($target : literal) *] $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) $ident : ident [$($target : ident) *]\n $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) $ident : ident($($expr : expr), *)\n $($tail : tt) *) => { ... };\n    (@ group($builder : expr, $group : expr) $ident : ident($($expr : expr,) *)\n $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt) => { ... };\n    (@ arg($arg : expr) $modes : tt - - ($long : expr) $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt - - $long : literal $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt - - $long : ident $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt - ($short : expr) $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt - $short : literal $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt - $short : ident $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) (-) < $var : ident > $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) (+) < $var : ident > $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) (-) [$var : ident] $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) (+) [$var : ident] $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt ... $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt # { $n : expr, $m : expr } $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt * $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt! $ident : ident $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt + $ident : ident $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt { $fn_ : expr } $($tail : tt) *) => { ... };\n    (@ as_expr $expr : expr) => { ... };\n    (@ arg($arg : expr) $modes : tt $desc : tt) => { ... };\n    (@ arg($arg : expr) $modes : tt $ident : ident [$($target : literal) *]\n $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt $ident : ident [$($target : ident) *]\n $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt $ident : ident($($expr : expr), *)\n $($tail : tt) *) => { ... };\n    (@ arg($arg : expr) $modes : tt $ident : ident($($expr : expr,) *)\n $($tail : tt) *) => { ... };\n    (@ subcommand($name : expr) => $($tail : tt) *) => { ... };\n    (@ subcommand $name : literal => $($tail : tt) *) => { ... };\n    (@ subcommand $name : ident => $($tail : tt) *) => { ... };\n    (($name : expr) => $($tail : tt) *) => { ... };\n    ($name : literal => $($tail : tt) *) => { ... };\n    ($name : ident => $($tail : tt) *) => { ... };\n}"},"0:3381":{"id":"0:3381","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,18],"end":[78,23]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3383"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3024":{"id":"2:3024","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12482":{"id":"2:12482","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:46739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2956-0:3728":{"id":"b:2:2956-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:411":{"id":"0:411","crate_id":0,"name":"is_set","span":{"filename":"src/build/app/mod.rs","begin":[315,4],"end":[317,5]},"visibility":"public","docs":"Returns `true` if the given [`AppSettings`] variant is currently set in\nthis `App` (checks both [local] and [global settings]).\n\n[local]: App::setting()\n[global settings]: App::global_setting()","links":{"App::setting()":"0:2889","App::global_setting()":"0:2889","`AppSettings`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3610":{"id":"b:2:2620-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2881":{"id":"0:2881","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[143,9],"end":[143,14]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2882"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2939":{"id":"0:2939","crate_id":0,"name":"eq","span":{"filename":"src/build/app/mod.rs","begin":[64,32],"end":[64,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7917":{"id":"2:7917","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7011","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:3276":{"id":"0:3276","crate_id":0,"name":"AnyPath","span":{"filename":"src/build/arg/value_hint.rs","begin":[33,4],"end":[33,11]},"visibility":"default","docs":"Any existing path.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2617-0:3496":{"id":"b:2:2617-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:861":{"id":"0:861","crate_id":0,"name":"long_help","span":{"filename":"src/build/arg/mod.rs","begin":[791,4],"end":[793,5]},"visibility":"public","docs":"Deprecated, see [`Arg::long_about`]","links":{"`Arg::long_about`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::long_about`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::long_about`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3496":{"id":"b:5:658-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12426":{"id":"2:12426","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3229":{"id":"0:3229","crate_id":0,"name":"Hidden","span":{"filename":"src/build/arg/settings.rs","begin":[93,4],"end":[93,10]},"visibility":"default","docs":"Hides an arg from the help message","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:661":{"id":"5:661","crate_id":5,"name":"to_owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1883":{"id":"0:1883","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1115,0],"end":[1122,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:1884"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1818":{"id":"0:1818","crate_id":0,"name":"values_of_t","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[469,4],"end":[490,5]},"visibility":"public","docs":"Gets the typed values of a specific argument (i.e. an argument that takes multiple\nvalues at runtime) and then converts them into the result type using [`std::str::FromStr`].\n\nIf parsing (of any value) has failed, returns Err.\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```\n# extern crate clap;\n# use clap::App;\nlet matches = App::new(\"myapp\")\n              .arg(\"[length]... 'A sequence of integers because integers are neat!'\")\n              .get_matches_from(&[\"test\", \"12\", \"77\", \"40\"]);\n\n// Specify the type explicitly (or use turbofish)\nlet len: Vec<u32> = matches.values_of_t(\"length\").unwrap_or_else(|e| e.exit());\nassert_eq!(len, vec![12, 77, 40]);\n\n// You can often leave the type for rustc to figure out\nlet also_len = matches.values_of_t(\"length\").unwrap_or_else(|e| e.exit());\n// Something that expects Vec<u32>\nlet _: Vec<u32> = also_len;\n```\n\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html","links":{"`std::str::FromStr`":"2:11931","crate::ArgSettings::AllowInvalidUtf8":"0:3220"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3549":{"id":"a:2:3024-0:3549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2943":{"id":"0:2943","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,43],"end":[64,45]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3610":{"id":"0:3610","crate_id":0,"name":"OsValues","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1090,0],"end":[1093,1]},"visibility":"public","docs":"An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\nmethod. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n[`Values`].\n\n# Examples\n\n ```\n# use clap::{App, Arg};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = App::new(\"utf8\")\n    .arg(Arg::from(\"<arg> 'some arg'\")\n        .allow_invalid_utf8(true))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(&*m.value_of_os(\"arg\").unwrap().as_bytes(), [b'H', b'i', b' ', 0xe9, b'!']);\n```\n[`ArgMatches::values_of_os`]: ArgMatches::values_of_os()","links":{"ArgMatches::values_of_os()":"0:3583","`Values`":"0:3597"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3012-0:3610","a:2:3024-0:3610","a:2:3053-0:3610","a:2:8360-0:3610","a:2:8361-0:3610","b:2:2945-0:3610","b:2:2941-0:3610","b:2:7466-0:3610","b:5:658-0:3610","b:2:2956-0:3610","b:2:2951-0:3610","b:2:2617-0:3610","b:2:2620-0:3610","b:2:3675-0:3610","0:1878","0:1881","0:1873","0:3613","0:1883"]}},"0:3296":{"id":"0:3296","crate_id":0,"name":"EmailAddress","span":{"filename":"src/build/arg/value_hint.rs","begin":[63,4],"end":[63,16]},"visibility":"default","docs":"Email address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3383":{"id":"0:3383","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg_group.rs","begin":[78,18],"end":[78,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3022":{"id":"2:3022","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:826":{"id":"0:826","crate_id":0,"name":"get_value_names","span":{"filename":"src/build/arg/mod.rs","begin":[244,4],"end":[250,5]},"visibility":"public","docs":"Get the names of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:2889":{"id":"a:2:3053-0:2889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3542":{"id":"0:3542","crate_id":0,"name":"fmt","span":{"filename":"src/parse/errors.rs","begin":[25,9],"end":[25,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:3616":{"id":"a:2:8361-0:3616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3255":{"id":"0:3255","crate_id":0,"name":"HiddenShortHelp","span":{"filename":"src/build/arg/settings.rs","begin":[124,4],"end":[124,19]},"visibility":"default","docs":"The argument should **not** be shown in short help text","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:5:658-0:3220":{"id":"b:5:658-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1009":{"id":"0:1009","crate_id":0,"name":"eq","span":{"filename":"src/build/arg/mod.rs","begin":[5072,4],"end":[5074,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:480":{"id":"0:480","crate_id":0,"name":"long_flag_alias","span":{"filename":"src/build/app/mod.rs","begin":[1242,4],"end":[1245,5]},"visibility":"public","docs":"Allows adding an alias, which function as \"hidden\" long flag subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").long_flag(\"test\")\n                .long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:5724-0:2889":{"id":"b:5:5724-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:5722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:5726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2889":{"id":"0:2889","crate_id":0,"name":"App","span":{"filename":"src/build/app/mod.rs","begin":[65,0],"end":[101,1]},"visibility":"public","docs":"Represents a command line interface which is made up of all possible\ncommand line arguments and subcommands. Interface arguments and settings are\nconfigured using the \"builder pattern.\" Once all configuration is complete,\nthe [`App::get_matches`] family of methods starts the runtime-parsing\nprocess. These methods then return information about the user supplied\narguments (or lack thereof).\n\n**NOTE:** There aren't any mandatory \"options\" that one must set. The \"options\" may\nalso appear in any order (so long as one of the [`App::get_matches`] methods is the last method\ncalled).\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet m = App::new(\"My Program\")\n    .author(\"Me, me@mail.com\")\n    .version(\"1.0.2\")\n    .about(\"Explains in brief what the program does\")\n    .arg(\n        Arg::new(\"in_file\").index(1)\n    )\n    .after_help(\"Longer explanation to appear after the options when \\\n                 displaying the help information from --help or -h\")\n    .get_matches();\n\n// Your program logic starts here...\n```\n[`App::get_matches`]: App::get_matches()","links":{"App::get_matches()":"0:2889"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:358","0:416","a:2:3012-0:2889","a:2:3024-0:2889","a:2:3053-0:2889","a:2:8360-0:2889","a:2:8361-0:2889","b:2:2945-0:2889","b:2:2941-0:2889","b:5:658-0:2889","b:5:5724-0:2889","b:2:2956-0:2889","b:2:2951-0:2889","b:2:2617-0:2889","b:2:2620-0:2889","b:2:3675-0:2889","b:25:25-0:2889","0:2932","0:2926","0:2943","0:2937","0:2929","0:656","0:2935","0:2941"]}},"0:992":{"id":"0:992","crate_id":0,"name":"unset","span":{"filename":"src/build/arg/mod.rs","begin":[4800,4],"end":[4802,5]},"visibility":"public","docs":"Deprecated, see [`Arg::unset_setting`]","links":{"`Arg::unset_setting`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::unset_setting`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::unset_setting`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:2812":{"id":"a:2:3024-0:2812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:675":{"id":"0:675","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[48,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":"Getters","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:677","0:678","0:679","0:680","0:681","0:683"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3552":{"id":"0:3552","crate_id":0,"name":"info","span":{"filename":"src/parse/errors.rs","begin":[438,4],"end":[438,25]},"visibility":"public","docs":"Additional information depending on the error kind, like values and argument names.\nUseful when you want to render an error of your own.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"b:2:2617-0:2889":{"id":"b:2:2617-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2663":{"id":"2:2663","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2665","2:2666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"5:5726":{"id":"5:5726","crate_id":5,"name":"to_string","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3220":{"id":"b:2:2945-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12370":{"id":"2:12370","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:44574"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:972":{"id":"0:972","crate_id":0,"name":"hidden","span":{"filename":"src/build/arg/mod.rs","begin":[3972,4],"end":[3978,5]},"visibility":"public","docs":"Hides an argument from help message output.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"debug\")\n    .setting(ArgSettings::Hidden)\n# ;\n```\nSetting `Hidden` will hide the argument when displaying help text\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .setting(ArgSettings::Hidden)\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:466":{"id":"0:466","crate_id":0,"name":"term_width","span":{"filename":"src/build/app/mod.rs","begin":[1056,4],"end":[1059,5]},"visibility":"public","docs":"Sets the terminal width at which to wrap help messages. Defaults to\n`100`. Using `0` will ignore terminal widths and use source formatting.\n\n`clap` automatically tries to determine the terminal width on Unix,\nLinux, OSX and Windows if the `wrap_help` cargo \"feature\" has been enabled\nat compile time. If the terminal width cannot be determined, `clap`\nfall back to `100`.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n**NOTE:** This setting must be set **before** any subcommands are added!\n\n# Platform Specific\n\nOnly Unix, Linux, OSX and Windows support automatic determination of\nterminal width. Even on those platforms, this setting is useful if for\nany reason the terminal width cannot be determined.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .term_width(80)\n# ;\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2459":{"id":"0:2459","crate_id":0,"name":"default","span":{"filename":"src/util/color.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1830":{"id":"0:1830","crate_id":0,"name":"index_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[728,4],"end":[735,5]},"visibility":"public","docs":"Gets the starting index of the argument in respect to all other arguments. Indices are\nsimilar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\nBesides the flag/option descrepancy, the primary difference between an argv index and clap\nindex, is that clap continues counting once all arguments have properly separated, whereas\nan argv index does not.\n\nThe examples should clear this up.\n\n*NOTE:* If an argument is allowed multiple times, this method will only give the *first*\nindex.\n\n# Examples\n\nThe argv indices are listed in the comments below. See how they correspond to the clap\nindices. Note that if it's not listed in a clap index, this is because it's not saved in\nin an `ArgMatches` struct for querying.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o\", \"val\"]);\n            // ARGV idices: ^0       ^1    ^2    ^3\n            // clap idices:          ^1          ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nNow notice, if we use one of the other styles of options:\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o=val\"]);\n            // ARGV idices: ^0       ^1    ^2\n            // clap idices:          ^1       ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nThings become much more complicated, or clear if we look at a more complex combination of\nflags. Let's also throw in the final option style for good measure.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzF\", \"-oval\"]);\n            // ARGV idices: ^0      ^1       ^2\n            // clap idices:         ^1,2,3    ^5\n            //\n            // clap sees the above as 'myapp -f -z -F -o val'\n            //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nOne final combination of flags/options to see how they combine:\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzFoval\"]);\n            // ARGV idices: ^0       ^1\n            // clap idices:          ^1,2,3^5\n            //\n            // clap sees the above as 'myapp -f -z -F -o val'\n            //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nThe last part to mention is when values are sent in multiple groups with a [delimiter].\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n            // ARGV idices: ^0       ^1\n            // clap idices:             ^2   ^3   ^4\n            //\n            // clap sees the above as 'myapp -o val1 val2 val3'\n            //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.index_of(\"option\"), Some(2));\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n[delimiter]: crate::Arg::value_delimiter()","links":{"crate::Arg::value_delimiter()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:979":{"id":"0:979","crate_id":0,"name":"empty_values","span":{"filename":"src/build/arg/mod.rs","begin":[4289,4],"end":[4291,5]},"visibility":"public","docs":"Deprecated, see [`Arg::forbid_empty_values`]","links":{"`Arg::forbid_empty_values`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `Arg::forbid_empty_values`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::forbid_empty_values`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["empty",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3323":{"id":"b:2:2945-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:512":{"id":"0:512","crate_id":0,"name":"write_help","span":{"filename":"src/build/app/mod.rs","begin":[1891,4],"end":[1897,5]},"visibility":"public","docs":"Writes the full help message to the user to a [`io::Write`] object in the same method as if\nthe user ran `-h`.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" help messages\ndepending on if the user ran [`-h` (short)] or [`--help` (long)].\n\n# Examples\n\n```rust\n# use clap::App;\nuse std::io;\nlet mut app = App::new(\"myprog\");\nlet mut out = io::stdout();\napp.write_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::about()\n[`--help` (long)]: Arg::long_about()","links":{"Arg::about()":"0:3323","Arg::long_about()":"0:3323","std::io::Write":"1:4409"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4409","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3323":{"id":"b:5:658-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8360-0:3323":{"id":"a:2:8360-0:3323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2617-0:3610":{"id":"b:2:2617-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:7466-0:3616":{"id":"b:2:7466-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:7468","2:7469","2:7470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:3736":{"id":"0:3736","crate_id":0,"name":"fmt","span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2966":{"id":"0:2966","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,9],"end":[27,14]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2968"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:133":{"id":"0:133","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[140,4],"end":[140,39]},"visibility":"default","docs":"Build an [`App`] that can instantiate `Self`.\n\nSee [`FromArgMatches::from_arg_matches`] for instantiating `Self`.","links":{"`App`":"0:2889","`FromArgMatches::from_arg_matches`":"0:137"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"a:2:8360-0:3728":{"id":"a:2:8360-0:3728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:451":{"id":"0:451","crate_id":0,"name":"override_help","span":{"filename":"src/build/app/mod.rs","begin":[838,4],"end":[841,5]},"visibility":"public","docs":"Overrides the `clap` generated help message. This should only be used\nwhen the auto-generated message does not suffice.\n\nThis will be displayed to the user when they use `--help` or `-h`.\n\n**NOTE:** This replaces the **entire** help message, so nothing will be\nauto-generated.\n\n**NOTE:** This **only** replaces the help message for the current\ncommand, meaning if you are using subcommands, those help messages will\nstill be auto-generated unless you specify a [`App::override_help`] for\nthem as well.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myapp\")\n    .override_help(\"myapp v1.0\\n\\\n           Does awesome things\\n\\\n           (C) me@mail.com\\n\\n\\\n\n           USAGE: myapp <opts> <comamnd>\\n\\n\\\n\n           Options:\\n\\\n           -h, --help       Display this message\\n\\\n           -V, --version    Display version info\\n\\\n           -s <stuff>       Do something with stuff\\n\\\n           -v               Be verbose\\n\\n\\\n\n           Commmands:\\n\\\n           help             Print this message\\n\\\n           work             Do some work\")\n# ;\n```","links":{"`App::override_help`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:3369":{"id":"a:2:3012-0:3369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12458":{"id":"2:12458","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:938":{"id":"0:938","crate_id":0,"name":"min_values","span":{"filename":"src/build/arg/mod.rs","begin":[2600,4],"end":[2603,5]},"visibility":"public","docs":"Specifies the *minimum* number of values for this argument. For example, if you had a\n`-f <file>` argument where you wanted at least 2 'files' you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.\n\n**NOTE:** This does not implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"file\")\n    .short('f')\n    .min_values(3);\n```\n\nSupplying more than the minimum number of values is allowed\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nSupplying less than the minimum number of values is an error\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::TooFewValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3505":{"id":"0:3505","crate_id":0,"name":"EmptyValue","span":{"filename":"src/parse/errors.rs","begin":[127,4],"end":[127,14]},"visibility":"default","docs":"Occurs when the user provides an empty value for an option that does not allow empty\nvalues.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .setting(ArgSettings::TakesValue)\n         .setting(ArgSettings::ForbidEmptyValues)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color=\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::EmptyValue);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12475":{"id":"2:12475","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3619":{"id":"0:3619","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1145,9],"end":[1145,14]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:3621"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:825":{"id":"0:825","crate_id":0,"name":"get_possible_values","span":{"filename":"src/build/arg/mod.rs","begin":[234,4],"end":[240,5]},"visibility":"public","docs":"Get the list of the possible values for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1846":{"id":"0:1846","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1013,0],"end":[1017,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:7506","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1848"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2954":{"id":"2:2954","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:851":{"id":"0:851","crate_id":0,"name":"short_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[550,4],"end":[556,5]},"visibility":"public","docs":"Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .short('t')\n                    .short_aliases(&['e', 's'])\n                    .about(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"-s\"\n            ]);\nassert!(m.is_present(\"test\"));\n```","links":{"`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:387":{"id":"0:387","crate_id":0,"name":"get_all_long_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Iterate through the set of *all* the long aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2710":{"id":"2:2710","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2712","2:2713","2:2714","2:2715","2:2716"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:921":{"id":"0:921","crate_id":0,"name":"allow_invalid_utf8","span":{"filename":"src/build/arg/mod.rs","begin":[2254,4],"end":[2260,5]},"visibility":"public","docs":"Specifies that option values that are invalid UTF-8 should *not* be treated as an error.\n\n**NOTE:** Using argument values with invalid UTF-8 code points requires using\n[`ArgMatches::value_of_os`], [`ArgMatches::values_of_os`], [`ArgMatches::value_of_lossy`],\nor [`ArgMatches::values_of_lossy`] for those particular arguments which may contain invalid\nUTF-8 values.\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n# Examples\n\n ```rust\n# use clap::{App, Arg};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\nlet r = App::new(\"myprog\")\n    .arg(Arg::new(\"arg\").allow_invalid_utf8(true))\n    .try_get_matches_from(vec![\n        OsString::from(\"myprog\"),\n        OsString::from_vec(vec![0xe9])\n    ]);\n\nassert!(r.is_ok());\nlet m = r.unwrap();\nassert_eq!(m.value_of_os(\"arg\").unwrap().as_bytes(), &[0xe9]);\n```\n[`ArgMatches::value_of_os`]: crate::ArgMatches::value_of_os()\n[`ArgMatches::values_of_os`]: crate::ArgMatches::values_of_os()\n[`ArgMatches::value_of_lossy`]: crate::ArgMatches::value_of_lossy()\n[`ArgMatches::values_of_lossy`]: crate::ArgMatches::values_of_lossy()","links":{"crate::ArgMatches::values_of_os()":"0:3583","crate::ArgMatches::values_of_lossy()":"0:3583","crate::ArgMatches::value_of_os()":"0:3583","`ArgSettings::TakesValue`":"0:3220","crate::ArgMatches::value_of_lossy()":"0:3583"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["tv",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"27:54":{"id":"27:54","crate_id":27,"name":"WordSplitter","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["27:55"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WordSplitterClone","id":"27:56","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:3012-0:3610":{"id":"a:2:3012-0:3610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1020":{"id":"0:1020","crate_id":0,"name":"partial_cmp","span":{"filename":"src/build/arg/mod.rs","begin":[5170,4],"end":[5172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:34877","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12384":{"id":"2:12384","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15275"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:46705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3294":{"id":"0:3294","crate_id":0,"name":"Url","span":{"filename":"src/build/arg/value_hint.rs","begin":[61,4],"end":[61,7]},"visibility":"default","docs":"Complete web address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3751":{"id":"0:3751","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[69,22],"end":[69,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3527":{"id":"0:3527","crate_id":0,"name":"InvalidUtf8","span":{"filename":"src/parse/errors.rs","begin":[345,4],"end":[345,15]},"visibility":"default","docs":"Occurs when the user provides a value containing invalid UTF-8.\n\nTo allow arbitrary data\n- Set [`ArgSettings::AllowInvalidUtf8`] for argument values\n- Set [`AppSettings::AllowInvalidUtf8ForExternalSubcommands`] for external-subcommand\n  values\n\n# Platform Specific\n\nNon-Windows platforms only (such as Linux, Unix, OSX, etc.)\n\n# Examples\n\n ```\n# use clap::{App, Arg, ErrorKind, AppSettings};\n# use std::os::unix::ffi::OsStringExt;\n# use std::ffi::OsString;\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"utf8\")\n        .short('u')\n        .takes_value(true))\n    .try_get_matches_from(vec![OsString::from(\"myprog\"),\n                                OsString::from(\"-u\"),\n                                OsString::from_vec(vec![0xE9])]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::InvalidUtf8);\n```\n\n[`ArgSettings::AllowInvalidUtf8`]: crate::ArgSettings::AllowInvalidUtf8\n[`AppSettings::AllowInvalidUtf8ForExternalSubcommands`]: crate::AppSettings::AllowInvalidUtf8ForExternalSubcommands","links":{"crate::ArgSettings::AllowInvalidUtf8":"0:3220","crate::AppSettings::AllowInvalidUtf8ForExternalSubcommands":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3024-0:3616":{"id":"a:2:3024-0:3616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3323":{"id":"0:3323","crate_id":0,"name":"Arg","span":{"filename":"src/build/arg/mod.rs","begin":[85,0],"end":[125,1]},"visibility":"public","docs":"The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.\n\nThere are two methods for constructing [`Arg`]s, using the builder pattern and setting options\nmanually, or using a usage string which is far less verbose but has fewer options. You can also\nuse a combination of the two methods to achieve the best of both worlds.\n\n# Examples\n\n```rust\n# use clap::Arg;\n// Using the traditional builder pattern and setting each option manually\nlet cfg = Arg::new(\"config\")\n      .short('c')\n      .long(\"config\")\n      .takes_value(true)\n      .value_name(\"FILE\")\n      .about(\"Provides a config file to myprog\");\n// Using a usage string (setting a similar argument to the one above)\nlet input = Arg::from(\"-i, --input=[FILE] 'Provides an input file to the program'\");\n```","links":{"`Arg`":"0:3323"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:811","0:835","a:2:3012-0:3323","a:2:3024-0:3323","a:2:3053-0:3323","a:2:8360-0:3323","a:2:8361-0:3323","b:2:2945-0:3323","b:2:2941-0:3323","b:5:658-0:3323","b:5:5724-0:3323","b:2:2956-0:3323","b:2:2951-0:3323","b:2:2617-0:3323","b:2:2620-0:3323","b:2:3675-0:3323","b:25:25-0:3323","0:1001","0:1004","0:3366","0:3363","0:1024","0:1021","0:1007","0:1018","0:1026","0:1014"]}},"b:2:2951-0:3549":{"id":"b:2:2951-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2956-0:3323":{"id":"b:2:2956-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:982":{"id":"0:982","crate_id":0,"name":"multiple","span":{"filename":"src/build/arg/mod.rs","begin":[4538,4],"end":[4540,5]},"visibility":"public","docs":"Deprecated, see [`Arg::multiple_occurrences`] (most likely what you want) and\n[`Arg::multiple_values`]","links":{"`Arg::multiple_occurrences`":"0:3323","`Arg::multiple_values`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Split into `Arg::multiple_occurrences` (most likely what you want)  and `Arg::multiple_values`\")]"],"deprecation":{"since":"3.0.0","note":"Split into `Arg::multiple_occurrences` (most likely what you want)  and `Arg::multiple_values`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["multi",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3220":{"id":"b:2:2620-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2617-0:3271":{"id":"b:2:2617-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2926":{"id":"0:2926","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,9],"end":[64,16]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2928"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3021":{"id":"2:3021","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:1060":{"id":"0:1060","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[425,0],"end":[437,1]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1062"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3268":{"id":"0:3268","crate_id":0,"name":null,"span":{"filename":"src/build/arg/settings.rs","begin":[82,27],"end":[82,31]},"visibility":{"restricted":{"parent":"0:709","path":"::build::arg::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3223":{"id":"0:3223","crate_id":0,"name":"MultipleValues","span":{"filename":"src/build/arg/settings.rs","begin":[87,4],"end":[87,18]},"visibility":"default","docs":"Allows an arg to accept multiple values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2937":{"id":"0:2937","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,32],"end":[64,41]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2939","0:2940"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:5724-0:3323":{"id":"b:5:5724-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:5722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:5726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2819":{"id":"0:2819","crate_id":0,"name":"AllowNegativeNumbers","span":{"filename":"src/build/app/settings.rs","begin":[236,4],"end":[236,24]},"visibility":"default","docs":"Allows negative numbers to pass as values. This is similar to\n[`AppSettings::AllowLeadingHyphen`] except that it only allows numbers, all\nother undefined leading hyphens will fail to parse.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nlet res = App::new(\"myprog\")\n    .setting(AppSettings::AllowNegativeNumbers)\n    .arg(Arg::new(\"num\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"-20\"\n    ]);\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"num\").unwrap(), \"-20\");\n```","links":{"`AppSettings::AllowLeadingHyphen`":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2974":{"id":"0:2974","crate_id":0,"name":"clone","span":{"filename":"src/build/arg/arg_value.rs","begin":[27,25],"end":[27,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3728":{"id":"0:3728","crate_id":0,"name":"ColorChoice","span":{"filename":"src/util/color.rs","begin":[3,0],"end":[56,1]},"visibility":"public","docs":"Represents the color preferences for program output","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3729","0:3731","0:3733"],"impls":["a:2:3012-0:3728","a:2:3024-0:3728","a:2:3053-0:3728","a:2:8360-0:3728","a:2:8361-0:3728","b:2:2945-0:3728","b:2:2941-0:3728","b:5:658-0:3728","b:2:2956-0:3728","b:2:2951-0:3728","b:2:2617-0:3728","b:2:2620-0:3728","b:2:3675-0:3728","b:25:25-0:3728","0:3738","0:3737","0:2458","0:3741","0:3744","0:3735","0:3743","0:3740"]}},"28:47":{"id":"28:47","crate_id":28,"name":"UnicodeWidthChar","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["28:48","28:49"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5471":{"id":"1:5471","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5472","1:5473","1:5474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8361-0:3220":{"id":"a:2:8361-0:3220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9965":{"id":"2:9965","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:9967","2:9968","2:9969","2:9970","2:9971","2:9972","2:9973"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:9956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12382":{"id":"2:12382","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:46408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3259":{"id":"0:3259","crate_id":0,"name":"AllowInvalidUtf8","span":{"filename":"src/build/arg/settings.rs","begin":[128,4],"end":[128,20]},"visibility":"default","docs":"Specifies that option values that are invalid UTF-8 should *not* be treated as an error.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3012-0:2960":{"id":"a:2:3012-0:2960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8361-0:3271":{"id":"a:2:8361-0:3271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1788":{"id":"0:1788","crate_id":0,"name":"value_of_lossy","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[163,4],"end":[170,5]},"visibility":"public","docs":"Gets the lossy value of a specific argument. If the argument wasn't present at runtime\nit returns `None`. A lossy value is one which contains invalid UTF-8, those\ninvalid points will be replaced with `\\u{FFFD}`\n\n*NOTE:* Recommend having set [`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n*NOTE:* If getting a value for an option or positional argument that allows multiples,\nprefer [`Arg::values_of_lossy`] as `value_of_lossy()` will only return the *first* value.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`occurrences_of`] can be used to check if a value is present at runtime.\n\n# Examples\n\n ```\n# use clap::{App, Arg};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = App::new(\"utf8\")\n    .arg(Arg::from(\"<arg> 'some arg'\")\n        .allow_invalid_utf8(true))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(&*m.value_of_lossy(\"arg\").unwrap(), \"Hi \\u{FFFD}!\");\n```\n[`default_value`]: crate::Arg::default_value()\n[`occurrences_of`]: ArgMatches::occurrences_of()\n[`Arg::values_of_lossy`]: ArgMatches::values_of_lossy()","links":{"crate::Arg::default_value()":"0:3323","crate::ArgSettings::AllowInvalidUtf8":"0:3220","ArgMatches::occurrences_of()":"0:3583","ArgMatches::values_of_lossy()":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:464":{"id":"0:464","crate_id":0,"name":"unset_global_setting","span":{"filename":"src/build/app/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"public","docs":"Disables a global setting, and stops propagating down to child\nsubcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n**NOTE:** The setting being unset will be unset from both local and\n[global] settings.\n\n# Examples\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .unset_global_setting(AppSettings::AllowNegativeNumbers)\n# ;\n```\n[global]: App::global_setting()","links":{"App::global_setting()":"0:2889","`AppSettings`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:413":{"id":"0:413","crate_id":0,"name":"find_subcommand","span":{"filename":"src/build/app/mod.rs","begin":[329,4],"end":[334,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5533":{"id":"1:5533","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3150":{"id":"2:3150","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152","2:3153"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3517":{"id":"0:3517","crate_id":0,"name":"WrongNumberOfValues","span":{"filename":"src/parse/errors.rs","begin":[241,4],"end":[241,23]},"visibility":"default","docs":"Occurs when the user provides a different number of values for an argument than what's\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .takes_value(true)\n        .number_of_values(2))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"wrong\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::WrongNumberOfValues);\n```\n\n[`Arg::number_of_values`]: Arg::number_of_values()\n[`Arg::value_names`]: Arg::value_names()","links":{"Arg::value_names()":"0:3323","Arg::number_of_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3675-0:3583":{"id":"b:2:3675-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9399":{"id":"2:9399","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2945-0:3746":{"id":"b:2:2945-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3270":{"id":"0:3270","crate_id":0,"name":"clone","span":{"filename":"src/build/arg/settings.rs","begin":[82,33],"end":[82,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3549":{"id":"b:2:2945-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5479":{"id":"1:5479","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5480","1:5481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2831":{"id":"0:2831","crate_id":0,"name":"DontCollapseArgsInUsage","span":{"filename":"src/build/app/settings.rs","begin":[496,4],"end":[496,27]},"visibility":"default","docs":"Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::DontCollapseArgsInUsage)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:25:25-0:3323":{"id":"b:25:25-0:3323","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:2972":{"id":"0:2972","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,25],"end":[27,30]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2974"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2956-0:3583":{"id":"b:2:2956-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3218":{"id":"0:3218","crate_id":0,"name":"Err","span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:381":{"id":"0:381","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/build/app/mod.rs","begin":[183,4],"end":[185,5]},"visibility":"public","docs":"Iterate through the set of *all* the aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:445":{"id":"0:445","crate_id":0,"name":"license","span":{"filename":"src/build/app/mod.rs","begin":[767,4],"end":[770,5]},"visibility":"public","docs":"Sets a string of the license to be displayed when displaying help information.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_license!`] to automatically set your\napplication's license to the same thing as your crate at compile time. See the\n[`examples/`] directory for more information\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    .license(\"MIT OR Apache-2.0\")\n# ;\n```\n[`crate_license!`]: ./macro.crate_license!.html\n[`examples/`]: https://github.com/clap-rs/clap/tree/master/examples","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["license",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3225":{"id":"0:3225","crate_id":0,"name":"MultipleOccurrences","span":{"filename":"src/build/arg/settings.rs","begin":[89,4],"end":[89,23]},"visibility":"default","docs":"Allows an arg to appear multiple times","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3053-0:3597":{"id":"a:2:3053-0:3597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:936":{"id":"0:936","crate_id":0,"name":"max_occurrences","span":{"filename":"src/build/arg/mod.rs","begin":[2473,4],"end":[2480,5]},"visibility":"public","docs":"Specifies the *maximum* number of occurrences for this argument. For example, if you had a\n`-v` flag and you wanted up to 3 levels of verbosity you would set `.max_occurrences(3)`, and\nthis argument would be satisfied if the user provided it once or twice or thrice.\n\n**NOTE:** This implicitly sets [`Arg::multiple_occurrences(true)`] if the value is greater than 1.\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"verbosity\")\n    .short('v')\n    .max_occurrences(3);\n```\n\nSupplying less than the maximum number of arguments is allowed\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .max_occurrences(3)\n        .short('v'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-vvv\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.occurrences_of(\"verbosity\"), 3);\n```\n\nSupplying more than the maximum number of arguments is an error\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .max_occurrences(2)\n        .short('v'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-vvv\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::TooManyOccurrences);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2956-0:3369":{"id":"b:2:2956-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1585":{"id":"0:1585","crate_id":0,"name":"fmt","span":{"filename":"src/parse/errors.rs","begin":[444,4],"end":[457,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:841":{"id":"0:841","crate_id":0,"name":"from_usage","span":{"filename":"src/build/arg/mod.rs","begin":[362,4],"end":[364,5]},"visibility":"public","docs":"Deprecated, see [`Arg::from`]","links":{"`Arg::from`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::from`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::from`"},"kind":"method","inner":{"decl":{"inputs":[["u",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3390":{"id":"0:3390","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,36],"end":[78,38]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5463":{"id":"1:5463","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5464","1:5465","1:5466","1:5467"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2951-0:3728":{"id":"b:2:2951-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3511":{"id":"0:3511","crate_id":0,"name":"TooManyValues","span":{"filename":"src/parse/errors.rs","begin":[183,4],"end":[183,17]},"visibility":"default","docs":"Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"arg\")\n        .max_values(2))\n    .try_get_matches_from(vec![\"prog\", \"too\", \"many\", \"values\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::TooManyValues);\n```\n[`Arg::max_values`]: Arg::max_values()","links":{"Arg::max_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:481":{"id":"0:481","crate_id":0,"name":"aliases","span":{"filename":"src/build/app/mod.rs","begin":[1276,4],"end":[1279,5]},"visibility":"public","docs":"If this `App` instance is a subcommand, this method adds a multiple\naliases, which allows this subcommand to be accessed via *either* the\noriginal name or any of the given aliases. This is more efficient, and\neasier than creating multiple hidden subcommands as one only needs to\ncheck for the existence of this command and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If looking for aliases that will be displayed in the help\nmessage, see [`App::visible_aliases`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myprog\")\n    .subcommand(App::new(\"test\")\n        .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"]))\n        .arg(Arg::new(\"input\")\n            .about(\"the file to add\")\n            .index(1)\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"do-tests\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_aliases`]: App::visible_aliases()","links":{"App::visible_aliases()":"0:2889","`ArgMatches`":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:473":{"id":"0:473","crate_id":0,"name":"args","span":{"filename":"src/build/app/mod.rs","begin":[1157,4],"end":[1168,5]},"visibility":"public","docs":"Adds multiple [arguments] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nApp::new(\"myprog\")\n    .args(&[\n        Arg::from(\"[debug] -d 'turns on debugging info'\"),\n        Arg::new(\"input\").index(1).about(\"the input file to use\")\n    ])\n# ;\n```\n[arguments]: Arg","links":{"Arg":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3118":{"id":"2:3118","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3120"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7469":{"id":"2:7469","crate_id":2,"name":"IntoIter","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"I"},"generics":{"params":[],"where_predicates":[]}}},"0:837":{"id":"0:837","crate_id":0,"name":"new","span":{"filename":"src/build/arg/mod.rs","begin":[336,4],"end":[345,5]},"visibility":"public","docs":"Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\ninformation about whether or not the argument was used at runtime, get values, set\nrelationships with other args, etc..\n\n**NOTE:** In the case of arguments that take values (i.e. [`Arg::takes_value(true)`])\nand positional arguments (i.e. those without a preceding `-` or `--`) the name will also\nbe displayed when the user prints the usage/help information of the program.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"config\")\n# ;\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"`Arg`":"0:3323","Arg::takes_value()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:455":{"id":"0:455","crate_id":0,"name":"help_template","span":{"filename":"src/build/app/mod.rs","begin":[892,4],"end":[895,5]},"visibility":"public","docs":"Sets the help template to be used, overriding the default format.\n\n**NOTE:** The template system is by design very simple. Therefore, the\ntags have to be written in the lowercase and without spacing.\n\nTags are given inside curly brackets.\n\nValid tags are:\n\n  * `{bin}`                 - Binary name.\n  * `{version}`             - Version number.\n  * `{author}`              - Author information.\n  * `{author-with-newline}` - Author followed by `\\n`.\n  * `{author-section}`      - Author preceded and followed by `\\n`.\n  * `{about}`               - General description (from [`App::about`] or\n                              [`App::long_about`]).\n  * `{about-with-newline}`  - About followed by `\\n`.\n  * `{about-section}`       - About preceded and followed by '\\n'.\n  * `{usage-heading}`       - Automatically generated usage heading.\n  * `{usage}`               - Automatically generated or given usage string.\n  * `{all-args}`            - Help for all arguments (options, flags, positional\n                              arguments, and subcommands) including titles.\n  * `{options}`             - Help for options.\n  * `{positionals}`         - Help for positional arguments.\n  * `{subcommands}`         - Help for subcommands.\n  * `{after-help}`          - Help from [`App::after_help`] or [`App::after_long_help`].\n  * `{before-help}`         - Help from [`App::before_help`] or [`App::before_long_help`].\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .version(\"1.0\")\n    .help_template(\"{bin} ({version}) - {usage}\")\n# ;\n```\n[`App::about`]: App::about()\n[`App::long_about`]: App::long_about()\n[`App::after_help`]: App::after_help()\n[`App::after_long_help`]: App::after_long_help()\n[`App::before_help`]: App::before_help()\n[`App::before_long_help`]: App::before_long_help()","links":{"App::after_long_help()":"0:2889","App::about()":"0:2889","App::long_about()":"0:2889","App::before_long_help()":"0:2889","App::after_help()":"0:2889","App::before_help()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:922":{"id":"0:922","crate_id":0,"name":"validator","span":{"filename":"src/build/arg/mod.rs","begin":[2298,4],"end":[2307,5]},"visibility":"public","docs":"Allows one to perform a custom validation on the argument value. You provide a closure\nwhich accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\nmessage displayed to the user.\n\n**NOTE:** The error message does *not* need to contain the `error:` portion, only the\nmessage as all errors will appear as\n`error: Invalid value for '<arg>': <YOUR MESSAGE>` where `<arg>` is replaced by the actual\narg, and `<YOUR MESSAGE>` is the `String` you return as the error.\n\n**NOTE:** There is a small performance hit for using validators, as they are implemented\nwith [`Arc`] pointers. And the value to be checked will be allocated an extra time in order\nto be passed to the closure. This performance hit is extremely minimal in the grand\nscheme of things.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nfn has_at(v: &str) -> Result<(), String> {\n    if v.contains(\"@\") { return Ok(()); }\n    Err(String::from(\"The value did not contain the required @ sigil\"))\n}\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .index(1)\n        .validator(has_at))\n    .try_get_matches_from(vec![\n        \"prog\", \"some@file\"\n    ]);\nassert!(res.is_ok());\nassert_eq!(res.unwrap().value_of(\"file\"), Some(\"some@file\"));\n```\n[`String`]: std::string::String\n[`Result`]: std::result::Result\n[`Err(String)`]: std::result::Result::Err\n[`Arc`]: std::sync::Arc","links":{"std::result::Result":"2:44700","std::result::Result::Err":"2:44700","std::sync::Arc":"5:5966","std::string::String":"5:7606"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"O","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3253","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:449":{"id":"0:449","crate_id":0,"name":"usage","span":{"filename":"src/build/app/mod.rs","begin":[799,4],"end":[801,5]},"visibility":"public","docs":"Deprecated, see [`App::override_usage`]","links":{"`App::override_usage`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::override_usage`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::override_usage`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:929":{"id":"0:929","crate_id":0,"name":"validator_os","span":{"filename":"src/build/arg/mod.rs","begin":[2339,4],"end":[2348,5]},"visibility":"public","docs":"Works identically to Validator but is intended to be used with values that could\ncontain non UTF-8 formatted strings.\n\n# Examples\n\n ```rust\n# use clap::{App, Arg};\n# use std::ffi::{OsStr, OsString};\n# use std::os::unix::ffi::OsStrExt;\nfn has_ampersand(v: &OsStr) -> Result<(), String> {\n    if v.as_bytes().iter().any(|b| *b == b'&') { return Ok(()); }\n    Err(String::from(\"The value did not contain the required & sigil\"))\n}\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .index(1)\n        .validator_os(has_ampersand))\n    .try_get_matches_from(vec![\n        \"prog\", \"Fish & chips\"\n    ]);\nassert!(res.is_ok());\nassert_eq!(res.unwrap().value_of(\"file\"), Some(\"Fish & chips\"));\n```\n[`String`]: std::string::String\n[`OsStr`]: std::ffi::OsStr\n[`OsString`]: std::ffi::OsString\n[`Result`]: std::result::Result\n[`Err(String)`]: std::result::Result::Err\n[`Rc`]: std::rc::Rc","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}},{"name":"O","kind":{"type":{"bounds":[],"default":null}}},{"name":"E","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3253","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3237":{"id":"0:3237","crate_id":0,"name":"RequireDelimiter","span":{"filename":"src/build/arg/settings.rs","begin":[102,4],"end":[102,20]},"visibility":"default","docs":"Says that arg *must* use a delimiter to separate values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:969":{"id":"0:969","crate_id":0,"name":"require_delimiter","span":{"filename":"src/build/arg/mod.rs","begin":[3849,4],"end":[3855,5]},"visibility":"public","docs":"Specifies that *multiple values* may only be set using the delimiter. This means if an\noption is encountered, and no delimiter is found, it is assumed that no additional values\nfor that option follow. This is unlike the default, where it is generally assumed that\nmore values will follow regardless of whether or not a delimiter is used.\n\n**NOTE:** The default is `false`.\n\n**NOTE:** Setting this requires [`ArgSettings::UseValueDelimiter`] and\n[`ArgSettings::TakesValue`]\n\n**NOTE:** It's a good idea to inform the user that use of a delimiter is required, either\nthrough help text or other means.\n\n# Examples\n\nThese examples demonstrate what happens when `require_delimiter(true)` is used. Notice\neverything works in this first example, as we use a delimiter, as expected.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet delims = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::UseValueDelimiter)\n        .setting(ArgSettings::RequireDelimiter)\n        .setting(ArgSettings::MultipleValues))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1,val2,val3\",\n    ]);\n\nassert!(delims.is_present(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\n\nIn this next example, we will *not* use a delimiter. Notice it's now an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::UseValueDelimiter)\n        .setting(ArgSettings::RequireDelimiter))\n    .try_get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(res.is_err());\nlet err = res.unwrap_err();\nassert_eq!(err.kind, ErrorKind::UnknownArgument);\n```\n\nWhat's happening is `-o` is getting `val1`, and because delimiters are required yet none\nwere present, it stops parsing `-o`. At this point it reaches `val2` and because no\npositional arguments have been defined, it's an error of an unexpected argument.\n\nIn this final example, we contrast the above with `clap`'s default behavior where the above\nis *not* an error.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet delims = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::MultipleValues))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(delims.is_present(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```","links":{"`ArgSettings::UseValueDelimiter`":"0:3220","`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3323":{"id":"b:2:2620-0:3323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12452":{"id":"2:12452","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3079":{"id":"2:3079","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081","2:3082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:363":{"id":"0:363","crate_id":0,"name":"get_bin_name","span":{"filename":"src/build/app/mod.rs","begin":[124,4],"end":[126,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12380":{"id":"2:12380","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:46392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3675-0:3220":{"id":"b:2:3675-0:3220","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:177":{"id":"0:177","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[359,4],"end":[361,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:2960":{"id":"a:2:3024-0:2960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3551":{"id":"0:3551","crate_id":0,"name":"kind","span":{"filename":"src/parse/errors.rs","begin":[435,4],"end":[435,23]},"visibility":"public","docs":"The type of error","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:129":{"id":"0:129","crate_id":0,"name":"try_update_from","span":{"filename":"src/derive.rs","begin":[123,4],"end":[132,5]},"visibility":"default","docs":"Update from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:3616":{"id":"b:5:658-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2955":{"id":"2:2955","crate_id":2,"name":"try_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2622":{"id":"2:2622","crate_id":2,"name":"borrow_mut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2668":{"id":"2:2668","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:3298":{"id":"0:3298","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[25,9],"end":[25,14]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3299"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3675-0:2960":{"id":"b:2:3675-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2921":{"id":"2:2921","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923","2:2924"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3496":{"id":"0:3496","crate_id":0,"name":"ErrorKind","span":{"filename":"src/parse/errors.rs","begin":[26,0],"end":[423,1]},"visibility":"public","docs":"Command line argument parser kind of error","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3497","0:3499","0:3501","0:3503","0:3505","0:3507","0:3509","0:3511","0:3513","0:3515","0:3517","0:3519","0:3521","0:3523","0:3525","0:3527","0:3529","0:3531","0:3533","0:3535","0:3537","0:3539"],"impls":["a:2:3012-0:3496","a:2:3024-0:3496","a:2:3053-0:3496","a:2:8360-0:3496","a:2:8361-0:3496","b:2:2945-0:3496","b:2:2941-0:3496","b:5:658-0:3496","b:2:2956-0:3496","b:2:2951-0:3496","b:2:2617-0:3496","b:2:2620-0:3496","b:2:3675-0:3496","0:3544","0:3543","0:3547","0:3541","0:3546"]}},"2:3170":{"id":"2:3170","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[340,0],"end":[347,1]},"visibility":{"restricted":{"parent":"0:100","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoApp","id":"0:132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoApp","id":"0:132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:167","0:169"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3741":{"id":"0:3741","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:658-0:3728":{"id":"b:5:658-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3303":{"id":"0:3303","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[25,27],"end":[25,31]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:690":{"id":"0:690","crate_id":0,"name":"hidden","span":{"filename":"src/build/arg/arg_value.rs","begin":[164,4],"end":[167,5]},"visibility":"public","docs":"Hides this value from help text and shell completions.\n\nThis is an alternative to hiding through [`Arg::hide_possible_values(true)`], if you only\nwant to hide some values.\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nArgValue::new(\"secret\")\n    .hidden(true)\n# ;\n```\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"crate::Arg::hide_possible_values()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12423":{"id":"2:12423","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15275","self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:46544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":"crate_description","span":{"filename":"src/macros.rs","begin":[142,0],"end":[146,1]},"visibility":"public","docs":"Allows you to pull the description from your Cargo.toml at compile time.\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# use clap::App;\n# fn main() {\nlet m = App::new(\"app\")\n            .about(crate_description!())\n            .get_matches();\n# }\n```","links":{},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! crate_description {\n    () => { ... };\n}"},"b:2:2617-0:3369":{"id":"b:2:2617-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:977":{"id":"0:977","crate_id":0,"name":"next_line_help","span":{"filename":"src/build/arg/mod.rs","begin":[4217,4],"end":[4223,5]},"visibility":"public","docs":"When set to `true` the help string will be displayed on the line after the argument and\nindented once. This can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.\n\n**NOTE:** To apply this setting to all arguments consider using\n[`crate::AppSettings::NextLineHelp`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"long-option-flag\")\n        .short('o')\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::NextLineHelp)\n        .value_names(&[\"value1\", \"value2\"])\n        .about(\"Some really long help and complex\\n\\\n               help that makes more sense to be\\n\\\n               on a line after the option\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\nnlh\n\nUSAGE:\n    nlh [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n    -o, --long-option-flag <value1> <value2>\n        Some really long help and complex\n        help that makes more sense to be\n        on a line after the option\n```","links":{"`crate::AppSettings::NextLineHelp`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["nlh",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5519":{"id":"1:5519","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520","1:5521","1:5522","1:5523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12013":{"id":"2:12013","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12015","2:12016","2:12017","2:12018"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12385":{"id":"2:12385","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:46676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:918":{"id":"0:918","crate_id":0,"name":"groups","span":{"filename":"src/build/arg/mod.rs","begin":[2174,4],"end":[2177,5]},"visibility":"public","docs":"Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .groups(&[\"mode\", \"verbosity\"])\n# ;\n```\n\nArguments can be members of multiple groups and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.is_present(\"mode\"));\nassert!(m.is_present(\"verbosity\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3369"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_ids",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:910":{"id":"0:910","crate_id":0,"name":"possible_values","span":{"filename":"src/build/arg/mod.rs","begin":[2020,4],"end":[2028,5]},"visibility":"public","docs":"Specifies a list of possible values for this argument. At runtime, `clap` verifies that\nonly one of the specified values was used, or fails with an error message.\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** You can use both strings directly or use [`ArgValue`] if you want more control\nover single possible values.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"mode\")\n    .takes_value(true)\n    .possible_values([\"fast\", \"slow\", \"medium\"])\n# ;\n```\nThe same using [`ArgValue`]:\n\n```rust\n# use clap::{App, Arg, ArgValue};\nArg::new(\"mode\").takes_value(true).possible_values([\n    ArgValue::new(\"fast\"),\n// value with a help text\n    ArgValue::new(\"slow\").about(\"not that fast\"),\n// value that is hidden from completion and help text\n    ArgValue::new(\"medium\").hidden(true),\n])\n# ;\n```\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true)\n        .possible_values([\"fast\", \"slow\", \"medium\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\nassert!(m.is_present(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\"));\n```\n\nThe next example shows a failed parse from using a value which wasn't defined as one of the\npossible values.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true)\n        .possible_values([\"fast\", \"slow\", \"medium\"]))\n    .try_get_matches_from(vec![\n        \"prog\", \"--mode\", \"wrong\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::InvalidValue);\n```\n[options]: Arg::takes_value()\n[positional arguments]: Arg::index()","links":{"Arg::index()":"0:3323","`ArgValue`":"0:2960","Arg::takes_value()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12401":{"id":"2:12401","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11994","`None`":"2:44574","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3231":{"id":"0:3231","crate_id":0,"name":"TakesValue","span":{"filename":"src/build/arg/settings.rs","begin":[95,4],"end":[95,14]},"visibility":"default","docs":"Allows an argument to take a value (such as `--option value`)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:869":{"id":"0:869","crate_id":0,"name":"required_unless_all","span":{"filename":"src/build/arg/mod.rs","begin":[937,4],"end":[943,5]},"visibility":"public","docs":"Deprecated, see [`Arg::required_unless_present_all`]","links":{"`Arg::required_unless_present_all`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `Arg::required_unless_present_all`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::required_unless_present_all`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3369":{"id":"a:2:3024-0:3369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3122":{"id":"2:3122","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3124"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6606":{"id":"1:6606","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[349,0],"end":[356,1]},"visibility":{"restricted":{"parent":"0:100","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:137","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:137","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:173","0:174"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:463":{"id":"0:463","crate_id":0,"name":"global_setting","span":{"filename":"src/build/app/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"public","docs":"Enables a single setting that is propagated **down** through all child\nsubcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n**NOTE**: The setting is *only* propagated *down* and not up through parent commands.\n\n# Examples\n\n```no_run\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .global_setting(AppSettings::SubcommandRequired)\n# ;\n```","links":{"`AppSettings`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6184":{"id":"1:6184","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6185","1:6186","1:6187","1:6188","1:6190","1:6192","1:6193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8360-0:2889":{"id":"a:2:8360-0:2889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2940":{"id":"0:2940","crate_id":0,"name":"ne","span":{"filename":"src/build/app/mod.rs","begin":[64,32],"end":[64,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3610":{"id":"b:2:2941-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12376":{"id":"2:12376","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15275","crate::ops::Index":"2:3308","str::slice_mut_unchecked":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:3583":{"id":"b:2:2951-0:3583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1891":{"id":"0:1891","crate_id":0,"name":"next","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1154,4],"end":[1156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2847":{"id":"2:2847","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:1626":{"id":"0:1626","crate_id":0,"name":"from","span":{"filename":"src/parse/errors.rs","begin":[1126,4],"end":[1130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:45573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12362":{"id":"2:12362","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:2960":{"id":"b:2:2951-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:691":{"id":"0:691","crate_id":0,"name":"alias","span":{"filename":"src/build/arg/arg_value.rs","begin":[181,4],"end":[184,5]},"visibility":"public","docs":"Sets an alias for this argument value.\n\nThe alias will be hidden from completion and help texts.\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nArgValue::new(\"slow\")\n    .alias(\"not-fast\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3744":{"id":"0:3744","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3745"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3131":{"id":"2:3131","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3132","2:3133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:13057":{"id":"2:13057","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13058","2:13059","2:13060","2:13061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2951-0:3616":{"id":"b:2:2951-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3247":{"id":"0:3247","crate_id":0,"name":"HideDefaultValue","span":{"filename":"src/build/arg/settings.rs","begin":[113,4],"end":[113,20]},"visibility":"default","docs":"Hides the default value from the help message","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1028":{"id":"0:1028","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg/mod.rs","begin":[5184,4],"end":[5237,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:45573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1851":{"id":"0:1851","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1022,0],"end":[1029,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:878":{"id":"0:878","crate_id":0,"name":"conflicts_with","span":{"filename":"src/build/arg/mod.rs","begin":[1078,4],"end":[1081,5]},"visibility":"public","docs":"Sets a conflicting argument by name. I.e. when using this argument,\nthe following argument can't be present and vice versa.\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::conflicts_with_all(names)`] allows specifying an argument which conflicts with more than one argument.\n\n**NOTE** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with(\"debug\")\n# ;\n```\n\nSetting conflicting argument, and having both arguments present at runtime is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with(\"debug\")\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::ArgumentConflict);\n```\n\n[`Arg::conflicts_with_all(names)`]: Arg::conflicts_with_all()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with_all()":"0:3323","Arg::exclusive()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3110":{"id":"2:3110","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3286":{"id":"0:3286","crate_id":0,"name":"CommandString","span":{"filename":"src/build/arg/value_hint.rs","begin":[43,4],"end":[43,17]},"visibility":"default","docs":"A single string containing a command and its arguments.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2969":{"id":"0:2969","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,16],"end":[27,23]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:2971"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12365":{"id":"2:12365","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3616":{"id":"b:2:2945-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8360-0:3616":{"id":"a:2:8360-0:3616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2620-0:3369":{"id":"b:2:2620-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1622":{"id":"0:1622","crate_id":0,"name":"with_description","span":{"filename":"src/parse/errors.rs","begin":[1109,4],"end":[1114,5]},"visibility":"public","docs":"Deprecated, see [`App::error`]\n\n[`App::error`]: crate::App::error","links":{"crate::App::error":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::error`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::error`"},"kind":"method","inner":{"decl":{"inputs":[["description",{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1627":{"id":"0:1627","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[1133,0],"end":[1138,1]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["backtrace","type_id","source","description","cause"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1628"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:660":{"id":"5:660","crate_id":5,"name":"Owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"0:3531":{"id":"0:3531","crate_id":0,"name":"DisplayHelpOnMissingArgumentOrSubcommand","span":{"filename":"src/parse/errors.rs","begin":[387,4],"end":[387,44]},"visibility":"default","docs":"Occurs when either an argument or a [`Subcommand`] is required, as defined by\n[`AppSettings::ArgRequiredElseHelp`] and\n[`AppSettings::SubcommandRequiredElseHelp`], but the user did not provide\none.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings, ErrorKind, };\nlet result = App::new(\"prog\")\n    .setting(AppSettings::ArgRequiredElseHelp)\n    .subcommand(App::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .about(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::DisplayHelpOnMissingArgumentOrSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`AppSettings::ArgRequiredElseHelp`]: crate::AppSettings::ArgRequiredElseHelp\n[`AppSettings::SubcommandRequiredElseHelp`]: crate::AppSettings::SubcommandRequiredElseHelp","links":{"crate::AppSettings::ArgRequiredElseHelp":"0:2812","crate::AppSettings::SubcommandRequiredElseHelp":"0:2812","crate::Subcommand":"0:143"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:510":{"id":"0:510","crate_id":0,"name":"print_help","span":{"filename":"src/build/app/mod.rs","begin":[1836,4],"end":[1844,5]},"visibility":"public","docs":"Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\nmethod as if someone ran `-h` to request the help message.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" help messages\ndepending on if the user ran [`-h` (short)] or [`--help` (long)].\n\n# Examples\n\n```rust\n# use clap::App;\nlet mut app = App::new(\"myprog\");\napp.print_help();\n```\n[`io::stdout()`]: std::io::stdout()\n[`BufWriter`]: std::io::BufWriter\n[`-h` (short)]: Arg::about()\n[`--help` (long)]: Arg::long_about()","links":{"std::io::BufWriter":"1:3462","Arg::long_about()":"0:3323","std::io::stdout()":"1:4154","Arg::about()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:2812":{"id":"b:2:2945-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12387":{"id":"2:12387","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:46714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:21517":{"id":"2:21517","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21507","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:144":{"id":"0:144","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[254,4],"end":[254,52]},"visibility":"default","docs":"Append to [`App`] so it can instantiate `Self`.\n\nSee also [`IntoApp`].","links":{"`IntoApp`":"0:132","`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["app",{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:3513":{"id":"0:3513","crate_id":0,"name":"TooFewValues","span":{"filename":"src/parse/errors.rs","begin":[201,4],"end":[201,16]},"visibility":"default","docs":"Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .min_values(3))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"too\", \"few\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::TooFewValues);\n```\n[`Arg::min_values`]: Arg::min_values()","links":{"Arg::min_values()":"0:3323"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3053-0:3746":{"id":"a:2:3053-0:3746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9411":{"id":"2:9411","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9412"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2956-0:3746":{"id":"b:2:2956-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1001":{"id":"0:1001","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5059,0],"end":[5063,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'_","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5397":{"id":"1:5397","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5398","1:5399"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:418":{"id":"0:418","crate_id":0,"name":"new","span":{"filename":"src/build/app/mod.rs","begin":[356,4],"end":[379,5]},"visibility":"public","docs":"Creates a new instance of an `App` requiring a `name`.\n\nIt is common, but not required, to use binary name as the `name`. This\nname will only be displayed to the user when they request to print\nversion or help and usage information.\n\nAn `App` represents a command line interface (CLI) which is made up of\nall possible command line arguments and subcommands. \"Subcommands\" are\nsub-CLIs with their own arguments, settings, and even subcommands\nforming a sort of hierarchy.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"My Program\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:2812":{"id":"b:5:658-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3556":{"id":"0:3556","crate_id":0,"name":"fmt","span":{"filename":"src/parse/errors.rs","begin":[430,9],"end":[430,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3220":{"id":"0:3220","crate_id":0,"name":"ArgSettings","span":{"filename":"src/build/arg/settings.rs","begin":[83,0],"end":[132,1]},"visibility":"public","docs":"Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::setting`], [`Arg::unset_setting`], and [`Arg::is_set`]. This is what the\n[`Arg`] methods which accept a `bool` use internally.\n\n[`Arg`]: crate::Arg\n[`Arg::setting`]: crate::Arg::setting()\n[`Arg::unset_setting`]: crate::Arg::unset_setting()\n[`Arg::is_set`]: crate::Arg::is_set()","links":{"crate::Arg::unset_setting()":"0:3323","crate::Arg::setting()":"0:3323","crate::Arg::is_set()":"0:3323","crate::Arg":"0:3323"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3221","0:3223","0:3225","0:3227","0:3229","0:3231","0:3233","0:3235","0:3237","0:3239","0:3241","0:3243","0:3245","0:3247","0:3249","0:3251","0:3253","0:3255","0:3257","0:3259"],"impls":["a:2:3012-0:3220","a:2:3024-0:3220","a:2:3053-0:3220","a:2:8360-0:3220","a:2:8361-0:3220","b:2:2945-0:3220","b:2:2941-0:3220","b:5:658-0:3220","b:2:2956-0:3220","b:2:2951-0:3220","b:2:2617-0:3220","b:2:2620-0:3220","b:2:3675-0:3220","0:3269","0:3268","0:3266","0:3263","0:3217","0:3214","0:3265"]}},"b:2:2945-0:3610":{"id":"b:2:2945-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2475":{"id":"0:2475","crate_id":0,"name":"with_name","span":{"filename":"src/lib.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":"Deprecated, see [`App::new`]","links":{"`App::new`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::new`)\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::new`)"},"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:875":{"id":"0:875","crate_id":0,"name":"required_unless_any","span":{"filename":"src/build/arg/mod.rs","begin":[1026,4],"end":[1032,5]},"visibility":"public","docs":"Deprecated, see [`Arg::required_unless_present_any`]","links":{"`Arg::required_unless_present_any`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `Arg::required_unless_present_any`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::required_unless_present_any`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:834":{"id":"0:834","crate_id":0,"name":"is_positional","span":{"filename":"src/build/arg/mod.rs","begin":[314,4],"end":[316,5]},"visibility":"public","docs":"Checks whether this argument is a positional or not.\n\n# Examples\n\n```\n# use clap::Arg;\nlet arg = Arg::new(\"foo\");\nassert_eq!(true, arg.is_positional());\n\nlet arg = Arg::new(\"foo\").long(\"foo\");\nassert_eq!(false, arg.is_positional());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3547":{"id":"0:3547","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[25,29],"end":[25,38]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3548"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3223":{"id":"2:3223","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3224","2:3225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"27:86":{"id":"27:86","crate_id":27,"name":"WrapAlgorithm","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["27:87"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WrapAlgorithmClone","id":"27:90","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:862":{"id":"0:862","crate_id":0,"name":"required_unless_present","span":{"filename":"src/build/arg/mod.rs","begin":[847,4],"end":[850,5]},"visibility":"public","docs":"Set this arg as [required] as long as the specified argument is not present at runtime.\n\n**Pro Tip:** Using `Arg::required_unless_present` implies [`Arg::required`] and is therefore not\nmandatory to also set.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present(\"debug\")\n# ;\n```\n\nIn the following example, the required argument is *not* provided,\nbut it's not an error because the `unless` arg has been supplied.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `Arg::required_unless_present(name)` and *not* supplying `name` or this arg is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:3323","`Arg::required`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3235":{"id":"0:3235","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/build/arg/settings.rs","begin":[100,4],"end":[100,16]},"visibility":"default","docs":"Tells an arg to display it's help on the line below the arg itself in the help message","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2956-0:3271":{"id":"b:2:2956-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3017":{"id":"2:3017","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:424":{"id":"0:424","crate_id":0,"name":"about","span":{"filename":"src/build/app/mod.rs","begin":[466,4],"end":[469,5]},"visibility":"public","docs":"Sets a string describing what the program does. This will be displayed\nwhen the user requests the short format help message (`-h`).\n\n`clap` can display two different help messages, a [long format] and a\n[short format] depending on whether the user used `-h` (short) or\n`--help` (long). This method sets the message during the short format\n(`-h`) message. However, if no long format message is configured, this\nmessage will be displayed for *both* the long format, or short format\nhelp message.\n\n**NOTE:** Only [`App::about`] (short format) is used in completion\nscript generation in order to be concise.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .about(\"Does really amazing things for great people\")\n# ;\n```\n[long format]: App::long_about()\n[short format]: App::about()\n[`App::about`]: App::about()","links":{"App::long_about()":"0:2889","App::about()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1052":{"id":"0:1052","crate_id":0,"name":"multiple","span":{"filename":"src/build/arg_group.rs","begin":[234,4],"end":[237,5]},"visibility":"public","docs":"Allows more than one of the [`Arg`]s in this group to be used. (Default: `false`)\n\n# Examples\n\nNotice in this example we use *both* the `-f` and `-c` flags which are both part of the\ngroup\n\n```rust\n# use clap::{App, Arg, ArgGroup};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .multiple(true))\n    .get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.is_present(\"req_flags\"));\n```\nIn this next example, we show the default behavior (i.e. `multiple(false)) which will throw\nan error if more than one of the args in the group was used.\n\n```rust\n# use clap::{App, Arg, ArgGroup, ErrorKind};\nlet result = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// Because we used both args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::ArgumentConflict);\n```\n\n[`Arg`]: crate::Arg","links":{"crate::Arg":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["m",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2888":{"id":"0:2888","crate_id":0,"name":"clone","span":{"filename":"src/build/app/settings.rs","begin":[143,33],"end":[143,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3675-0:3496":{"id":"b:2:3675-0:3496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:890":{"id":"0:890","crate_id":0,"name":"requires_ifs","span":{"filename":"src/build/arg/mod.rs","begin":[1503,4],"end":[1507,5]},"visibility":"public","docs":"Allows multiple conditional requirements. The requirement will only become valid if this arg's value\nequals `val`.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\nrequires_if:\n    - [val, arg]\n    - [val2, arg2]\n```\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_ifs(&[\n        (\"val\", \"arg\"),\n        (\"other_val\", \"arg2\"),\n    ])\n# ;\n```\n\nSetting `Arg::requires_ifs(&[\"val\", \"arg\"])` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument's value is anything other\nthan `val`, `arg` isn't required.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_ifs(&[\n            (\"special.conf\", \"opt\"),\n            (\"other.conf\", \"other\"),\n        ])\n        .long(\"config\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"option\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"special.conf\"\n    ]);\n\nassert!(res.is_err()); // We  used --config=special.conf so --option <val> is required\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"T"}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3452":{"id":"2:3452","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3453","2:3454","2:3455","2:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3457","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3452","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:978":{"id":"0:978","crate_id":0,"name":"forbid_empty_values","span":{"filename":"src/build/arg/mod.rs","begin":[4279,4],"end":[4285,5]},"visibility":"public","docs":"Don't allow an argument to accept explicitly empty values. An empty value\nmust be specified at the command line with an explicit `\"\"`, `''`, or\n`--option=`\n\n**NOTE:** By default empty values are allowed.\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`].\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"file\")\n    .long(\"file\")\n    .takes_value(true)\n    .forbid_empty_values(true)\n# ;\n```\n\nThe default is allowing empty values.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .short('v')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=\"\n    ]);\n\nassert!(res.is_ok());\nassert_eq!(res.unwrap().value_of(\"config\"), None);\n```\n\nBy adding this setting, we can forbid empty values.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .short('v')\n        .takes_value(true)\n        .forbid_empty_values(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::EmptyValue);\n```","links":{"`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["empty",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8360-0:2812":{"id":"a:2:8360-0:2812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:147":{"id":"0:147","crate_id":0,"name":"ArgEnum","span":{"filename":"src/derive.rs","begin":[289,0],"end":[310,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ArgEnum` can have the attribute\n`#[clap(arg_enum)]`.  In addition to parsing, help and error messages may report possible\nvariants.\n\n# Example\n\n ```\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(arg_enum)]\n    level: Level,\n}\n\n#[derive(clap::ArgEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"`Parser`":"0:117"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:148","0:150","0:153"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:6691":{"id":"1:6691","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12467":{"id":"2:12467","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:511":{"id":"0:511","crate_id":0,"name":"print_long_help","span":{"filename":"src/build/app/mod.rs","begin":[1863,4],"end":[1871,5]},"visibility":"public","docs":"Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\nmethod as if someone ran `--help` to request the help message.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" help messages\ndepending on if the user ran [`-h` (short)] or [`--help` (long)].\n\n# Examples\n\n```rust\n# use clap::App;\nlet mut app = App::new(\"myprog\");\napp.print_long_help();\n```\n[`io::stdout()`]: std::io::stdout()\n[`BufWriter`]: std::io::BufWriter\n[`-h` (short)]: Arg::about()\n[`--help` (long)]: Arg::long_about()","links":{"Arg::about()":"0:3323","std::io::stdout()":"1:4154","Arg::long_about()":"0:3323","std::io::BufWriter":"1:3462"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3804","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1785":{"id":"0:1785","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[90,0],"end":[967,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1786","0:1788","0:1790","0:1793","0:1797","0:1804","0:1808","0:1812","0:1815","0:1818","0:1822","0:1825","0:1827","0:1830","0:1832","0:1835","0:1837","0:1839"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:674":{"id":"0:674","crate_id":0,"name":"from","span":{"filename":"src/build/arg/arg_value.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2956-0:2889":{"id":"b:2:2956-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:981":{"id":"0:981","crate_id":0,"name":"multiple_occurrences","span":{"filename":"src/build/arg/mod.rs","begin":[4524,4],"end":[4530,5]},"visibility":"public","docs":"Specifies that the argument may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\nwould count as three occurrences. For options or arguments that take a value, this\n*does not* affect how many values they can accept. (i.e. only one at a time is allowed)\n\nFor example, `--opt val1 --opt val2` is allowed, but `--opt val1 val2` is not.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"debug\")\n    .short('d')\n    .setting(ArgSettings::MultipleOccurrences);\n```\n\nAn example with flags\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"verbose\")\n        .setting(ArgSettings::MultipleOccurrences)\n        .short('v'))\n    .get_matches_from(vec![\n        \"prog\", \"-v\", \"-v\", \"-v\"    // note, -vvv would have same result\n    ]);\n\nassert!(m.is_present(\"verbose\"));\nassert_eq!(m.occurrences_of(\"verbose\"), 3);\n```\n\nAn example with options\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::MultipleOccurrences)\n        .setting(ArgSettings::TakesValue)\n        .short('F'))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\"\n    ]);\n\nassert!(m.is_present(\"file\"));\nassert_eq!(m.occurrences_of(\"file\"), 3);\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["multi",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:962":{"id":"0:962","crate_id":0,"name":"display_order","span":{"filename":"src/build/arg/mod.rs","begin":[3399,4],"end":[3402,5]},"visibility":"public","docs":"Allows custom ordering of args within the help message. Args with a lower value will be\ndisplayed first in the help message. This is helpful when one would like to emphasise\nfrequently used args, or prioritize those towards the top of the list. Duplicate values\n**are** allowed. Args with duplicate display orders will be displayed in alphabetical\norder.\n\n**NOTE:** The default is 999 for all arguments.\n\n**NOTE:** This setting is ignored for [positional arguments] which are always displayed in\n[index] order.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"a\") // Typically args are grouped alphabetically by name.\n                             // Args without a display_order have a value of 999 and are\n                             // displayed alphabetically with all other 999 valued args.\n        .long(\"long-option\")\n        .short('o')\n        .takes_value(true)\n        .about(\"Some help and text\"))\n    .arg(Arg::new(\"b\")\n        .long(\"other-option\")\n        .short('O')\n        .takes_value(true)\n        .display_order(1)   // In order to force this arg to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other args with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .about(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help                Print help information\n    -V, --version             Print version information\n    -O, --other-option <b>    I should be first!\n    -o, --long-option <a>     Some help and text\n```\n[positional arguments]: Arg::index()\n[index]: Arg::index()","links":{"Arg::index()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12379":{"id":"2:12379","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15275"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12405":{"id":"2:12405","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11994","str::rsplit":"1:15275","prim@char":"1:15270","str::split_whitespace":"1:15275","`DoubleEndedIterator`":"2:7506"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:46422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3219":{"id":"0:3219","crate_id":0,"name":"from_str","span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":"crate_authors","span":{"filename":"src/macros.rs","begin":[112,0],"end":[124,1]},"visibility":"public","docs":"Allows you to pull the authors for the app from your Cargo.toml at\ncompile time in the form:\n`\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`\n\nYou can replace the colons with a custom separator by supplying a\nreplacement string, so, for example,\n`crate_authors!(\",\\n\")` would become\n`\"author1 lastname <author1@example.com>,\\nauthor2 lastname <author2@example.com>,\\nauthor3 lastname <author3@example.com>\"`\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# use clap::App;\n# fn main() {\nlet m = App::new(\"app\")\n            .author(crate_authors!(\"\\n\"))\n            .get_matches();\n# }\n```","links":{},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! crate_authors {\n    ($sep : expr) => { ... };\n    () => { ... };\n}"},"0:87":{"id":"0:87","crate_id":0,"name":"crate_version","span":{"filename":"src/macros.rs","begin":[83,0],"end":[87,1]},"visibility":"public","docs":"Allows you to pull the version from your Cargo.toml at compile time as\n`MAJOR.MINOR.PATCH_PKGVERSION_PRE`\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# use clap::App;\n# fn main() {\nlet m = App::new(\"app\")\n            .version(crate_version!())\n            .get_matches();\n# }\n```","links":{},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! crate_version {\n    () => { ... };\n}"},"5:654":{"id":"5:654","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:655","5:656","5:657"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:683":{"id":"0:683","crate_id":0,"name":"matches","span":{"filename":"src/build/arg/arg_value.rs","begin":[98,4],"end":[105,5]},"visibility":"public","docs":"Tests if the value is valid for this argument value\n\nThe value is valid if it is either the name or one of the aliases.\n\n# Examples\n\n```rust\n# use clap::ArgValue;\nlet arg_value = ArgValue::new(\"fast\").alias(\"not-slow\");\n\nassert!(arg_value.matches(\"fast\", false));\nassert!(arg_value.matches(\"not-slow\", false));\n\nassert!(arg_value.matches(\"FAST\", true));\nassert!(!arg_value.matches(\"FAST\", false));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1815":{"id":"0:1815","crate_id":0,"name":"value_of_t_or_exit","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[431,4],"end":[437,5]},"visibility":"public","docs":"Gets the value of a specific argument (i.e. an argument that takes an additional\nvalue at runtime) and then converts it into the result type using [`std::str::FromStr`].\n\nIf either the value is not present or parsing failed, exits the program.\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```\n# extern crate clap;\n# use clap::App;\nlet matches = App::new(\"myapp\")\n              .arg(\"[length] 'Set the length to use as a pos whole num, i.e. 20'\")\n              .get_matches_from(&[\"test\", \"12\"]);\n\n// Specify the type explicitly (or use turbofish)\nlet len: u32 = matches.value_of_t_or_exit(\"length\");\nassert_eq!(len, 12);\n\n// You can often leave the type for rustc to figure out\nlet also_len = matches.value_of_t_or_exit(\"length\");\n// Something that expects u32\nlet _: u32 = also_len;\n```\n\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html","links":{"`std::str::FromStr`":"2:11931","crate::ArgSettings::AllowInvalidUtf8":"0:3220"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1835":{"id":"0:1835","crate_id":0,"name":"subcommand_matches","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[845,4],"end":[852,5]},"visibility":"public","docs":"Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\nas well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\nthe subcommand wasn't present at runtime.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, };\nlet app_m = App::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .subcommand(App::new(\"test\")\n        .arg(Arg::new(\"opt\")\n            .long(\"option\")\n            .takes_value(true)))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\", \"test\", \"--option\", \"val\"\n    ]);\n\n// Both parent commands, and child subcommands can have arguments present at the same times\nassert!(app_m.is_present(\"debug\"));\n\n// Get the subcommand's ArgMatches instance\nif let Some(sub_m) = app_m.subcommand_matches(\"test\") {\n    // Use the struct like normal\n    assert_eq!(sub_m.value_of(\"opt\"), Some(\"val\"));\n}\n```\n\n[`Subcommand`]: crate::Subcommand\n[`App`]: crate::App","links":{"crate::App":"0:2889","`ArgMatches`":"0:3583","crate::Subcommand":"0:143"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2925":{"id":"2:2925","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2927","2:2928"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2617-0:3728":{"id":"b:2:2617-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2847":{"id":"0:2847","crate_id":0,"name":"HidePossibleValuesInHelp","span":{"filename":"src/build/app/settings.rs","begin":[708,4],"end":[708,28]},"visibility":"default","docs":"Tells `clap` *not* to print possible values when displaying help information.\nThis can be useful if there are many values, or they are explained elsewhere.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:25:25-0:3369":{"id":"b:25:25-0:3369","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:961":{"id":"0:961","crate_id":0,"name":"env_os","span":{"filename":"src/build/arg/mod.rs","begin":[3340,4],"end":[3343,5]},"visibility":"public","docs":"Specifies that if the value is not passed in as an argument, that it should be retrieved\nfrom the environment if available in the exact same manner as [`Arg::env`] only using\n[`OsStr`]s instead.","links":{"`OsStr`":"1:2786","`Arg::env`":"0:3323"},"attrs":["#[cfg(feature = \"env\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:140":{"id":"0:140","crate_id":0,"name":"Args","span":{"filename":"src/derive.rs","begin":[212,0],"end":[223,1]},"visibility":"public","docs":"Parse arguments into a user-defined container.\n\nImplementing this trait lets a parent container delegate argument parsing behavior to `Self`.\nwith:\n- `#[clap(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl\n  `Args`.\n- `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.\n\n\n# Example\n\n ```\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(flatten)]\n    logging: LogArgs,\n}\n\n#[derive(clap::Args)]\nstruct LogArgs {\n    #[clap(long, short = 'v', parse(from_occurrences))]\n    verbose: i8,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:141","0:142"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:137","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:175"]}},"0:3731":{"id":"0:3731","crate_id":0,"name":"Always","span":{"filename":"src/util/color.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"Enables colored output regardless of whether or not the output is going to a terminal/TTY.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{App, ColorChoice};\nApp::new(\"myprog\")\n    .color(ColorChoice::Always)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12004":{"id":"2:12004","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12006","2:12007","2:12008","2:12009","2:12010","2:12011","2:12012"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:25:25-0:3583":{"id":"b:25:25-0:3583","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null}}},{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"25:22","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["25:28"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:3369":{"id":"0:3369","crate_id":0,"name":"ArgGroup","span":{"filename":"src/build/arg_group.rs","begin":[79,0],"end":[87,1]},"visibility":"public","docs":"`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these\narguments\". By placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply \"any but not all\" arguments.\n\nFor instance, you can make an entire `ArgGroup` required. If [`ArgGroup::multiple(true)`] is\nset, this means that at least one argument from that group must be present. If\n[`ArgGroup::multiple(false)`] is set (the default), one and *only* one must be present.\n\nYou can also do things such as name an entire `ArgGroup` as a [conflict] or [requirement] for\nanother argument, meaning any of the arguments that belong to that group will cause a failure\nif present, or must present respectively.\n\nPerhaps the most common use of `ArgGroup`s is to require one and *only* one argument to be\npresent out of a given set. Imagine that you had multiple arguments, and you want one of them\nto be required, but making all of them required isn't feasible because perhaps they conflict\nwith each other. For example, lets say that you were building an application where one could\nset a given version number by supplying a string with an option argument, i.e.\n`--set-ver v1.2.3`, you also wanted to support automatically using a previous version number\nand simply incrementing one of the three numbers. So you create three flags `--major`,\n`--minor`, and `--patch`. All of these arguments shouldn't be used at one time but you want to\nspecify that *at least one* of them is used. For this, you can create a group.\n\nFinally, you may use `ArgGroup`s to pull a value from a group of arguments when you don't care\nexactly which argument was actually used at runtime.\n\n# Examples\n\nThe following example demonstrates using an `ArgGroup` to ensure that one, and only one, of\nthe arguments from the specified group is present at runtime.\n\n```rust\n# use clap::{App, ArgGroup, ErrorKind};\nlet result = App::new(\"app\")\n    .arg(\"--set-ver [ver] 'set the version manually'\")\n    .arg(\"--major         'auto increase major'\")\n    .arg(\"--minor         'auto increase minor'\")\n    .arg(\"--patch         'auto increase patch'\")\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\", \"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"app\", \"--major\", \"--patch\"]);\n// Because we used two args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind, ErrorKind::ArgumentConflict);\n```\nThis next example shows a passing parse of the same scenario\n\n```rust\n# use clap::{App, ArgGroup};\nlet result = App::new(\"app\")\n    .arg(\"--set-ver [ver] 'set the version manually'\")\n    .arg(\"--major         'auto increase major'\")\n    .arg(\"--minor         'auto increase minor'\")\n    .arg(\"--patch         'auto increase patch'\")\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"app\", \"--major\"]);\nassert!(result.is_ok());\nlet matches = result.unwrap();\n// We may not know which of the args was used, so we can test for the group...\nassert!(matches.is_present(\"vers\"));\n// we could also alternatively check each arg individually (not shown here)\n```\n[`ArgGroup::multiple(true)`]: ArgGroup::multiple()\n[`ArgGroup::multiple(false)`]: ArgGroup::multiple()\n[arguments]: crate::Arg\n[conflict]: crate::Arg::conflicts_with()\n[requirement]: crate::Arg::requires()","links":{"ArgGroup::multiple()":"0:3369","crate::Arg":"0:3323","crate::Arg::conflicts_with()":"0:3323","crate::Arg::requires()":"0:3323"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1039","a:2:3012-0:3369","a:2:3024-0:3369","a:2:3053-0:3369","a:2:8360-0:3369","a:2:8361-0:3369","b:2:2945-0:3369","b:2:2941-0:3369","b:5:658-0:3369","b:2:2956-0:3369","b:2:2951-0:3369","b:2:2617-0:3369","b:2:2620-0:3369","b:2:3675-0:3369","b:25:25-0:3369","0:1060","0:1063","0:3378","0:3392","0:3386","0:3381","0:3384","0:3390"]}},"2:3253":{"id":"2:3253","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3255"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3256","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:360":{"id":"0:360","crate_id":0,"name":"get_name","span":{"filename":"src/build/app/mod.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Get the name of the app.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3380":{"id":"0:3380","crate_id":0,"name":"default","span":{"filename":"src/build/arg_group.rs","begin":[78,9],"end":[78,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6302":{"id":"1:6302","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6303","1:6304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3499":{"id":"0:3499","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/parse/errors.rs","begin":[56,4],"end":[56,19]},"visibility":"default","docs":"Occurs when a user provides a flag, option, argument or subcommand which isn't defined.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .arg(Arg::from(\"--flag 'some flag'\"))\n    .try_get_matches_from(vec![\"prog\", \"--other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2980":{"id":"0:2980","crate_id":0,"name":"ne","span":{"filename":"src/build/arg/arg_value.rs","begin":[27,32],"end":[27,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2808":{"id":"0:2808","crate_id":0,"name":"bitor","span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3140","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:727":{"id":"0:727","crate_id":0,"name":"default","span":{"filename":"src/build/arg/value_hint.rs","begin":[67,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1880":{"id":"0:1880","crate_id":0,"name":"next_back","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1107,4],"end":[1109,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:939":{"id":"0:939","crate_id":0,"name":"value_delimiter","span":{"filename":"src/build/arg/mod.rs","begin":[2629,4],"end":[2632,5]},"visibility":"public","docs":"Specifies the separator to use when values are clumped together, defaults to `,` (comma).\n\n**NOTE:** implicitly sets [`Arg::use_delimiter(true)`]\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .long(\"config\")\n        .value_delimiter(';'))\n    .get_matches_from(vec![\n        \"prog\", \"--config=val1;val2;val3\"\n    ]);\n\nassert_eq!(m.values_of(\"config\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"])\n```\n[`Arg::use_delimiter(true)`]: Arg::use_delimiter()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::use_delimiter()":"0:3323","Arg::takes_value()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:980":{"id":"0:980","crate_id":0,"name":"multiple_values","span":{"filename":"src/build/arg/mod.rs","begin":[4465,4],"end":[4471,5]},"visibility":"public","docs":"Specifies that the argument may have an unknown number of multiple values. Without any other\nsettings, this argument may appear only *once*.\n\nFor example, `--opt val1 val2` is allowed, but `--opt val1 val2 --opt val3` is not.\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`].\n\n**WARNING:**\n\nSetting `MultipleValues` for an argument that takes a value, but with no other details can\nbe dangerous in some circumstances. Because multiple values are allowed,\n`--option val1 val2 val3` is perfectly valid. Be careful when designing a CLI where\npositional arguments are *also* expected as `clap` will continue parsing *values* until one\nof the following happens:\n\n* It reaches the [maximum number of values]\n* It reaches a [specific number of values]\n* It finds another flag or option (i.e. something that starts with a `-`)\n\n**WARNING:**\n\nWhen using args with `MultipleValues` and [`subcommands`], one needs to consider the\npossibility of an argument value being the same as a valid subcommand. By default `clap` will\nparse the argument in question as a value *only if* a value is possible at that moment.\nOtherwise it will be parsed as a subcommand. In effect, this means using `MultipleValues` with no\nadditional parameters and a value that coincides with a subcommand name, the subcommand\ncannot be called unless another argument is passed between them.\n\nAs an example, consider a CLI with an option `--ui-paths=<paths>...` and subcommand `signer`\n\nThe following would be parsed as values to `--ui-paths`.\n\n```text\n$ program --ui-paths path1 path2 signer\n```\n\nThis is because `--ui-paths` accepts multiple values. `clap` will continue parsing values\nuntil another argument is reached and it knows `--ui-paths` is done parsing.\n\nBy adding additional parameters to `--ui-paths` we can solve this issue. Consider adding\n[`Arg::number_of_values(1)`] or using *only* [`MultipleOccurrences`]. The following are all\nvalid, and `signer` is parsed as a subcommand in the first case, but a value in the second\ncase.\n\n```text\n$ program --ui-paths path1 signer\n$ program --ui-paths path1 --ui-paths signer signer\n```\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"debug\")\n    .short('d')\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::MultipleValues);\n```\n\nAn example with options\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::MultipleValues)\n        .short('F'))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(m.is_present(\"file\"));\nassert_eq!(m.occurrences_of(\"file\"), 1); // notice only one occurrence\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nAlthough `MultipleVlaues` has been specified, we cannot use the argument more than once.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::MultipleValues)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnexpectedMultipleUsage)\n```\n\nA common mistake is to define an option which allows multiple values, and a positional\nargument.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::MultipleValues)\n        .short('F'))\n    .arg(Arg::new(\"word\")\n        .index(1))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(m.is_present(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\", \"word\"]); // wait...what?!\nassert!(!m.is_present(\"word\")); // but we clearly used word!\n```\n\nThe problem is `clap` doesn't know when to stop parsing values for \"files\". This is further\ncompounded by if we'd said `word -F file1 file2` it would have worked fine, so it would\nappear to only fail sometimes...not good!\n\nA solution for the example above is to limit how many values with a [maximum], or [specific]\nnumber, or to say [`MultipleOccurrences`] is ok, but multiple values is not.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::MultipleOccurrences)\n        .setting(ArgSettings::TakesValue)\n        .short('F'))\n    .arg(Arg::new(\"word\")\n        .index(1))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\", \"word\"\n    ]);\n\nassert!(m.is_present(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\nassert!(m.is_present(\"word\"));\nassert_eq!(m.value_of(\"word\"), Some(\"word\"));\n```\n\nAs a final example, let's fix the above error and get a pretty message to the user :)\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .setting(ArgSettings::MultipleOccurrences)\n        .setting(ArgSettings::TakesValue)\n        .short('F'))\n    .arg(Arg::new(\"word\")\n        .index(1))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```\n\n[`subcommands`]: crate::App::subcommand()\n[`Arg::number_of_values(1)`]: Arg::number_of_values()\n[`MultipleOccurrences`]: ArgSettings::MultipleOccurrences\n[`MultipleValues`]: ArgSettings::MultipleValues\n[maximum number of values]: Arg::max_values()\n[specific number of values]: Arg::number_of_values()\n[maximum]: Arg::max_values()\n[specific]: Arg::number_of_values()","links":{"ArgSettings::MultipleOccurrences":"0:3220","Arg::max_values()":"0:3323","`ArgSettings::TakesValue`":"0:3220","crate::App::subcommand()":"0:2889","Arg::number_of_values()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["multi",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12446":{"id":"2:12446","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2912":{"id":"2:2912","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2914"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:2841":{"id":"0:2841","crate_id":0,"name":"DeriveDisplayOrder","span":{"filename":"src/build/app/settings.rs","begin":[583,4],"end":[583,22]},"visibility":"default","docs":"Displays the arguments and [`subcommands`] in the help message in the order that they were\ndeclared in, and not alphabetically which is the default.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::DeriveDisplayOrder)\n    .get_matches();\n```\n\n[`subcommands`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3012-0:3496":{"id":"a:2:3012-0:3496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:524":{"id":"0:524","crate_id":0,"name":"get_matches_from","span":{"filename":"src/build/app/mod.rs","begin":[2107,4],"end":[2132,5]},"visibility":"public","docs":"Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\nand will automatically exit with an error message. This method, however, lets you specify\nwhat iterator to use when performing matches, such as a [`Vec`] of your making.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`AppSettings::NoBinaryName`] is used.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = App::new(\"myprog\")\n    // Args and options go here...\n    .get_matches_from(arg_vec);\n```\n[`App::get_matches`]: App::get_matches()\n[`clap::Result`]: Result\n[`Vec`]: std::vec::Vec","links":{"Result":"2:44700","`AppSettings::NoBinaryName`":"0:2812","App::get_matches()":"0:2889","std::vec::Vec":"5:7063"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:13128":{"id":"2:13128","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13129","2:13130","2:13131","2:13132","2:13133","2:13134","2:13135"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:487":{"id":"0:487","crate_id":0,"name":"visible_short_flag_alias","span":{"filename":"src/build/app/mod.rs","begin":[1379,4],"end":[1383,5]},"visibility":"public","docs":"Allows adding an alias that functions exactly like those defined with\n[`App::short_flag_alias`], except that they are visible inside the help message.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n            .subcommand(App::new(\"test\").short_flag('t')\n                .visible_short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_alias`]: App::short_flag_alias()","links":{"App::short_flag_alias()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:893":{"id":"0:893","crate_id":0,"name":"required_if_eq","span":{"filename":"src/build/arg/mod.rs","begin":[1595,4],"end":[1598,5]},"visibility":"public","docs":"Allows specifying that this argument is [required] only if the specified\n`arg` is present at runtime and its value equals `val`.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\nrequired_if_eq:\n    - [arg, val]\n```\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq(\"other_arg\", \"value\")\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"not-special\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --other=special, so \"cfg\" wasn't required\n\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"special\"\n    ]);\n\n// We did use --other=special so \"cfg\" had become required but was missing.\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// By default, the comparison is case-sensitive, so \"cfg\" wasn't required\nassert!(res.is_ok());\n\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .case_insensitive(true)\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// However, case-insensitive comparisons can be enabled.  This typically occurs when using Arg::possible_values().\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3457":{"id":"2:3457","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3459"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3452","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:5:658-0:3610":{"id":"b:5:658-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1808":{"id":"0:1808","crate_id":0,"name":"values_of_os","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[335,4],"end":[343,5]},"visibility":"public","docs":"Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\nspecific argument. If the option wasn't present at runtime it returns `None`. An OS value\non Unix-like systems is any series of bytes, regardless of whether or not they contain\nvalid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename as an argument value on Linux (for example) may contain invalid UTF-8 code points.\n\n*NOTE:* Recommend having set [`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n ```\n# use clap::{App, Arg};\nuse std::ffi::{OsStr,OsString};\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = App::new(\"utf8\")\n    .arg(Arg::from(\"<arg>... 'some arg'\")\n        .allow_invalid_utf8(true))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                                // \"Hi\"\n                                OsString::from_vec(vec![b'H', b'i']),\n                                // \"{0xe9}!\"\n                                OsString::from_vec(vec![0xe9, b'!'])]);\n\nlet mut itr = m.values_of_os(\"arg\").unwrap().into_iter();\nassert_eq!(itr.next(), Some(OsStr::new(\"Hi\")));\nassert_eq!(itr.next(), Some(OsStr::from_bytes(&[0xe9, b'!'])));\nassert_eq!(itr.next(), None);\n```\n[`Iterator`]: std::iter::Iterator\n[`OsString`]: std::ffi::OsString\n[`String`]: std::string::String","links":{"std::ffi::OsString":"1:2783","std::string::String":"5:7606","crate::ArgSettings::AllowInvalidUtf8":"0:3220","`OsValues`":"0:3610","std::iter::Iterator":"2:7642"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1582":{"id":"0:1582","crate_id":0,"name":"Result","span":{"filename":"src/parse/errors.rs","begin":[22,0],"end":[22,41]},"visibility":"public","docs":"Short hand for [`Result`] type\n\n[`Result`]: std::result::Result","links":{"std::result::Result":"2:44700"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"StdResult","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]}}},"1:6204":{"id":"1:6204","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6205","1:6206","1:6207","1:6208","1:6209","1:6210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8361-0:2812":{"id":"a:2:8361-0:2812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12473":{"id":"2:12473","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11931","FromStr::Err":"2:11931"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2865":{"id":"0:2865","crate_id":0,"name":"UseLongFormatForHelpSubcommand","span":{"filename":"src/build/app/settings.rs","begin":[935,4],"end":[935,34]},"visibility":"default","docs":"Specifies that the help subcommand should print the [long format] help message.\n\n**NOTE:** This setting is useless if [`AppSettings::DisableHelpSubcommand`] or [`AppSettings::NoAutoHelp`] is set,\nor if the app contains no subcommands at all.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::UseLongFormatForHelpSubcommand)\n    .subcommand(App::new(\"test\")\n        .arg(Arg::new(\"foo\")\n            .about(\"short form about message\")\n            .long_about(\"long form about message\")\n        )\n    )\n    .get_matches();\n```\n[long format]: crate::App::long_about","links":{"`AppSettings::NoAutoHelp`":"0:2812","crate::App::long_about":"0:2889","`AppSettings::DisableHelpSubcommand`":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2918":{"id":"2:2918","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2920"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3729":{"id":"0:3729","crate_id":0,"name":"Auto","span":{"filename":"src/util/color.rs","begin":[21,4],"end":[21,8]},"visibility":"default","docs":"Enables colored output only when the output is going to a terminal or TTY.\n\n**NOTE:** This is the default behavior of `clap`.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{App, ColorChoice};\nApp::new(\"myprog\")\n    .color(ColorChoice::Auto)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:7462":{"id":"2:7462","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7463","2:7464","2:7465"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:814":{"id":"0:814","crate_id":0,"name":"get_about","span":{"filename":"src/build/arg/mod.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4716":{"id":"1:4716","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4717","1:4718"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12438":{"id":"2:12438","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","`DoubleEndedIterator`":"2:7506","str::rmatch_indices":"1:15275"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:46572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:858":{"id":"0:858","crate_id":0,"name":"about","span":{"filename":"src/build/arg/mod.rs","begin":[706,4],"end":[709,5]},"visibility":"public","docs":"Sets the short help text of the argument that will be displayed to the user when they print\nthe help information with `-h`. Typically, this is a short (one line) description of the\narg.\n\n**NOTE:** If only `Arg::about` is provided, and not [`Arg::long_about`] but the user requests\n`--help` clap will still display the contents of `help` appropriately\n\n**NOTE:** Only `Arg::about` is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"config\")\n    .about(\"The config file used by the myprog\")\n# ;\n```\n\nSetting `about` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```notrust\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```\n[`Arg::long_about`]: Arg::long_about()","links":{"Arg::long_about()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2811":{"id":"0:2811","crate_id":0,"name":"from_str","span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2960":{"id":"2:2960","crate_id":2,"name":"try_from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1024":{"id":"0:1024","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5181,0],"end":[5181,32]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1839":{"id":"0:1839","crate_id":0,"name":"subcommand","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[964,4],"end":[966,5]},"visibility":"public","docs":"This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\nby returning a tuple with both pieces of information.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, };\n let app_m = App::new(\"git\")\n     .subcommand(App::new(\"clone\"))\n     .subcommand(App::new(\"push\"))\n     .subcommand(App::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand() {\n    Some((\"clone\",  sub_m)) => {}, // clone was used\n    Some((\"push\",   sub_m)) => {}, // push was used\n    Some((\"commit\", sub_m)) => {}, // commit was used\n    _                       => {}, // Either no subcommand or one not tested for...\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use clap::{App, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet app_m = App::new(\"myprog\")\n    .setting(AppSettings::AllowExternalSubcommands)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.subcommand() {\n    Some((external, sub_m)) => {\n         let ext_args: Vec<&str> = sub_m.values_of(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[`ArgMatches::subcommand_matches`]: ArgMatches::subcommand_matches()\n[`ArgMatches::subcommand_name`]: ArgMatches::subcommand_name()","links":{"ArgMatches::subcommand_matches()":"0:3583","ArgMatches::subcommand_name()":"0:3583"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2863":{"id":"0:2863","crate_id":0,"name":"SubcommandRequiredElseHelp","span":{"filename":"src/build/app/settings.rs","begin":[913,4],"end":[913,30]},"visibility":"default","docs":"Specifies that the help text should be displayed (before exiting gracefully) if no\n[`subcommands`] are present at runtime (i.e. an empty run such as `$ myprog`).\n\n**NOTE:** This should *not* be used with [`AppSettings::SubcommandRequired`] as they do\nnearly same thing; this prints the help text, and the other prints an error.\n\n**NOTE:** If the user specifies arguments at runtime, but no subcommand the help text will\nstill be displayed and exit. If this is *not* the desired result, consider using\n[`AppSettings::ArgRequiredElseHelp`] instead.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequiredElseHelp);\n```\n\n[`subcommands`]: crate::App::subcommand()","links":{"`AppSettings::SubcommandRequired`":"0:2812","crate::App::subcommand()":"0:2889","`AppSettings::ArgRequiredElseHelp`":"0:2812"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:958":{"id":"0:958","crate_id":0,"name":"default_value_ifs_os","span":{"filename":"src/build/arg/mod.rs","begin":[3182,4],"end":[3190,5]},"visibility":"public","docs":"Provides multiple conditional default values in the exact same manner as\n[`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n\n[`Arg::default_value_ifs`]: Arg::default_value_ifs()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value_ifs()":"0:3323","std::ffi::OsStr":"1:2786"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3613":{"id":"0:3613","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1088,9],"end":[1088,14]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:3615"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12414":{"id":"2:12414","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11994","str::split":"1:15275","str::rsplit_terminator":"1:15275","prim@char":"1:15270","`DoubleEndedIterator`":"2:7506"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:46472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3308":{"id":"2:3308","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310","2:3311"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:1878":{"id":"0:1878","crate_id":0,"name":null,"span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1106,0],"end":[1110,1]},"visibility":{"restricted":{"parent":"0:1727","path":"::parse::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:7506","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:1880"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:671":{"id":"0:671","crate_id":0,"name":"from","span":{"filename":"src/build/arg/arg_value.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:503":{"id":"0:503","crate_id":0,"name":"display_order","span":{"filename":"src/build/app/mod.rs","begin":[1755,4],"end":[1758,5]},"visibility":"public","docs":"Allows custom ordering of subcommands within the help message. Subcommands with a lower\nvalue will be displayed first in the help message. This is helpful when one would like to\nemphasize frequently used subcommands, or prioritize those towards the top of the list.\nDuplicate values **are** allowed. Subcommands with duplicate display orders will be\ndisplayed in alphabetical order.\n\n**NOTE:** The default is 999 for all subcommands.\n\n# Examples\n\n```rust\n# use clap::{App, };\nlet m = App::new(\"cust-ord\")\n    .subcommand(App::new(\"alpha\") // typically subcommands are grouped\n                                               // alphabetically by name. Subcommands\n                                               // without a display_order have a value of\n                                               // 999 and are displayed alphabetically with\n                                               // all other 999 subcommands\n        .about(\"Some help and text\"))\n    .subcommand(App::new(\"beta\")\n        .display_order(1)   // In order to force this subcommand to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other subcommands with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .about(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"cust-ord\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    beta    I should be first!\n    alpha   Some help and text\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:864":{"id":"0:864","crate_id":0,"name":"required_unless","span":{"filename":"src/build/arg/mod.rs","begin":[854,4],"end":[856,5]},"visibility":"public","docs":"Deprecated, see [`Arg::required_unless_present`]","links":{"`Arg::required_unless_present`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `Arg::required_unless_present`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::required_unless_present`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:985":{"id":"0:985","crate_id":0,"name":"hidden_long_help","span":{"filename":"src/build/arg/mod.rs","begin":[4718,4],"end":[4724,5]},"visibility":"public","docs":"Hides an argument from long help message output.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"debug\")\n    .hidden_long_help(true)\n# ;\n```\nSetting `hidden_long_help(true)` will hide the argument when displaying long help text\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hidden_long_help(true)\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when -h is called\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hidden_long_help(true)\n        .about(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3233":{"id":"0:3233","crate_id":0,"name":"UseValueDelimiter","span":{"filename":"src/build/arg/settings.rs","begin":[98,4],"end":[98,21]},"visibility":"default","docs":"Enables a delimiter to break up arguments `--option val1,val2,val3` becomes three values\n(`val1`, `val2`, and `val3`) instead of the default one (`val1,val2,val3`)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3179":{"id":"2:3179","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:895":{"id":"0:895","crate_id":0,"name":"required_if","span":{"filename":"src/build/arg/mod.rs","begin":[1602,4],"end":[1604,5]},"visibility":"public","docs":"Deprecated, see [`Arg::required_if_eq`]","links":{"`Arg::required_if_eq`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::required_if_eq`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::required_if_eq`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5408":{"id":"5:5408","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1050":{"id":"0:1050","crate_id":0,"name":"args","span":{"filename":"src/build/arg_group.rs","begin":[185,4],"end":[190,5]},"visibility":"public","docs":"Adds multiple [arguments] to this group by name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.is_present(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.is_present(\"flag\"));\n```\n[arguments]: crate::Arg","links":{"crate::Arg":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:2960":{"id":"b:2:2945-0:2960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3365":{"id":"0:3365","crate_id":0,"name":"default","span":{"filename":"src/build/arg/mod.rs","begin":[84,9],"end":[84,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12476":{"id":"2:12476","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:902":{"id":"0:902","crate_id":0,"name":"required_if_eq_all","span":{"filename":"src/build/arg/mod.rs","begin":[1776,4],"end":[1780,5]},"visibility":"public","docs":"Allows specifying that this argument is [required] based on multiple conditions. The\nconditions are set up in a `(arg, val)` style tuple. The requirement will only become valid\nif every one of the specified `arg`'s value equals its corresponding `val`.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\nrequired_if_eq_all:\n    - [arg, val]\n    - [arg2, val2]\n```\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_all(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` makes this arg required if all of the `arg`s\nare used at runtime and every value is equal to its corresponding `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` and having all of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--extra\", \"val\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:3496":{"id":"a:2:3053-0:3496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4427":{"id":"1:4427","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4428","1:4429","1:4430","1:4431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3216":{"id":"0:3216","crate_id":0,"name":"bitor","span":{"filename":"src/build/arg/settings.rs","begin":[48,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3140","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:3271":{"id":"a:2:3024-0:3271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:986":{"id":"0:986","crate_id":0,"name":"is_set","span":{"filename":"src/build/arg/mod.rs","begin":[4730,4],"end":[4732,5]},"visibility":"public","docs":"Checks if one of the [`ArgSettings`] is set for the argument\n","links":{"`ArgSettings`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:476":{"id":"0:476","crate_id":0,"name":"arg_from_usage","span":{"filename":"src/build/app/mod.rs","begin":[1172,4],"end":[1174,5]},"visibility":"public","docs":"Deprecated, see [`App::arg`]","links":{"`App::arg`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `App::arg`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::arg`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"25:45":{"id":"25:45","crate_id":25,"name":"MutableKeys","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:46","25:47","25:48","25:50","25:52"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:11453":{"id":"2:11453","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11454","2:11455"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:888":{"id":"0:888","crate_id":0,"name":"requires_if","span":{"filename":"src/build/arg/mod.rs","begin":[1447,4],"end":[1450,5]},"visibility":"public","docs":"Require another argument if this arg was present on runtime, and its value equals to `val`.\n\nThis method takes `value, another_arg` pair. At runtime, clap will check\nif this arg (`self`) is present and its value equals to `val`.\nIf it does, `another_arg` will be marked as required.\n\n**NOTE:** If using YAML the values should be laid out as follows\n\n```yaml\nrequires_if:\n    - [val, arg]\n```\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_if(\"val\", \"arg\")\n# ;\n```\n\nSetting `Arg::requires_if(val, arg)` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument is anything other than\n`val`, the other argument isn't required.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"other\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"some.cfg\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --config=my.cfg, so other wasn't required\n```\n\nSetting `Arg::requires_if(val, arg)` and setting the value to `val` but *not* supplying\n`arg` is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"my.cfg\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:882":{"id":"0:882","crate_id":0,"name":"overrides_with","span":{"filename":"src/build/arg/mod.rs","begin":[1288,4],"end":[1291,5]},"visibility":"public","docs":"Sets an overridable argument by name. I.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**WARNING:** Positional arguments and options which accept\n[`ArgSettings::MultipleOccurrences`] cannot override themselves (or we\nwould never be able to advance to the next positional). If a positional\nargument or option with one of the [`ArgSettings::MultipleOccurrences`]\nsettings lists itself as an override, it is simply ignored.\n\n# Examples\n\n```rust # use clap::{App, Arg};\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::from(\"-f, --flag 'some flag'\")\n        .conflicts_with(\"debug\"))\n    .arg(Arg::from(\"-d, --debug 'other flag'\"))\n    .arg(Arg::from(\"-c, --color 'third flag'\")\n        .overrides_with(\"flag\"))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~~~~~~~^~~~~ flag is overridden by color\n\nassert!(m.is_present(\"color\"));\nassert!(m.is_present(\"debug\")); // even though flag conflicts with debug, it's as if flag\n                                // was never used because it was overridden with color\nassert!(!m.is_present(\"flag\"));\n```\nCare must be taken when using this setting, and having an arg override with itself. This\nis common practice when supporting things like shell aliases, config files, etc.\nHowever, when combined with multiple values, it can get dicy.\nHere is how clap handles such situations:\n\nWhen a flag overrides itself, it's as if the flag was only ever used once (essentially\npreventing a \"Unexpected multiple usage\" error):\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"posix\")\n            .arg(Arg::from(\"--flag  'some flag'\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"posix\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\nassert_eq!(m.occurrences_of(\"flag\"), 1);\n```\n\nMaking an arg [`ArgSettings::MultipleOccurrences`] and override itself\nis essentially meaningless. Therefore clap ignores an override of self\nif it's a flag and it already accepts multiple occurrences.\n\n```\n# use clap::{App, Arg};\nlet m = App::new(\"posix\")\n            .arg(Arg::from(\"--flag...  'some flag'\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"\", \"--flag\", \"--flag\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\nassert_eq!(m.occurrences_of(\"flag\"), 4);\n```\n\nNow notice with options (which *do not* set\n[`ArgSettings::MultipleOccurrences`]), it's as if only the last\noccurrence happened.\n\n```\n# use clap::{App, Arg};\nlet m = App::new(\"posix\")\n            .arg(Arg::from(\"--opt [val] 'some option'\").overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt=some\", \"--opt=other\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.occurrences_of(\"opt\"), 1);\nassert_eq!(m.value_of(\"opt\"), Some(\"other\"));\n```\n\nThis will also work when [`ArgSettings::MultipleValues`] is enabled:\n\n```\n# use clap::{App, Arg};\nlet m = App::new(\"posix\")\n            .arg(\n                Arg::new(\"opt\")\n                    .long(\"opt\")\n                    .takes_value(true)\n                    .multiple_values(true)\n                    .overrides_with(\"opt\")\n            )\n            .get_matches_from(vec![\"\", \"--opt\", \"1\", \"2\", \"--opt\", \"3\", \"4\", \"5\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.occurrences_of(\"opt\"), 1);\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"3\", \"4\", \"5\"]);\n```\n\nJust like flags, options with [`ArgSettings::MultipleOccurrences`] set\nwill ignore the \"override self\" setting.\n\n```\n# use clap::{App, Arg};\nlet m = App::new(\"posix\")\n            .arg(Arg::from(\"--opt [val]... 'some option'\")\n                .overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt\", \"first\", \"over\", \"--opt\", \"other\", \"val\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.occurrences_of(\"opt\"), 2);\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"first\", \"over\", \"other\", \"val\"]);\n```","links":{"`ArgSettings::MultipleValues`":"0:3220","`ArgSettings::MultipleOccurrences`":"0:3220"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:686":{"id":"0:686","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[108,0],"end":[205,1]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:688","0:689","0:690","0:691","0:692"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:975":{"id":"0:975","crate_id":0,"name":"hide_env","span":{"filename":"src/build/arg/mod.rs","begin":[4128,4],"end":[4134,5]},"visibility":"public","docs":"Specifies that environment variable arguments should not be displayed in the help text.\n\nThis is useful when the variable option is explained elsewhere in the help text.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::HideEnv)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .env(\"MODE\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::HideEnv));\n\n```\n\nIf we were to run the above program with `--help` the `[env: MODE]` portion of the help\ntext would be omitted.","links":{},"attrs":["#[cfg(feature = \"env\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1853":{"id":"0:1853","crate_id":0,"name":"default","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1023,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:516":{"id":"0:516","crate_id":0,"name":"render_version","span":{"filename":"src/build/app/mod.rs","begin":[1946,4],"end":[1948,5]},"visibility":"public","docs":"Returns the version message rendered as if the user ran `-V`.\n\n**NOTE:** clap has the ability to distinguish between \"short\" and \"long\" version messages\ndepending on if the user ran [`-V` (short)] or [`--version` (long)].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::App;\nuse std::io;\nlet app = App::new(\"myprog\");\nprintln!(\"{}\", app.render_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: App::version()\n[`--version` (long)]: App::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"App::long_version()":"0:2889","App::version()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4434":{"id":"1:4434","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4435","1:4436","1:4437","1:4439","1:4440","1:4442","1:4443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:518":{"id":"0:518","crate_id":0,"name":"render_usage","span":{"filename":"src/build/app/mod.rs","begin":[1985,4],"end":[1993,5]},"visibility":"public","docs":"Returns the usage statement\n\n### Examples\n\n```rust\n# use clap::App;\nuse std::io;\nlet mut app = App::new(\"myprog\");\nprintln!(\"{}\", app.render_usage());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:483":{"id":"0:483","crate_id":0,"name":"short_flag_aliases","span":{"filename":"src/build/app/mod.rs","begin":[1300,4],"end":[1306,5]},"visibility":"public","docs":"Allows adding aliases, which function as \"hidden\" short flag subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n    .subcommand(App::new(\"test\").short_flag('t')\n        .short_flag_aliases(&['a', 'b', 'c']))\n        .arg(Arg::new(\"input\")\n            .about(\"the file to add\")\n            .index(1)\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"-a\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2812":{"id":"0:2812","crate_id":0,"name":"AppSettings","span":{"filename":"src/build/app/settings.rs","begin":[144,0],"end":[1045,1]},"visibility":"public","docs":"Application level settings, which affect how [`App`] operates\n\n**NOTE:** When these settings are used, they apply only to current command, and are *not*\npropagated down or up through child or parent subcommands\n\n[`App`]: crate::App","links":{"crate::App":"0:2889"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:2813","0:2815","0:2817","0:2819","0:2821","0:2823","0:2825","0:2827","0:2829","0:2831","0:2833","0:2835","0:2837","0:2839","0:2841","0:2843","0:2845","0:2847","0:2849","0:2851","0:2853","0:2855","0:2857","0:2859","0:2861","0:2863","0:2865","0:2867","0:2869","0:2871","0:2873","0:2875"],"impls":["a:2:3012-0:2812","a:2:3024-0:2812","a:2:3053-0:2812","a:2:8360-0:2812","a:2:8361-0:2812","b:2:2945-0:2812","b:2:2941-0:2812","b:5:658-0:2812","b:2:2956-0:2812","b:2:2951-0:2812","b:2:2617-0:2812","b:2:2620-0:2812","b:2:3675-0:2812","0:2887","0:2886","0:2884","0:2881","0:2809","0:2806","0:2883"]}},"0:1593":{"id":"0:1593","crate_id":0,"name":"use_stderr","span":{"filename":"src/parse/errors.rs","begin":[495,4],"end":[500,5]},"visibility":"public","docs":"Should the message be written to `stdout` or not","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:3610":{"id":"a:2:3053-0:3610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3271":{"id":"0:3271","crate_id":0,"name":"ValueHint","span":{"filename":"src/build/arg/value_hint.rs","begin":[26,0],"end":[64,1]},"visibility":"public","docs":"Provides hints about argument types for shell command completion.\n\nSee the `clap_generate` crate for completion script generation.\n\nOverview of which hints are supported by which shell:\n\n| Hint                   | zsh | fish[^1]|\n| ---------------------- | --- | ------- |\n| `AnyPath`              | Yes | Yes     |\n| `FilePath`             | Yes | Yes     |\n| `DirPath`              | Yes | Yes     |\n| `ExecutablePath`       | Yes | Partial |\n| `CommandName`          | Yes | Yes     |\n| `CommandString`        | Yes | Partial |\n| `CommandWithArguments` | Yes |         |\n| `Username`             | Yes | Yes     |\n| `Hostname`             | Yes | Yes     |\n| `Url`                  | Yes |         |\n| `EmailAddress`         | Yes |         |\n\n[^1]: fish completions currently only support named arguments (e.g. -o or --opt), not\n      positional arguments.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3272","0:3274","0:3276","0:3278","0:3280","0:3282","0:3284","0:3286","0:3288","0:3290","0:3292","0:3294","0:3296"],"impls":["a:2:3012-0:3271","a:2:3024-0:3271","a:2:3053-0:3271","a:2:8360-0:3271","a:2:8361-0:3271","b:2:2945-0:3271","b:2:2941-0:3271","b:5:658-0:3271","b:2:2956-0:3271","b:2:2951-0:3271","b:2:2617-0:3271","b:2:2620-0:3271","b:2:3675-0:3271","0:3304","0:3303","0:726","0:3301","0:3298","0:728","0:3300"]}},"2:7471":{"id":"2:7471","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7473","2:7475","2:7476"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:1026":{"id":"0:1026","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5183,0],"end":[5238,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1028"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1623":{"id":"0:1623","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[1117,0],"end":[1123,1]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1624"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2861":{"id":"0:2861","crate_id":0,"name":"SubcommandsNegateReqs","span":{"filename":"src/build/app/settings.rs","begin":[892,4],"end":[892,25]},"visibility":"default","docs":"Allows [`subcommands`] to override all requirements of the parent command.\nFor example, if you had a subcommand or top level application with a required argument\nthat is only required as long as there is no subcommand present,\nusing this setting would allow you to set those arguments to [`Arg::required(true)`]\nand yet receive no error so long as the user uses a valid subcommand instead.\n\n**NOTE:** This defaults to false (using subcommand does *not* negate requirements)\n\n# Examples\n\nThis first example shows that it is an error to not use a required argument\n\n```rust\n# use clap::{App, Arg, AppSettings, ErrorKind};\nlet err = App::new(\"myprog\")\n    .setting(AppSettings::SubcommandsNegateReqs)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(App::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\"\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n# ;\n```\n\nThis next example shows that it is no longer error to not use a required argument if a\nvalid subcommand is used.\n\n```rust\n# use clap::{App, Arg, AppSettings, ErrorKind};\nlet noerr = App::new(\"myprog\")\n    .setting(AppSettings::SubcommandsNegateReqs)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(App::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"test\"\n    ]);\nassert!(noerr.is_ok());\n# ;\n```\n\n[`Arg::required(true)`]: crate::Arg::required()\n[`subcommands`]: crate::App::subcommand()","links":{"crate::Arg::required()":"0:3323","crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:439":{"id":"0:439","crate_id":0,"name":"long_flag","span":{"filename":"src/build/app/mod.rs","begin":[675,4],"end":[678,5]},"visibility":"public","docs":"Allows the subcommand to be used as if it were an [`Arg::long`].\n\nSets the long version of the subcommand flag without the preceding `--`.\n\n**NOTE:** Any leading `-` characters will be stripped.\n\n# Examples\n\nTo set `long_flag` use a word containing valid UTF-8 codepoints. If you supply a double leading\n`--` such as `--sync` they will be stripped. Hyphens in the middle of the word; however,\nwill *not* be stripped (i.e. `sync-file` is allowed).\n\n```\n# use clap::{App, Arg};\nlet matches = App::new(\"pacman\")\n    .subcommand(\n        App::new(\"sync\").long_flag(\"sync\").arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .about(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"--sync\", \"--search\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(sync_matches.is_present(\"search\"));\n```\n\n[`Arg::long`]: Arg::long()","links":{"Arg::long()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:813":{"id":"0:813","crate_id":0,"name":"get_name","span":{"filename":"src/build/arg/mod.rs","begin":[131,4],"end":[133,5]},"visibility":"public","docs":"Get the name of the argument","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:150":{"id":"0:150","crate_id":0,"name":"from_str","span":{"filename":"src/derive.rs","begin":[294,4],"end":[304,5]},"visibility":"default","docs":"Parse an argument into `Self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["case_insensitive",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12429":{"id":"2:12429","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7425":{"id":"2:7425","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7427"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:2941":{"id":"0:2941","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[64,43],"end":[64,45]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3603":{"id":"0:3603","crate_id":0,"name":"clone","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[995,9],"end":[995,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3615":{"id":"0:3615","crate_id":0,"name":"clone","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1088,9],"end":[1088,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3384":{"id":"0:3384","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,25],"end":[78,34]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:146":{"id":"0:146","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[262,4],"end":[262,42]},"visibility":"default","docs":"Test whether `Self` can parse a specific subcommand","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:3264":{"id":"0:3264","crate_id":0,"name":"fmt","span":{"filename":"src/build/arg/settings.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3284":{"id":"0:3284","crate_id":0,"name":"CommandName","span":{"filename":"src/build/arg/value_hint.rs","begin":[41,4],"end":[41,15]},"visibility":"default","docs":"Name of a command, without arguments. May be relative to PATH, or full path to executable.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1793":{"id":"0:1793","crate_id":0,"name":"values_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[237,4],"end":[247,5]},"visibility":"public","docs":"Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n(i.e. an argument that takes multiple values at runtime). If the option wasn't present at\nruntime it returns `None`\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"output\")\n        .multiple_occurrences(true)\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"myprog\", \"-o\", \"val1\", \"-o\", \"val2\", \"-o\", \"val3\"\n    ]);\nlet vals: Vec<&str> = m.values_of(\"output\").unwrap().collect();\nassert_eq!(vals, [\"val1\", \"val2\", \"val3\"]);\n```\n[`Iterator`]: std::iter::Iterator","links":{"std::iter::Iterator":"2:7642","`Values`":"0:3597","crate::ArgSettings::AllowInvalidUtf8":"0:3220","`panic!`":"1:9"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3675-0:3610":{"id":"b:2:3675-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3012-0:3271":{"id":"a:2:3012-0:3271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2617-0:3616":{"id":"b:2:2617-0:3616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2809":{"id":"0:2809","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[63,0],"end":[135,1]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2810","0:2811"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:866":{"id":"0:866","crate_id":0,"name":"required_unless_present_all","span":{"filename":"src/build/arg/mod.rs","begin":[923,4],"end":[930,5]},"visibility":"public","docs":"Sets this arg as [required] unless *all* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *all* of the `names` arguments.\n\n**NOTE:** If you wish for this argument to only be required unless *any of* these args are\npresent see [`Arg::required_unless_present_any`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_all(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nIn the following example, the required argument is *not* provided, but it's not an error\nbecause *all* of the `names` args have been supplied.\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"-i\", \"file\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_all(names)`] and *not* supplying\neither *all* of `unless` args or the `self` arg is an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all(names)`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_any()":"0:3323","Arg::required()":"0:3323","Arg::required_unless_present_all()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3464":{"id":"2:3464","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:973":{"id":"0:973","crate_id":0,"name":"case_insensitive","span":{"filename":"src/build/arg/mod.rs","begin":[4030,4],"end":[4036,5]},"visibility":"public","docs":"When used with [`Arg::possible_values`] it allows the argument\nvalue to pass validation even if the case differs from that of\nthe specified `possible_value`.\n\nWhen other arguments are conditionally required based on the\nvalue of a case-insensitive argument, the equality check done\nby [`Arg::required_if_eq`], [`Arg::required_if_eq_any`], or\n[`Arg::required_if_eq_all`] is case-insensitive.\n\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .long(\"--option\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::IgnoreCase)\n        .possible_value(\"test123\"))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\",\n    ]);\n\nassert!(m.value_of(\"option\").unwrap().eq_ignore_ascii_case(\"test123\"));\n```\n\nThis setting also works when multiple values can be defined:\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .long(\"--option\")\n        .setting(ArgSettings::IgnoreCase)\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::MultipleValues)\n        .possible_value(\"test123\")\n        .possible_value(\"test321\"))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\", \"teST123\", \"tESt321\"\n    ]);\n\nlet matched_vals = m.values_of(\"option\").unwrap().collect::<Vec<_>>();\nassert_eq!(&*matched_vals, &[\"TeSt123\", \"teST123\", \"tESt321\"]);\n```","links":{"`Arg::possible_values`":"0:3323","`Arg::required_if_eq_any`":"0:3323","`ArgSettings::TakesValue`":"0:3220","`Arg::required_if_eq_all`":"0:3323","`Arg::required_if_eq`":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ci",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3543":{"id":"0:3543","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[25,16],"end":[25,20]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2945-0:2889":{"id":"b:2:2945-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2886":{"id":"0:2886","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[143,27],"end":[143,31]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3541":{"id":"0:3541","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[25,9],"end":[25,14]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3542"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1007":{"id":"0:1007","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[5071,0],"end":[5075,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1009"],"negative":false,"synthetic":false,"blanket_impl":null}},"25:22":{"id":"25:22","crate_id":25,"name":"Equivalent","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:24"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:1064":{"id":"0:1064","crate_id":0,"name":"clone","span":{"filename":"src/build/arg_group.rs","begin":[591,4],"end":[601,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:430":{"id":"0:430","crate_id":0,"name":"after_help","span":{"filename":"src/build/app/mod.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":"Adds additional help information to be displayed at the end of the\nauto-generated help. This is often used to describe how to use the\narguments, caveats to be noted, or license and contact information.\n\n**NOTE:** If only `after_long_help` is provided, and not [`App::after_help`] but the user requests\n`-h` clap will still display the contents of `after_help` appropriately.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .after_help(\"Does really amazing things for great people... but be careful with -R!\")\n# ;\n```\n\n[`App::after_help`]: App::after_help()","links":{"App::after_help()":"0:2889"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1003":{"id":"0:1003","crate_id":0,"name":"from","span":{"filename":"src/build/arg/mod.rs","begin":[5060,4],"end":[5062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5157":{"id":"5:5157","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5159","5:5160"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3300":{"id":"0:3300","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[25,16],"end":[25,25]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3529":{"id":"0:3529","crate_id":0,"name":"DisplayHelp","span":{"filename":"src/parse/errors.rs","begin":[362,4],"end":[362,15]},"visibility":"default","docs":"Not a true \"error\" as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.\n\n**Note**: If the help is displayed due to an error (such as missing subcommands) it will\nbe sent to `stderr` instead of `stdout`.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .try_get_matches_from(vec![\"prog\", \"--help\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::DisplayHelp);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12361":{"id":"2:12361","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12388":{"id":"2:12388","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1628":{"id":"0:1628","crate_id":0,"name":"source","span":{"filename":"src/parse/errors.rs","begin":[1135,4],"end":[1137,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(trivial_casts)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"error::Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:681":{"id":"0:681","crate_id":0,"name":"get_name_and_aliases","span":{"filename":"src/build/arg/arg_value.rs","begin":[78,4],"end":[80,5]},"visibility":"public","docs":"Returns all valid values of the argument value.\nNamely the name and all aliases.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2990":{"id":"2:2990","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:126":{"id":"0:126","crate_id":0,"name":"update_from","span":{"filename":"src/derive.rs","begin":[111,4],"end":[120,5]},"visibility":"default","docs":"Update from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2458":{"id":"0:2458","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[58,0],"end":[62,1]},"visibility":{"restricted":{"parent":"0:2457","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2459"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2951-0:3369":{"id":"b:2:2951-0:3369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8361":{"id":"2:8361","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3675-0:3271":{"id":"b:2:3675-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:96":{"id":"0:96","crate_id":0,"name":"value_t","span":{"filename":"src/macros.rs","begin":[657,0],"end":[664,1]},"visibility":"public","docs":"Deprecated, see [`ArgMatches::value_of_t`]","links":{},"attrs":["#[macro_export]","#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `ArgMatches::value_of_t`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `ArgMatches::value_of_t`"},"kind":"macro","inner":"macro_rules! value_t {\n    ($m : ident, $v : expr, $t : ty) => { ... };\n    ($m : ident.value_of($v : expr), $t : ty) => { ... };\n}"},"0:3533":{"id":"0:3533","crate_id":0,"name":"DisplayVersion","span":{"filename":"src/parse/errors.rs","begin":[402,4],"end":[402,18]},"visibility":"default","docs":"Not a true \"error\" as it means `--version` or similar was used.\nThe message will be sent to `stdout`.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet result = App::new(\"prog\")\n    .version(\"3.0\")\n    .try_get_matches_from(vec![\"prog\", \"--version\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind, ErrorKind::DisplayVersion);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:937":{"id":"0:937","crate_id":0,"name":"max_values","span":{"filename":"src/build/arg/mod.rs","begin":[2538,4],"end":[2541,5]},"visibility":"public","docs":"Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\nthis argument would be satisfied if the user provided, 1, 2, or 3 values.\n\n**NOTE:** This does *not* implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nArg::new(\"file\")\n    .short('f')\n    .max_values(3);\n```\n\nSupplying less than the maximum number of values is allowed\n\n```rust\n# use clap::{App, Arg};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(3)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\"]);\n```\n\nSupplying more than the maximum number of values is an error\n\n```rust\n# use clap::{App, Arg, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3386":{"id":"0:3386","crate_id":0,"name":null,"span":{"filename":"src/build/arg_group.rs","begin":[78,25],"end":[78,34]},"visibility":{"restricted":{"parent":"0:1031","path":"::build::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3369","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3388","0:3389"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2825":{"id":"0:2825","crate_id":0,"name":"ArgsNegateSubcommands","span":{"filename":"src/build/app/settings.rs","begin":[405,4],"end":[405,25]},"visibility":"default","docs":"Specifies that use of a valid argument negates [`subcommands`] being\nused after. By default `clap` allows arguments between subcommands such\nas `<cmd> [cmd_args] <subcmd> [subcmd_args] <subsubcmd> [subsubcmd_args]`.\n\nThis setting disables that functionality and says that arguments can\nonly follow the *final* subcommand. For instance using this setting\nmakes only the following invocations possible:\n\n* `<cmd> <subcmd> <subsubcmd> [subsubcmd_args]`\n* `<cmd> <subcmd> [subcmd_args]`\n* `<cmd> [cmd_args]`\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings};\nApp::new(\"myprog\")\n    .setting(AppSettings::ArgsNegateSubcommands);\n```\n\n[`subcommands`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[337,0],"end":[2360,1]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:418","0:420","0:422","0:424","0:426","0:428","0:430","0:432","0:434","0:436","0:438","0:439","0:441","0:443","0:445","0:447","0:449","0:451","0:453","0:455","0:457","0:459","0:461","0:463","0:464","0:465","0:466","0:467","0:468","0:469","0:471","0:473","0:476","0:477","0:479","0:480","0:481","0:483","0:484","0:485","0:487","0:488","0:489","0:491","0:492","0:493","0:495","0:498","0:500","0:503","0:504","0:508","0:510","0:511","0:512","0:514","0:516","0:517","0:518","0:519","0:520","0:522","0:523","0:524","0:528","0:531","0:534","0:537","0:540"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3363":{"id":"0:3363","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[84,9],"end":[84,16]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3365"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:678":{"id":"0:678","crate_id":0,"name":"get_about","span":{"filename":"src/build/arg/arg_value.rs","begin":[57,4],"end":[59,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12368":{"id":"2:12368","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:44574"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:477":{"id":"0:477","crate_id":0,"name":"alias","span":{"filename":"src/build/app/mod.rs","begin":[1201,4],"end":[1204,5]},"visibility":"public","docs":"If this `App` instance is a subcommand, this method adds an alias, which\nallows this subcommand to be accessed via *either* the original name, or\nthis given alias. This is more efficient and easier than creating\nmultiple hidden subcommands as one only needs to check for the existence\nof this command, and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If you're looking for aliases that will be displayed in the help\nmessage, see [`App::visible_alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{App, Arg, };\nlet m = App::new(\"myprog\")\n    .subcommand(App::new(\"test\")\n        .alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_alias`]: App::visible_alias()","links":{"App::visible_alias()":"0:2889","`ArgMatches`":"0:3583"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:21934":{"id":"2:21934","crate_id":2,"name":"Select","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Mask","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21928","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Mask"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2956-0:3610":{"id":"b:2:2956-0:3610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:3610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:861":{"id":"1:861","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:862","1:863","1:864","1:865","1:866","1:867","1:868"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:848":{"id":"0:848","crate_id":0,"name":"short_alias","span":{"filename":"src/build/arg/mod.rs","begin":[498,4],"end":[503,5]},"visibility":"public","docs":"Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden arguments as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .short('t')\n            .short_alias('e')\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-e\", \"cool\"\n        ]);\nassert!(m.is_present(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{"`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12444":{"id":"2:12444","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":"get_short_flag","span":{"filename":"src/build/app/mod.rs","begin":[112,4],"end":[114,5]},"visibility":"public","docs":"Get the short flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:2812":{"id":"b:2:2951-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3053-0:3271":{"id":"a:2:3053-0:3271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:951":{"id":"0:951","crate_id":0,"name":"default_missing_values_os","span":{"filename":"src/build/arg/mod.rs","begin":[2940,4],"end":[2943,5]},"visibility":"public","docs":"Provides default values in the exact same manner as [`Arg::default_missing_values`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_missing_values`]: Arg::default_missing_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_values()":"0:3323","std::ffi::OsStr":"1:2786"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:963":{"id":"0:963","crate_id":0,"name":"last","span":{"filename":"src/build/arg/mod.rs","begin":[3478,4],"end":[3484,5]},"visibility":"public","docs":"Specifies that this arg is the last, or final, positional argument (i.e. has the highest\nindex) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\nlast_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax\nthey will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\nallows one to access this arg early using the `--` syntax. Accessing an arg early, even with\nthe `--` syntax is otherwise not possible.\n\n**NOTE:** This will change the usage string to look like `$ prog [OPTIONS] [-- <ARG>]` if\n`ARG` is marked as `.last(true)`.\n\n**NOTE:** This setting will imply [`crate::AppSettings::DontCollapseArgsInUsage`] because failing\nto set this can make the usage string very confusing.\n\n**NOTE**: This setting only applies to positional arguments, and has no affect on OPTIONS\n\n**NOTE:** Setting this requires [`crate::ArgSettings::TakesValue`]\n\n**CAUTION:** Using this setting *and* having child subcommands is not\nrecommended with the exception of *also* using [`crate::AppSettings::ArgsNegateSubcommands`]\n(or [`crate::AppSettings::SubcommandsNegateReqs`] if the argument marked `Last` is also\nmarked [`ArgSettings::Required`])\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgSettings};\nArg::new(\"args\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::Last)\n# ;\n```\n\nSetting [`ArgSettings::Last`] ensures the arg has the highest [index] of all positional args\nand requires that the `--` syntax be used to access it early.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::Last))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"--\", \"three\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"third\"), Some(\"three\"));\nassert!(m.value_of(\"second\").is_none());\n```\n\nEven if the positional argument marked `Last` is the only argument left to parse,\nfailing to use the `--` syntax results in an error.\n\n```rust\n# use clap::{App, Arg, ErrorKind, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::Last))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"two\", \"three\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::UnknownArgument);\n```\n[index]: Arg::index()\n[`UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"`crate::AppSettings::SubcommandsNegateReqs`":"0:2812","`crate::AppSettings::DontCollapseArgsInUsage`":"0:2812","crate::ErrorKind::UnknownArgument":"0:3496","`ArgSettings::Required`":"0:3220","Arg::index()":"0:3323","`crate::ArgSettings::TakesValue`":"0:3220","`ArgSettings::Last`":"0:3220","`crate::AppSettings::ArgsNegateSubcommands`":"0:2812"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["l",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2823":{"id":"0:2823","crate_id":0,"name":"AllowExternalSubcommands","span":{"filename":"src/build/app/settings.rs","begin":[382,4],"end":[382,28]},"visibility":"default","docs":"Specifies that an unexpected positional argument,\nwhich would otherwise cause a [`ErrorKind::UnknownArgument`] error,\nshould instead be treated as a [`subcommand`] within the [`ArgMatches`] struct.\n\n**NOTE:** Use this setting with caution,\nas a truly unexpected argument (i.e. one that is *NOT* an external subcommand)\nwill **not** cause an error and instead be treated as a potential subcommand.\nOne should check for such cases manually and inform the user appropriately.\n\n# Examples\n\n```rust\n# use clap::{App, AppSettings};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = App::new(\"myprog\")\n    .setting(AppSettings::AllowExternalSubcommands)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&str> = ext_m.values_of(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`subcommand`]: crate::App::subcommand()\n[`ArgMatches`]: crate::ArgMatches\n[`ErrorKind::UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"crate::ErrorKind::UnknownArgument":"0:3496","crate::App::subcommand()":"0:2889","crate::ArgMatches":"0:3583"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3227":{"id":"0:3227","crate_id":0,"name":"ForbidEmptyValues","span":{"filename":"src/build/arg/settings.rs","begin":[91,4],"end":[91,21]},"visibility":"default","docs":"Forbids an arg from accepting empty values such as `\"\"`","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:839":{"id":"0:839","crate_id":0,"name":"with_name","span":{"filename":"src/build/arg/mod.rs","begin":[349,4],"end":[351,5]},"visibility":"public","docs":"Deprecated, see [`Arg::new`]","links":{"`Arg::new`":"0:3323"},"attrs":["#[deprecated(since = \"3.0.0\", note = \"Replaced with `Arg::new`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `Arg::new`"},"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3548":{"id":"0:3548","crate_id":0,"name":"eq","span":{"filename":"src/parse/errors.rs","begin":[25,29],"end":[25,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:3496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":"IntoApp","span":{"filename":"src/derive.rs","begin":[136,0],"end":[145,1]},"visibility":"public","docs":"Build an [`App`] relevant for a user-defined container.","links":{"`App`":"0:2889"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:133","0:135"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:165"]}},"0:835":{"id":"0:835","crate_id":0,"name":null,"span":{"filename":"src/build/arg/mod.rs","begin":[319,0],"end":[4916,1]},"visibility":{"restricted":{"parent":"0:661","path":"::build::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:837","0:839","0:841","0:843","0:844","0:846","0:848","0:849","0:851","0:852","0:854","0:855","0:857","0:858","0:859","0:860","0:861","0:862","0:864","0:866","0:869","0:872","0:875","0:878","0:880","0:881","0:882","0:884","0:886","0:888","0:890","0:893","0:895","0:897","0:900","0:902","0:905","0:908","0:909","0:910","0:914","0:916","0:918","0:920","0:921","0:922","0:929","0:936","0:937","0:938","0:939","0:940","0:941","0:942","0:943","0:944","0:946","0:947","0:948","0:949","0:951","0:952","0:954","0:956","0:958","0:960","0:961","0:962","0:963","0:964","0:965","0:966","0:967","0:968","0:969","0:970","0:971","0:972","0:973","0:974","0:975","0:976","0:977","0:978","0:979","0:980","0:981","0:982","0:983","0:984","0:985","0:986","0:987","0:989","0:990","0:992","0:993","0:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:726":{"id":"0:726","crate_id":0,"name":null,"span":{"filename":"src/build/arg/value_hint.rs","begin":[66,0],"end":[70,1]},"visibility":{"restricted":{"parent":"0:722","path":"::build::arg::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:727"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5402":{"id":"5:5402","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:3728":{"id":"a:2:3012-0:3728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1048":{"id":"0:1048","crate_id":0,"name":"arg","span":{"filename":"src/build/arg_group.rs","begin":[160,4],"end":[163,5]},"visibility":"public","docs":"Adds an [argument] to this group by name\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgGroup};\nlet m = App::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .arg(\"flag\")\n        .arg(\"color\"))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.is_present(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.is_present(\"flag\"));\n```\n[argument]: crate::Arg","links":{"crate::Arg":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2959":{"id":"2:2959","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:36055","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2956-0:3549":{"id":"b:2:2956-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:658-0:2889":{"id":"b:5:658-0:2889","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0":{"id":"0:0","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[85,1]},"visibility":"public","docs":"<!-- omit in TOC -->\n# clap\n\n[![Crates.io](https://img.shields.io/crates/v/clap?style=flat-square)](https://crates.io/crates/clap)\n[![Crates.io](https://img.shields.io/crates/d/clap?style=flat-square)](https://crates.io/crates/clap)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue?style=flat-square)](https://github.com/clap-rs/clap/blob/master/LICENSE-APACHE)\n[![License](https://img.shields.io/badge/license-MIT-blue?style=flat-square)](https://github.com/clap-rs/clap/blob/master/LICENSE-MIT)\n[![Build Status](https://img.shields.io/github/workflow/status/clap-rs/clap/CI/staging?style=flat-square)](https://github.com/clap-rs/clap/actions/workflows/ci.yml?query=branch%3Astaging)\n[![Coverage Status](https://img.shields.io/coveralls/github/clap-rs/clap/master?style=flat-square)](https://coveralls.io/github/clap-rs/clap?branch=master)\n[![Contributors](https://img.shields.io/github/contributors/clap-rs/clap?style=flat-square)](https://github.com/clap-rs/clap/graphs/contributors)\n\nCommand Line Argument Parser for Rust\n\nIt is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing command line, console or terminal applications.\n\n* [Documentation][docs]\n* [Questions & Discussions](https://github.com/clap-rs/clap/discussions)\n* [Website](https://clap.rs/)\n\nWe are currently hard at work trying to release `3.0`. We have a `3.0.0-beta.5` prerelease out but we do not give any guarantees that its API is stable. We do not have a changelog yet which will be written down after we are sure about the API stability. We recommend users to not update to the prerelease version yet and to wait for the official `3.0`.\n\n> If you're looking for the readme & examples for `clap v2.33` - find it on [github](https://github.com/clap-rs/clap/tree/v2.33.0), [crates.io](https://crates.io/crates/clap/2.33.0), [docs.rs](https://docs.rs/clap/2.33.0/clap/).\n\n1. [About](#about)\n2. [FAQ](#faq)\n3. [Features](#features)\n4. [Quick Example](#quick-example)\n      1. [Using Derive Macros](#using-derive-macros)\n      2. [Using Builder Pattern](#using-builder-pattern)\n      3. [Using YAML](#using-yaml)\n      4. [Running it](#running-it)\n5. [Try it!](#try-it)\n   1. [Pre-Built Test](#pre-built-test)\n   2. [Build Your Own Binary](#build-your-own-binary)\n6. [Usage](#usage)\n   1. [Optional Dependencies / Features](#optional-dependencies--features)\n      1. [Features enabled by default](#features-enabled-by-default)\n      2. [Opt-in features](#opt-in-features)\n      3. [Experimental features](#experimental-features)\n   2. [More Information](#more-information)\n7. [Sponsors](#sponsors)\n8. [Contributing](#contributing)\n   1. [Compatibility Policy](#compatibility-policy)\n      1. [Minimum Supported Version of Rust (MSRV)](#minimum-supported-version-of-rust-msrv)\n      2. [Breaking Changes](#breaking-changes)\n9. [License](#license)\n10. [Related Crates](#related-crates)\n\n## About\n\n`clap` is used to parse *and validate* the string of command line arguments provided by a user at runtime. You provide the list of valid possibilities, and `clap` handles the rest. This means you focus on your *applications* functionality, and less on the parsing and validating of arguments.\n\n`clap` provides many things 'for free' (with no configuration) including the traditional version and help switches (or flags) along with associated messages. If you are using subcommands, `clap` will also auto-generate a `help` subcommand and separate associated help messages.\n\nOnce `clap` parses the user provided string of arguments, it returns the matches along with any applicable values. If the user made an error or typo, `clap` informs them with a friendly message and exits gracefully (or returns a `Result` type and allows you to perform any clean up prior to exit). Because of this, you can make reasonable assumptions in your code about the validity of the arguments prior to your applications main execution.\n\n## FAQ\n\n[How does `clap` compare to structopt?](https://github.com/clap-rs/clap/blob/master/FAQ.md#how-does-clap-compare-to-structopt)\n\nFor a full FAQ, see [this](https://github.com/clap-rs/clap/blob/master/FAQ.md)\n\n## Features\n\nBelow are a few of the features which `clap` supports, full descriptions and usage can be found in the [documentation][docs] and [examples][examples] directory\n\n* Generate a CLI simply by defining a struct!\n* **Auto-generated Help, Version, and Usage information**\n  - Can optionally be fully, or partially overridden if you want a custom help, version, or usage statements\n* **Auto-generated completion scripts (Bash, Zsh, Fish, Fig, Elvish and PowerShell)**\n  - Using [`clap_generate`](https://github.com/clap-rs/clap/tree/master/clap_generate)\n  - Even works through many multiple levels of subcommands\n  - Works with options which only accept certain values\n  - Works with subcommand aliases\n* **Flags / Switches** (i.e. bool fields)\n  - Both short and long versions supported (i.e. `-f` and `--flag` respectively)\n  - Supports combining short versions (i.e. `-fBgoZ` is the same as `-f -B -g -o -Z`)\n  - Supports multiple occurrences (i.e. `-vvv` or `-v -v -v`)\n* **Positional Arguments** (i.e. those which are based off an index from the program name)\n  - Supports multiple values (i.e. `myprog <file>...` such as `myprog file1.txt file2.txt` being two values for the same \"file\" argument)\n  - Supports Specific Value Sets (See below)\n  - Can set value parameters (such as the minimum number of values, the maximum number of values, or the exact number of values)\n  - Can set custom validations on values to extend the argument parsing capability to truly custom domains\n* **Option Arguments** (i.e. those that take values)\n  - Both short and long versions supported (i.e. `-o value`, `-ovalue`, `-o=value` and `--option value` or `--option=value` respectively)\n  - Supports multiple values (i.e. `-o <val1> -o <val2>` or `-o <val1> <val2>`)\n  - Supports delimited values (i.e. `-o=val1,val2,val3`, can also change the delimiter)\n  - Supports Specific Value Sets (See below)\n  - Supports named values so that the usage/help info appears as `-o <FILE> <INTERFACE>` etc. for when you require specific multiple values\n  - Can set value parameters (such as the minimum number of values, the maximum number of values, or the exact number of values)\n  - Can set custom validations on values to extend the argument parsing capability to truly custom domains\n* **Sub-Commands** (i.e. `git add <file>` where `add` is a sub-command of `git`)\n  - Support their own sub-arguments, and sub-sub-commands independent of the parent\n  - Get their own auto-generated Help, Version, and Usage independent of parent\n* **Support for building CLIs from YAML** - This keeps your Rust source nice and tidy and makes supporting localized translation very simple!\n* **Requirement Rules**: Arguments can define the following types of requirement rules\n  - Can be required by default\n  - Can be required only if certain arguments are present\n  - Can require other arguments to be present\n  - Can be required only if certain values of other arguments are used\n* **Confliction Rules**: Arguments can optionally define the following types of exclusion rules\n  - Can be disallowed when certain arguments are present\n  - Can disallow use of other arguments when present\n* **Groups**: Arguments can be made part of a group\n  - Fully compatible with other relational rules (requirements, conflicts, and overrides) which allows things like requiring the use of any arg in a group, or denying the use of an entire group conditionally\n* **Specific Value Sets**: Positional or Option Arguments can define a specific set of allowed values (i.e. imagine a `--mode` option which may *only* have one of two values `fast` or `slow` such as `--mode fast` or `--mode slow`)\n* **Default Values**\n  - Also supports conditional default values (i.e. a default which only applies if specific arguments are used, or specific values of those arguments)\n* **Automatic Version from Cargo.toml**: `clap` is fully compatible with Rust's `env!()` macro for automatically setting the version of your application to the version in your Cargo.toml. See [09_auto_version example](examples/09_auto_version.rs) for how to do this (Thanks to [jhelwig](https://github.com/jhelwig) for pointing this out)\n* **Typed Values**: You can use several convenience macros provided by `clap` to get typed values (i.e. `i32`, `u8`, etc.) from positional or option arguments so long as the type you request implements `std::str::FromStr` See the [12_typed_values example](examples/12_typed_values.rs). You can also use `clap`s `arg_enum!` macro to create an enum with variants that automatically implement `std::str::FromStr`. See [13_enum_values example](examples/13_enum_values.rs) for details\n* **Suggestions**: Suggests corrections when the user enters a typo. For example, if you defined a `--myoption` argument, and the user mistakenly typed `--moyption` (notice `y` and `o` transposed), they would receive a `Did you mean '--myoption'?` error and exit gracefully. This also works for subcommands and flags. (Thanks to [Byron](https://github.com/Byron) for the implementation) (This feature can optionally be disabled, see 'Optional Dependencies / Features')\n* **Colorized Errors (Non Windows OS only)**: Error message are printed in colored text (this feature can optionally be disabled, see 'Optional Dependencies / Features').\n* **Global Arguments**: Arguments can optionally be defined once, and be available to all child subcommands. These values will also be propagated up/down throughout all subcommands.\n* **Custom Validations**: You can define a function to use as a validator of argument values. Imagine defining a function to validate IP addresses, or fail parsing upon error. This means your application logic can be solely focused on *using* values.\n* **POSIX Compatible Conflicts/Overrides** - In POSIX args can be conflicting, but not fail parsing because whichever arg comes *last* \"wins\" so to speak. This allows things such as aliases (i.e. `alias ls='ls -l'` but then using `ls -C` in your terminal which ends up passing `ls -l -C` as the final arguments. Since `-l` and `-C` aren't compatible, this effectively runs `ls -C` in `clap` if you choose...`clap` also supports hard conflicts that fail parsing). (Thanks to [Vinatorul](https://github.com/Vinatorul)!)\n* Supports the Unix `--` meaning, only positional arguments follow\n\n## Quick Example\n\nThe following examples show a quick example of some of the very basic functionality of `clap`. For more advanced usage, such as requirements, conflicts, groups, multiple values and occurrences see the [documentation][docs], [examples][examples] directory of this repository.\n\n **NOTE:** All of these examples are functionally the same, but show different styles in which to use `clap`. These different styles are purely a matter of personal preference.\n\nAdd `clap` to your `Cargo.toml`\n\n```toml\n[dependencies]\nclap = \"3.0.0-beta.5\"\n```\n\n#### Using Derive Macros\n\nThe first example shows the simplest way to use `clap`, by defining a struct. If you're familiar with the `structopt` crate you're in luck, it's the same! (In fact it's the exact same code running under the covers!)\n\n```rust,ignore\n// (Full example with detailed comments in examples/01d_quick_example.rs)\n//\n// This example demonstrates clap's full 'custom derive' style of creating arguments which is the\n// simplest method of use, but sacrifices some flexibility.\nuse clap::{AppSettings, Parser};\n\n/// This doc string acts as a help message when the user runs '--help'\n/// as do all doc strings on fields\n#[derive(Parser)]\n#[clap(version = \"1.0\", author = \"Kevin K. <kbknapp@gmail.com>\")]\nstruct Opts {\n    /// Sets a custom config file. Could have been an Option<T> with no default too\n    #[clap(short, long, default_value = \"default.conf\")]\n    config: String,\n    /// Some input. Because this isn't an Option<T> it's required to be used\n    input: String,\n    /// A level of verbosity, and can be used multiple times\n    #[clap(short, long, parse(from_occurrences))]\n    verbose: i32,\n    #[clap(subcommand)]\n    subcmd: SubCommand,\n}\n\n#[derive(Parser)]\nenum SubCommand {\n    #[clap(version = \"1.3\", author = \"Someone E. <someone_else@other.com>\")]\n    Test(Test),\n}\n\n/// A subcommand for controlling testing\n#[derive(Parser)]\nstruct Test {\n    /// Print debug info\n    #[clap(short)]\n    debug: bool\n}\n\nfn main() {\n    let opts: Opts = Opts::parse();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    println!(\"Value for config: {}\", opts.config);\n    println!(\"Using input file: {}\", opts.input);\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match opts.verbose {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        _ => println!(\"Don't be ridiculous\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    match opts.subcmd {\n        SubCommand::Test(t) => {\n            if t.debug {\n                println!(\"Printing debug info...\");\n            } else {\n                println!(\"Printing normally...\");\n            }\n        }\n    }\n\n    // more program logic goes here...\n}\n```\n\n#### Using Builder Pattern\n\nThis second method shows a method using the 'Builder Pattern' which allows more advanced configuration options (not shown in this small example), or even dynamically generating arguments when desired. The downside is it's more verbose.\n\n```rust,no_run\n// (Full example with detailed comments in examples/01b_quick_example.rs)\n//\n// This example demonstrates clap's \"builder pattern\" method of creating arguments\n// which the most flexible, but also most verbose.\nuse clap::{Arg, App};\n\nfn main() {\n    let matches = App::new(\"My Super Program\")\n        .version(\"1.0\")\n        .author(\"Kevin K. <kbknapp@gmail.com>\")\n        .about(\"Does awesome things\")\n        .arg(Arg::new(\"config\")\n            .short('c')\n            .long(\"config\")\n            .value_name(\"FILE\")\n            .about(\"Sets a custom config file\")\n            .takes_value(true))\n        .arg(Arg::new(\"INPUT\")\n            .about(\"Sets the input file to use\")\n            .required(true)\n            .index(1))\n        .arg(Arg::new(\"v\")\n            .short('v')\n            .multiple_occurrences(true)\n            .takes_value(true)\n            .about(\"Sets the level of verbosity\"))\n        .subcommand(App::new(\"test\")\n            .about(\"controls testing features\")\n            .version(\"1.3\")\n            .author(\"Someone E. <someone_else@other.com>\")\n            .arg(Arg::new(\"debug\")\n                .short('d')\n                .about(\"print debug information verbosely\")))\n        .get_matches();\n\n    // You can check the value provided by positional arguments, or option arguments\n    if let Some(i) = matches.value_of(\"INPUT\") {\n        println!(\"Value for input: {}\", i);\n    }\n\n    if let Some(c) = matches.value_of(\"config\") {\n        println!(\"Value for config: {}\", c);\n    }\n\n    // You can see how many times a particular flag or argument occurred\n    // Note, only flags can have multiple occurrences\n    match matches.occurrences_of(\"v\") {\n        0 => println!(\"Verbose mode is off\"),\n        1 => println!(\"Verbose mode is kind of on\"),\n        2 => println!(\"Verbose mode is on\"),\n        _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can check for the existence of subcommands, and if found use their\n    // matches just as you would the top level app\n    if let Some(ref matches) = matches.subcommand_matches(\"test\") {\n        // \"$ myapp test\" was run\n        if matches.is_present(\"debug\") {\n            // \"$ myapp test -d\" was run\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n\n    // Continued program logic goes here...\n}\n```\n\nThe next example shows a far less verbose method, but sacrifices some of the advanced configuration options (not shown in this small example). This method also takes a *very* minor runtime penalty.\n\n```rust,no_run\n// (Full example with detailed comments in examples/01a_quick_example.rs)\n//\n// This example demonstrates clap's \"usage strings\" method of creating arguments\n// which is less verbose\nuse clap::App;\n\nfn main() {\n    let matches = App::new(\"myapp\")\n        .version(\"1.0\")\n        .author(\"Kevin K. <kbknapp@gmail.com>\")\n        .about(\"Does awesome things\")\n        .arg(\"-c, --config=[FILE] 'Sets a custom config file'\")\n        .arg(\"<INPUT>              'Sets the input file to use'\")\n        .arg(\"-v...                'Sets the level of verbosity'\")\n        .subcommand(App::new(\"test\")\n            .about(\"controls testing features\")\n            .version(\"1.3\")\n            .author(\"Someone E. <someone_else@other.com>\")\n            .arg(\"-d, --debug 'Print debug information'\"))\n        .get_matches();\n\n    // Same as previous example...\n}\n```\n\n#### Using YAML\n\nThis third method shows how you can use a YAML file to build your CLI and keep your Rust source tidy\nor support multiple localized translations by having different YAML files for each localization.\n\nFirst, create the `cli.yaml` file to hold your CLI options, but it could be called anything we like:\n\n```yaml\nname: myapp\nversion: \"1.0\"\nauthor: Kevin K. <kbknapp@gmail.com>\nabout: Does awesome things\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        about: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        about: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple_occurrences: true\n        about: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                long: debug\n                about: Print debug information\n```\n\nSince this feature requires additional dependencies that not everyone may want, it is *not* compiled in by default and we need to enable a feature flag in Cargo.toml:\n\nSimply add the `yaml` feature flag to your `Cargo.toml`.\n\n```toml\n[dependencies]\nclap = { version = \"3.0.0-beta.5\", features = [\"yaml\"] }\n```\n\nFinally we create our `main.rs` file just like we would have with the previous two examples:\n\n```rust,ignore\n// (Full example with detailed comments in examples/17_yaml.rs)\n//\n// This example demonstrates clap's building from YAML style of creating arguments which is far\n// more clean, but takes a very small performance hit compared to the other two methods.\nuse clap::{App, load_yaml};\n\nfn main() {\n    // The YAML file is found relative to the current file, similar to how modules are found\n    let yaml = load_yaml!(\"cli.yaml\");\n    let matches = App::from(yaml).get_matches();\n\n    // Same as previous examples...\n}\n```\n\n#### Running it\n\nIf you were to compile any of the above programs and run them with the flag `--help` or `-h` (or `help` subcommand, since we defined `test` as a subcommand) the following would be output (except the first example where the help message sort of explains the Rust code).\n\n```bash\n$ myprog --help\nMy Super Program 1.0\nKevin K. <kbknapp@gmail.com>\nDoes awesome things\n\nARGS:\n    INPUT    The input file to use\n\nUSAGE:\n    MyApp [OPTIONS] <INPUT> [SUBCOMMAND]\n\nOPTIONS:\n    -c, --config <FILE>    Sets a custom config file\n    -h, --help             Print help information\n    -v                     Sets the level of verbosity\n    -V, --version          Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    test    Controls testing features\n```\n\n**NOTE:** You could also run `myapp test --help` or `myapp help test` to see the help message for the `test` subcommand.\n\n## Try it!\n\n### Pre-Built Test\n\nTo try out the pre-built [examples][examples], use the following steps:\n\n* Clone the repository `$ git clone https://github.com/clap-rs/clap && cd clap/`\n* Compile the example `$ cargo build --example <EXAMPLE>`\n* Run the help info `$ ./target/debug/examples/<EXAMPLE> --help`\n* Play with the arguments!\n* You can also do a onetime run via `$ cargo run --example <EXAMPLE> -- [args to example]`\n\n### Build Your Own Binary\n\nTo test out `clap`'s default auto-generated help/version follow these steps:\n* Create a new cargo project `$ cargo new fake --bin && cd fake`\n* Write your program as described in the quick example section.\n* Build your program `$ cargo build --release`\n* Run with help or version `$ ./target/release/fake --help` or `$ ./target/release/fake --version`\n\n## Usage\n\nFor full usage, add `clap` as a dependency in your `Cargo.toml` to use from crates.io:\n\n```toml\n[dependencies]\nclap = \"3.0.0-beta.5\"\n```\n\nDefine a list of valid arguments for your program (see the [documentation][docs] or [examples][examples] directory of this repo)\n\nThen run `cargo build` or `cargo update && cargo build` for your project.\n\n### Optional Dependencies / Features\n\nDisabling optional features can decrease the binary size of `clap` and decrease the compile time. If binary size or compile times are extremely important to you, it is a good idea to disable the feautres that you are not using.\n\n#### Features enabled by default\n\n* **std**: _Not Currently Used._ Placeholder for supporting `no_std` environments in a backwards compatible manner.\n* **derive**: Enables the custom derive (i.e. `#[derive(Parser)]`). Without this you must use one of the other methods of creating a `clap` CLI listed above. (builds dependency `clap_derive`)\n* **cargo**: Turns on macros that read values from `CARGO_*` environment variables.\n* **color**: Turns on colored error messages. (builds dependency `atty`, `termcolor`)\n* **env**: Turns on the usage of environment variables during parsing.\n* **suggestions**: Turns on the `Did you mean '--myoption'?` feature for when users make typos. (builds dependency `strsim`)\n* **unicode**: Turns on support for unicode characters in arguments and help messages. (builds dependency `textwrap`, `unicase`)\n\nTo disable these, add this to your `Cargo.toml`:\n\n```toml\n[dependencies.clap]\nversion = \"3.0.0-beta.5\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nYou can also selectively enable only the features you'd like to include, by adding:\n\n```toml\n[dependencies.clap]\nversion = \"3.0.0-beta.5\"\ndefault-features = false\n\n# Cherry-pick the features you'd like to use\nfeatures = [\"std\", \"suggestions\", \"color\"]\n```\n\n#### Opt-in features\n\n* **regex**: Enables regex validators. (builds dependency `regex`)\n* **wrap_help**: Turns on the help text wrapping feature, based on the terminal size. (builds dependency `term-size`)\n* **yaml**: Enables building CLIs from YAML documents. (builds dependency `yaml-rust`)\n\n#### Experimental features\n\nThese features are opt-in. But be wary that they can contain breaking changes between minor releases.\n\n* **unstable-replace**: Enable [`App::replace`](https://github.com/clap-rs/clap/issues/2836)\n* **unstable-multicall**: Enable [`AppSettings::Multicall`](https://github.com/clap-rs/clap/issues/2861)\n\n### More Information\n\nYou can find complete documentation on the [docs.rs][docs] for this project.\n\nYou can also find usage examples in the [examples][examples] directory of this repo.\n\n## Sponsors\n\n<!-- omit in TOC -->\n### Gold\n\n[![](https://opencollective.com/clap/tiers/gold.svg?avatarHeight=36&width=600)](https://opencollective.com/clap)\n\n<!-- omit in TOC -->\n### Silver\n\n[![](https://opencollective.com/clap/tiers/silver.svg?avatarHeight=36&width=600)](https://opencollective.com/clap)\n\n<!-- omit in TOC -->\n### Bronze\n\n[![](https://opencollective.com/clap/tiers/bronze.svg?avatarHeight=36&width=600)](https://opencollective.com/clap)\n\n<!-- omit in TOC -->\n### Backer\n\n[![](https://opencollective.com/clap/tiers/backer.svg?avatarHeight=36&width=600)](https://opencollective.com/clap)\n\n## Contributing\n\nDetails on how to contribute can be found in the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n### Compatibility Policy\n\nBecause `clap` takes SemVer and compatibility seriously, this is the official policy regarding breaking changes and minimum required versions of Rust.\n\n`clap` will pin the minimum required version of Rust to the CI builds. Bumping the minimum version of Rust is considered a minor breaking change, meaning *at a minimum* the minor version of `clap` will be bumped.\n\nIn order to keep from being surprised of breaking changes, it is **highly** recommended to use the `~major.minor.patch` style in your `Cargo.toml` only if you wish to target a version of Rust that is *older* than current stable minus two releases:\n\n```toml\n[dependencies]\nclap = \"~3.0.0-beta.5\"\n```\n\nThis will cause *only* the patch version to be updated upon a `cargo update` call, and therefore cannot break due to new features, or bumped minimum versions of Rust.\n\n#### Minimum Supported Version of Rust (MSRV)\n\nThe following is a list of the minimum required version of Rust to compile `clap` by our `MAJOR.MINOR` version number:\n\n|  clap  |  MSRV  |\n| :----: | :----: |\n| >=3.0  | 1.54.0 |\n| >=2.21 | 1.24.0 |\n| >=2.2  | 1.12.0 |\n| >=2.1  | 1.6.0  |\n| >=1.5  | 1.4.0  |\n| >=1.4  | 1.2.0  |\n| >=1.2  | 1.1.0  |\n| >=1.0  | 1.0.0  |\n\n#### Breaking Changes\n\n`clap` takes a similar policy to Rust and will bump the major version number upon breaking changes with only the following exceptions:\n\n * The breaking change is to fix a security concern\n * The breaking change is to be fixing a bug (i.e. relying on a bug as a feature)\n * The breaking change is a feature isn't used in the wild, or all users of said feature have given approval *prior* to the change\n\n## License\n\n`clap` is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\n\nSee the [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) files in this repository for more information.\n\n## Related Crates\n\nThere are several excellent crates which can be used with `clap`, I recommend checking them all out! If you've got a crate that would be a good fit to be used with `clap` open an issue and let me know, I'd love to add it!\n\n* [`assert_cmd`](https://github.com/assert-rs/assert_cmd) - This crate allows you test your CLIs in a very intuitive and functional way!\n\n[docs]: https://docs.rs/clap\n[examples]: https://github.com/clap-rs/clap/tree/master/examples\n<https://github.com/clap-rs/clap>","links":{},"attrs":["#![doc(html_logo_url = \"https://clap.rs/images/media/clap.png\")]","#![doc(html_root_url = \"https://docs.rs/clap/3.0.0-beta.5\")]","#![crate_type = \"lib\"]","#![deny(missing_docs, missing_debug_implementations,\n        missing_copy_implementations, trivial_casts, unused_allocation,\n        trivial_numeric_casts)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:2889","0:2812","0:3323","0:3369","0:3220","0:2960","0:3271","0:3549","0:3496","0:1582","0:3583","0:3616","0:3610","0:3597","0:3728","0:147","0:140","0:137","0:132","0:117","0:143","0:3746","0:86","0:87","0:88","0:89","0:90","0:91","0:92","0:96","0:97","0:98","0:99"]}},"0:884":{"id":"0:884","crate_id":0,"name":"overrides_with_all","span":{"filename":"src/build/arg/mod.rs","begin":[1320,4],"end":[1323,5]},"visibility":"public","docs":"Sets multiple mutually overridable arguments by name. I.e. this argument and the following\nargument will override each other in POSIX style (whichever argument was specified at\nruntime **last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::from(\"-f, --flag 'some flag'\")\n        .conflicts_with(\"color\"))\n    .arg(Arg::from(\"-d, --debug 'other flag'\"))\n    .arg(Arg::from(\"-c, --color 'third flag'\")\n        .overrides_with_all(&[\"flag\", \"debug\"]))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~^~~~~~~~~ flag and debug are overridden by color\n\nassert!(m.is_present(\"color\")); // even though flag conflicts with color, it's as if flag\n                                // and debug were never used because they were overridden\n                                // with color\nassert!(!m.is_present(\"debug\"));\nassert!(!m.is_present(\"flag\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:970":{"id":"0:970","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/build/arg/mod.rs","begin":[3887,4],"end":[3893,5]},"visibility":"public","docs":"Specifies if the possible values of an argument should be displayed in the help text or\nnot. Defaults to `false` (i.e. show possible values)\n\nThis is useful for args with many values, or ones which are explained elsewhere in the\nhelp text.\n\n**NOTE:** Setting this requires [`ArgSettings::TakesValue`]\n\n# Examples\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::TakesValue)\n    .setting(ArgSettings::HidePossibleValues)\n# ;\n```\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .possible_values([\"fast\", \"slow\"])\n        .setting(ArgSettings::TakesValue)\n        .setting(ArgSettings::HidePossibleValues));\n```\nIf we were to run the above program with `--help` the `[values: fast, slow]` portion of\nthe help text would be omitted.","links":{"`ArgSettings::TakesValue`":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["hide",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:680":{"id":"0:680","crate_id":0,"name":"get_visible_name","span":{"filename":"src/build/arg/arg_value.rs","begin":[68,4],"end":[74,5]},"visibility":"public","docs":"Get the name if argument value is not hidden, `None` otherwise","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:157":{"id":"0:157","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[313,4],"end":[315,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:849":{"id":"0:849","crate_id":0,"name":"aliases","span":{"filename":"src/build/arg/mod.rs","begin":[525,4],"end":[528,5]},"visibility":"public","docs":"Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .long(\"test\")\n                    .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"])\n                    .about(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"--do-tests\"\n            ]);\nassert!(m.is_present(\"test\"));\n```","links":{"`Arg`":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2981":{"id":"0:2981","crate_id":0,"name":null,"span":{"filename":"src/build/arg/arg_value.rs","begin":[27,43],"end":[27,45]},"visibility":{"restricted":{"parent":"0:662","path":"::build::arg::arg_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1584":{"id":"0:1584","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[443,0],"end":[458,1]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1585"],"negative":false,"synthetic":false,"blanket_impl":null}},"23:92":{"id":"23:92","crate_id":23,"name":"OsStringBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:93","23:94"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12378":{"id":"2:12378","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15275"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":"long_version","span":{"filename":"src/build/app/mod.rs","begin":[746,4],"end":[749,5]},"visibility":"public","docs":"Sets a string of the version number to be displayed when the user\nrequests the long format version message (`--version`) or the help\nmessage.\n\nThis is often used to display things such as commit ID, or compile time\nconfigured options.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time. See the [`examples/`] directory for more\ninformation.\n\n`clap` can display two different version messages, a [long format] and a\n[short format] depending on whether the user used `-V` (short) or\n`--version` (long). This method sets the message during the long format\n(`--version`). However, if no short format message is configured, this\nmessage will be displayed for *both* the long format, or short format\nversion message.\n\n# Examples\n\n```no_run\n# use clap::App;\nApp::new(\"myprog\")\n    .long_version(\n\"v0.1.24\n commit: abcdef89726d\n revision: 123\n release: 2\n binary: myprog\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html\n[`examples/`]: https://github.com/kbknapp/clap-rs/tree/master/examples\n[`App::version`]: App::version()","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3675-0:2812":{"id":"b:2:3675-0:2812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:952":{"id":"0:952","crate_id":0,"name":"default_value_if","span":{"filename":"src/build/arg/mod.rs","begin":[3059,4],"end":[3066,5]},"visibility":"public","docs":"Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to\n`None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be\npresent at runtime **and** have the value `val`.\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value`] but slightly\ndifferent. `Arg::default_value` *only* takes affect when the user has not provided this arg\nat runtime. This setting however only takes affect when the user has not provided a value at\nruntime **and** these other conditions are met as well. If you have set `Arg::default_value`\nand `Arg::default_value_if`, and the user **did not** provide this arg at runtime, nor were\nthe conditions met for `Arg::default_value_if`, the `Arg::default_value` will be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n**NOTE:** If using YAML the values should be laid out as follows (`None` can be represented\nas `null` in YAML)\n\n```yaml\ndefault_value_if:\n    - [arg, val, default]\n```\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nNow lets only use the default value if `--opt` contains the value `special`.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"special\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nWe can run the same test and provide any value *other than* `special` and we won't get a\ndefault value.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"hahaha\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nIf we want to unset the default value for an Arg based on the presence or\nvalue of some other Arg.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value(\"default\")\n        .default_value_if(\"flag\", None, None))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:3323","Arg::takes_value()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:2873":{"id":"0:2873","crate_id":0,"name":"NoAutoHelp","span":{"filename":"src/build/app/settings.rs","begin":[1015,4],"end":[1015,14]},"visibility":"default","docs":"Tells clap to treat the auto-generated `-h, --help` flags just like any other flag, and\n*not* print the help message. This allows one to handle printing of the help message\nmanually.\n\n```rust\n# use clap::{App, AppSettings};\nlet result = App::new(\"myprog\")\n    .setting(AppSettings::NoAutoHelp)\n    .try_get_matches_from(\"myprog --help\".split(\" \"));\n\n// Normally, if `--help` is used clap prints the help message and returns an\n// ErrorKind::DisplayHelp\n//\n// However, `--help` was treated like a normal flag\n\nassert!(result.is_ok());\nassert!(result.unwrap().is_present(\"help\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3282":{"id":"0:3282","crate_id":0,"name":"ExecutablePath","span":{"filename":"src/build/arg/value_hint.rs","begin":[39,4],"end":[39,18]},"visibility":"default","docs":"Path to an executable file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1786":{"id":"0:1786","crate_id":0,"name":"value_of","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[123,4],"end":[130,5]},"visibility":"public","docs":"Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn't present at runtime\nit returns `None`.\n\n*NOTE:* If getting a value for an option or positional argument that allows multiples,\nprefer [`ArgMatches::values_of`] as `ArgMatches::value_of` will only return the *first*\nvalue.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`occurrences_of`] can be used to check if a value is present at runtime.\n\n# Panics\n\nThis method will [`panic!`] if the value is invalid UTF-8.  See\n[`ArgSettings::AllowInvalidUtf8`][crate::ArgSettings::AllowInvalidUtf8].\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"something\"]);\n\nassert_eq!(m.value_of(\"output\"), Some(\"something\"));\n```\n[option]: crate::Arg::takes_value()\n[positional]: crate::Arg::index()\n[`ArgMatches::values_of`]: ArgMatches::values_of()\n[`default_value`]: crate::Arg::default_value()\n[`occurrences_of`]: crate::ArgMatches::occurrences_of()","links":{"ArgMatches::values_of()":"0:3583","crate::Arg::default_value()":"0:3323","crate::ArgMatches::occurrences_of()":"0:3583","crate::Arg::takes_value()":"0:3323","crate::ArgSettings::AllowInvalidUtf8":"0:3220","`panic!`":"1:9","crate::Arg::index()":"0:3323"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:2960":{"id":"a:2:8361-0:2960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgValue","id":"0:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:947":{"id":"0:947","crate_id":0,"name":"default_missing_value","span":{"filename":"src/build/arg/mod.rs","begin":[2911,4],"end":[2913,5]},"visibility":"public","docs":"Specifies a value for the argument when the argument is supplied and a value is required\nbut the value is *not* specified at runtime.\n\nThis configuration option is often used to give the user a shortcut and allow them to\nefficiently specify an option argument without requiring an explicitly value. The `--color`\nargument is a common example. By, supplying an default, such as `default_missing_value(\"always\")`,\nthe user can quickly just add `--color` to the command line to produce the desired color output.\n\n**NOTE:** using this configuration option requires the use of the `.min_values(0)` and the\n`.require_equals(true)` configuration option. These are required in order to unambiguously\ndetermine what, if any, value was supplied for the argument.\n\n# Examples\n\nHere is an implementation of the common POSIX style `--color` argument.\n\n```rust\n# use clap::{App, Arg};\n\nmacro_rules! app {\n    () => {{\n        App::new(\"prog\")\n            .arg(Arg::new(\"color\").long(\"color\")\n                .value_name(\"WHEN\")\n                .possible_values([\"always\", \"auto\", \"never\"])\n                .default_value(\"auto\")\n                .overrides_with(\"color\")\n                .min_values(0)\n                .require_equals(true)\n                .default_missing_value(\"always\")\n                .about(\"Specify WHEN to colorize output.\")\n            )\n   }};\n}\n\nlet mut m;\n\n// first, we'll provide no arguments\n\nm  = app!().get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"color\"), Some(\"auto\"));\nassert!(m.is_present(\"color\"));\nassert_eq!(m.occurrences_of(\"color\"), 0);\n\n// next, we'll provide a runtime value to override the default (as usually done).\n\nm  = app!().get_matches_from(vec![\n        \"prog\", \"--color=never\"\n    ]);\n\nassert_eq!(m.value_of(\"color\"), Some(\"never\"));\nassert!(m.is_present(\"color\"));\nassert_eq!(m.occurrences_of(\"color\"), 1);\n\n// finally, we will use the shortcut and only provide the argument without a value.\n\nm  = app!().get_matches_from(vec![\n        \"prog\", \"--color\"\n    ]);\n\nassert_eq!(m.value_of(\"color\"), Some(\"always\"));\nassert!(m.is_present(\"color\"));\nassert_eq!(m.occurrences_of(\"color\"), 1);\n```\n[`ArgMatches::occurrences_of`]: ArgMatches::occurrences_of()\n[`ArgMatches::value_of`]: ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`ArgMatches::is_present`]: ArgMatches::is_present()\n[`Arg::default_value`]: Arg::default_value()","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12450":{"id":"2:12450","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:3597":{"id":"b:2:2951-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1876":{"id":"0:1876","crate_id":0,"name":"next","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:399":{"id":"0:399","crate_id":0,"name":"get_opts","span":{"filename":"src/build/app/mod.rs","begin":[224,4],"end":[227,5]},"visibility":"public","docs":"Iterate through the *options*.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:3728":{"id":"b:2:2945-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2843":{"id":"0:2843","crate_id":0,"name":"PropagateVersion","span":{"filename":"src/build/app/settings.rs","begin":[689,4],"end":[689,20]},"visibility":"default","docs":"Specifies to use the version of the current command for all [`subcommands`].\n\nDefaults to `false`; subcommands have independent version strings from their parents.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n# Examples\n\n```no_run\n# use clap::{App, Arg, AppSettings};\nApp::new(\"myprog\")\n    .version(\"v1.1\")\n    .setting(AppSettings::PropagateVersion)\n    .subcommand(App::new(\"test\"))\n    .get_matches();\n// running `$ myprog test --version` will display\n// \"myprog-test v1.1\"\n```\n\n[`subcommands`]: crate::App::subcommand()","links":{"crate::App::subcommand()":"0:2889"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:964":{"id":"0:964","crate_id":0,"name":"required","span":{"filename":"src/build/arg/mod.rs","begin":[3542,4],"end":[3548,5]},"visibility":"public","docs":"Specifies that the argument is required by default. Required by default means it is\nrequired, when no other conflicting rules or overrides have been evaluated. Conflicting\nrules take precedence over being required.\n\n**NOTE:** The default is `false`.\n\n**Pro tip:** Flags (i.e. not positional, or arguments that take values) shouldn't be\nrequired by default. This is because if a flag were to be required, it should simply be\nimplied. No additional information is required from user. Flags by their very nature are\nsimply boolean on/off switches. The only time a user *should* be required to use a flag\nis if the operation is destructive in nature, and the user is essentially proving to you,\n\"Yes, I know what I'm doing.\"\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .required(true)  // equivalent to .setting(ArgSettings::Required)\n# ;\n```\n\nSetting [`Required`] requires that the argument be used at runtime.\n\n```rust\n# use clap::{App, Arg, ArgSettings};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .setting(ArgSettings::Required)\n        .setting(ArgSettings::TakesValue)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\",\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Required`] and then *not* supplying that argument at runtime is an error.\n\n```rust\n# use clap::{App, Arg, ArgSettings, ErrorKind};\nlet res = App::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .setting(ArgSettings::Required)\n        .setting(ArgSettings::TakesValue)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind, ErrorKind::MissingRequiredArgument);\n```\n[`Required`]: ArgSettings::Required","links":{"ArgSettings::Required":"0:3220"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["r",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2947":{"id":"2:2947","crate_id":2,"name":"from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:2915":{"id":"2:2915","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2917"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:408":{"id":"0:408","crate_id":0,"name":"get_arg_conflicts_with","span":{"filename":"src/build/app/mod.rs","begin":[292,4],"end":[307,5]},"visibility":"public","docs":"Get a list of all arguments the given argument conflicts with.\n\nIf the provided argument is declared as global, the conflicts will be determined\nbased on the propagation rules of global arguments.\n\n### Panics\n\nIf the given arg contains a conflict with an argument that is unknown to\nthis `App`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1884":{"id":"0:1884","crate_id":0,"name":"default","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1116,4],"end":[1121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3221":{"id":"0:3221","crate_id":0,"name":"Required","span":{"filename":"src/build/arg/settings.rs","begin":[85,4],"end":[85,12]},"visibility":"default","docs":"Specifies that an arg must be used","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:537":{"id":"0:537","crate_id":0,"name":"get_matches_from_safe_borrow","span":{"filename":"src/build/app/mod.rs","begin":[2286,4],"end":[2292,5]},"visibility":"public","docs":"Deprecated, see [`App::try_get_matches_from_mut`]","links":{"`App::try_get_matches_from_mut`":"0:2889"},"attrs":["#[deprecated(since = \"3.0.0\", note =\n             \"Replaced with `App::try_get_matches_from_mut`\")]"],"deprecation":{"since":"3.0.0","note":"Replaced with `App::try_get_matches_from_mut`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1582","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"generic","inner":"T"}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[374,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:942":{"id":"0:942","crate_id":0,"name":"default_value","span":{"filename":"src/build/arg/mod.rs","begin":[2804,4],"end":[2806,5]},"visibility":"public","docs":"Specifies the value of the argument when *not* specified at runtime.\n\n**NOTE:** If the user *does not* use this argument at runtime, [`ArgMatches::occurrences_of`]\nwill return `0` even though the [`ArgMatches::value_of`] will return the default specified.\n\n**NOTE:** If the user *does not* use this argument at runtime [`ArgMatches::is_present`] will\nstill return `true`. If you wish to determine whether the argument was used at runtime or\nnot, consider [`ArgMatches::occurrences_of`] which will return `0` if the argument was *not*\nused at runtime.\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value_if`] but slightly\ndifferent. `Arg::default_value` *only* takes affect when the user has not provided this arg\nat runtime. `Arg::default_value_if` however only takes effect when the user has not provided\na value at runtime **and** these other conditions are met as well. If you have set\n`Arg::default_value` and `Arg::default_value_if`, and the user **did not** provide this arg\nat runtime, nor were the conditions met for `Arg::default_value_if`, the `Arg::default_value`\nwill be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n**NOTE:** This setting effectively disables `AppSettings::ArgRequiredElseHelp` if used in\nconjunction as it ensures that some argument will always be present.\n\n# Examples\n\nFirst we use the default value without providing any value at runtime.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"myval\"));\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.occurrences_of(\"opt\"), 0);\n```\n\nNext we provide a value at runtime to override the default.\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\", \"--myopt=non_default\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"non_default\"));\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.occurrences_of(\"opt\"), 1);\n```\n[`ArgMatches::occurrences_of`]: crate::ArgMatches::occurrences_of()\n[`ArgMatches::value_of`]: crate::ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`ArgMatches::is_present`]: crate::ArgMatches::is_present()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"crate::ArgMatches::is_present()":"0:3583","Arg::takes_value()":"0:3323","Arg::default_value_if()":"0:3323","crate::ArgMatches::occurrences_of()":"0:3583","crate::ArgMatches::value_of()":"0:3583"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:390":{"id":"0:390","crate_id":0,"name":"get_subcommands","span":{"filename":"src/build/app/mod.rs","begin":[201,4],"end":[203,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:519":{"id":"0:519","crate_id":0,"name":"get_matches","span":{"filename":"src/build/app/mod.rs","begin":[2011,4],"end":[2013,5]},"visibility":"public","docs":"Starts the parsing process, upon a failed parse an error will be displayed to the user and\nthe process will exit with the appropriate error code. By default this method gets all user\nprovided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\nwhich are legal on many platforms.\n\n# Examples\n\n```no_run\n# use clap::{App, Arg};\nlet matches = App::new(\"myprog\")\n    // Args and options go here...\n    .get_matches();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::try_get_matches_from_mut`]: App::try_get_matches_from_mut()","links":{"std::env::args_os()":"1:2243"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1877":{"id":"0:1877","crate_id":0,"name":"size_hint","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1101,4],"end":[1103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12386":{"id":"2:12386","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:46686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:662":{"id":"5:662","crate_id":5,"name":"clone_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5400":{"id":"5:5400","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5221","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5401","5:5402","5:5405","5:5408","5:5420","5:5421","5:5422","5:5423","5:5424"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2884":{"id":"0:2884","crate_id":0,"name":null,"span":{"filename":"src/build/app/settings.rs","begin":[143,16],"end":[143,25]},"visibility":{"restricted":{"parent":"0:235","path":"::build::app::settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2885"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12374":{"id":"2:12374","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:86":{"id":"0:86","crate_id":0,"name":"crate_license","span":{"filename":"src/macros.rs","begin":[53,0],"end":[64,1]},"visibility":"public","docs":"Allows you to pull the licence from your Cargo.toml at compile time. If the `license` field is\nempty, then the `licence-field` is read. If both fields are empty, then an empty string is\nreturned.\n\n# Examples\n\n```no_run\n# #[macro_use]\n# extern crate clap;\n# use clap::App;\n# fn main() {\nlet m = App::new(\"app\")\n            .license(crate_license!())\n            .get_matches();\n# }\n```","links":{},"attrs":["#[cfg(feature = \"cargo\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! crate_license {\n    () => { ... };\n}"},"2:12464":{"id":"2:12464","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7011":{"id":"2:7011","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7012","2:7013","2:7014","2:7015","2:7016","2:7017","2:7018"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2710","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:3675-0:3549":{"id":"b:2:3675-0:3549","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2620-0:3271":{"id":"b:2:2620-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12366":{"id":"2:12366","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15275","`u8`":"1:15284"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12019":{"id":"2:12019","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12021","2:12022","2:12023"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:3272":{"id":"0:3272","crate_id":0,"name":"Unknown","span":{"filename":"src/build/arg/value_hint.rs","begin":[29,4],"end":[29,11]},"visibility":"default","docs":"Default value if hint is not specified. Follows shell default behavior, which is usually\nauto-completing filenames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:7470":{"id":"2:7470","crate_id":2,"name":"into_iter","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:3220":{"id":"a:2:3012-0:3220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2945-0:3597":{"id":"b:2:2945-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[103,0],"end":[335,1]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:360","0:361","0:362","0:363","0:364","0:366","0:367","0:368","0:369","0:373","0:377","0:381","0:384","0:387","0:390","0:392","0:394","0:396","0:399","0:408","0:411","0:412","0:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2617-0:3746":{"id":"b:2:2617-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:824":{"id":"0:824","crate_id":0,"name":"get_long_and_visible_aliases","span":{"filename":"src/build/arg/mod.rs","begin":[221,4],"end":[230,5]},"visibility":"public","docs":"Get the long option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5422":{"id":"5:5422","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:3746":{"id":"b:2:2620-0:3746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SubCommand","id":"0:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[312,0],"end":[338,1]},"visibility":{"restricted":{"parent":"0:100","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Parser","id":"0:117","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["update_from","try_parse_from","parse","try_update_from","parse_from","try_parse"],"trait":{"kind":"resolved_path","inner":{"name":"Parser","id":"0:117","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:157","0:158","0:159","0:162"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:983":{"id":"0:983","crate_id":0,"name":"raw","span":{"filename":"src/build/arg/mod.rs","begin":[4563,4],"end":[4568,5]},"visibility":"public","docs":"Indicates that all parameters passed after this should not be parsed\nindividually, but rather passed in their entirety. It is worth noting\nthat setting this requires all values to come after a `--` to indicate they\nshould all be captured. For example:\n\n```text\n--foo something -- -v -v -v -b -b -b --baz -q -u -x\n```\n\nWill result in everything after `--` to be considered one raw argument. This behavior\nmay not be exactly what you are expecting and using [`crate::AppSettings::TrailingVarArg`]\nmay be more appropriate.\n\n**NOTE:** Implicitly sets [`Arg::takes_value(true)`] [`Arg::multiple_values(true)`],\n[`Arg::allow_hyphen_values(true)`], and [`Arg::last(true)`] when set to `true`\n\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`Arg::allow_hyphen_values(true)`]: Arg::allow_hyphen_values()\n[`Arg::last(true)`]: Arg::last()","links":{"`crate::AppSettings::TrailingVarArg`":"0:2812","Arg::multiple_values()":"0:3323","Arg::allow_hyphen_values()":"0:3323","Arg::takes_value()":"0:3323","Arg::last()":"0:3323"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["raw",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1845":{"id":"0:1845","crate_id":0,"name":"size_hint","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1008,4],"end":[1010,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3166":{"id":"2:3166","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:3305":{"id":"0:3305","crate_id":0,"name":"clone","span":{"filename":"src/build/arg/value_hint.rs","begin":[25,33],"end":[25,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1625":{"id":"0:1625","crate_id":0,"name":null,"span":{"filename":"src/parse/errors.rs","begin":[1125,0],"end":[1131,1]},"visibility":{"restricted":{"parent":"0:1526","path":"::parse::errors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:45573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1626"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1900":{"id":"0:1900","crate_id":0,"name":"default","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1172,4],"end":[1178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:1594":{"id":"0:1594","crate_id":0,"name":"exit","span":{"filename":"src/parse/errors.rs","begin":[505,4],"end":[515,5]},"visibility":"public","docs":"Prints the error and exits. Depending on the error kind, this\neither prints to `stderr` and exits with a status of `1`\nor prints to `stdout` and exits with a status of `0`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:3368":{"id":"0:3368","crate_id":0,"name":"clone","span":{"filename":"src/build/arg/mod.rs","begin":[84,18],"end":[84,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3323","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2941-0:3271":{"id":"b:2:2941-0:3271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2620-0:3728":{"id":"b:2:2620-0:3728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:3728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3675-0:3597":{"id":"b:2:3675-0:3597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:656":{"id":"0:656","crate_id":0,"name":null,"span":{"filename":"src/build/app/mod.rs","begin":[3101,0],"end":[3105,1]},"visibility":{"restricted":{"parent":"0:186","path":"::build::app"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3616":{"id":"0:3616","crate_id":0,"name":"Indices","span":{"filename":"src/parse/matches/arg_matches.rs","begin":[1147,0],"end":[1149,1]},"visibility":"public","docs":"An iterator for getting multiple indices out of an argument via the [`ArgMatches::indices_of`]\nmethod.\n\n# Examples\n\n```rust\n# use clap::{App, Arg};\nlet m = App::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .multiple_values(true)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"val2\"]);\n\nlet mut indices = m.indices_of(\"output\").unwrap();\n\nassert_eq!(indices.next(), Some(2));\nassert_eq!(indices.next(), Some(3));\nassert_eq!(indices.next(), None);\n```\n[`ArgMatches::indices_of`]: ArgMatches::indices_of()","links":{"ArgMatches::indices_of()":"0:3583"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3012-0:3616","a:2:3024-0:3616","a:2:3053-0:3616","a:2:8360-0:3616","a:2:8361-0:3616","b:2:2945-0:3616","b:2:2941-0:3616","b:2:7466-0:3616","b:5:658-0:3616","b:2:2956-0:3616","b:2:2951-0:3616","b:2:2617-0:3616","b:2:2620-0:3616","b:2:3675-0:3616","0:1893","0:1896","0:1888","0:3619","0:1898"]}}},"paths":{"2:7469":{"crate_id":2,"path":["clap","IntoIter"],"kind":"typedef"},"2:45127":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1454":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1944":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:47138":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43752":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"32:4983":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:43238":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14498":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:5471":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"32:3653":{"crate_id":32,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10843":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"1:14688":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3312":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"0:3583":{"crate_id":0,"path":["clap","ArgMatches"],"kind":"struct"},"24:1030":{"crate_id":24,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:560":{"crate_id":25,"path":["indexmap","map","Values"],"kind":"struct"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"32:4103":{"crate_id":32,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:22606":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:9341":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"27:0":{"crate_id":27,"path":["textwrap"],"kind":"module"},"26:800":{"crate_id":26,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:5382":{"crate_id":5,"path":["clap","Output"],"kind":"typedef"},"2:46275":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:684":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"2:45055":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"32:6040":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:3708":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:912":{"crate_id":24,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:15268":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7481":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"0:2823":{"crate_id":0,"path":["clap","AppSettings","AllowExternalSubcommands"],"kind":"variant"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"32:593":{"crate_id":32,"path":["libc","unix","itimerval"],"kind":"struct"},"1:6982":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"2:46644":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"32:599":{"crate_id":32,"path":["libc","unix","tms"],"kind":"struct"},"6:581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6101":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"2:4731":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"32:3824":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"32:5891":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:877":{"crate_id":1,"path":["clap","Owned"],"kind":"typedef"},"5:3574":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"5:7467":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:46365":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:47018":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4409":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9403":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:823":{"crate_id":24,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:10235":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:15282":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:9468":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"26:1318":{"crate_id":26,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:60064":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"32:4232":{"crate_id":32,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1252":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5541":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43850":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:10134":{"crate_id":2,"path":["clap","Item"],"kind":"typedef"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50407":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"32:6620":{"crate_id":32,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:4366":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:5187":{"crate_id":5,"path":["clap","Owned"],"kind":"typedef"},"2:49038":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10292":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4181":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:23218":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:3891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:14020":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:43710":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8587":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"1:15279":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"32:6462":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:14114":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44744":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:13258":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"29:325":{"crate_id":29,"path":["termcolor","ColorChoice"],"kind":"enum"},"0:147":{"crate_id":0,"path":["clap","ArgEnum"],"kind":"trait"},"25:1291":{"crate_id":25,"path":["indexmap","HashValue"],"kind":"struct"},"0:2831":{"crate_id":0,"path":["clap","AppSettings","DontCollapseArgsInUsage"],"kind":"variant"},"2:44086":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3363":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"23:442":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"32:514":{"crate_id":32,"path":["libc","unix","timespec"],"kind":"struct"},"1:7344":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:21928":{"crate_id":2,"path":["core","core_simd","select","sealed","Sealed"],"kind":"trait"},"32:3965":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46345":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3114":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46983":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:53065":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"1:1937":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:34877":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:47130":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:10274":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11768":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"2:3012":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"32:4211":{"crate_id":32,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"25:0":{"crate_id":25,"path":["indexmap"],"kind":"module"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"32:3640":{"crate_id":32,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:29932":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1959":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:1714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3122":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"32:4013":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:43485":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3907":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"6:568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:0":{"crate_id":24,"path":["memchr"],"kind":"module"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10135":{"crate_id":2,"path":["clap","IntoIter"],"kind":"typedef"},"6:1550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9253":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:11216":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"32:1677":{"crate_id":32,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:1262":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:14337":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2847":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"29:237":{"crate_id":29,"path":["termcolor","Ansi"],"kind":"struct"},"2:21665":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:47354":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47146":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22654":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:13807":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"27:223":{"crate_id":27,"path":["textwrap","word_splitters","HyphenSplitter"],"kind":"struct"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3843":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"0:3527":{"crate_id":0,"path":["clap","ErrorKind","InvalidUtf8"],"kind":"variant"},"32:508":{"crate_id":32,"path":["libc","unix","timeval"],"kind":"struct"},"2:23186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11602":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"0:2835":{"crate_id":0,"path":["clap","AppSettings","DisableHelpFlag"],"kind":"variant"},"32:588":{"crate_id":32,"path":["libc","unix","sigval"],"kind":"struct"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3810":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"0:3503":{"crate_id":0,"path":["clap","ErrorKind","UnrecognizedSubcommand"],"kind":"variant"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"32:1729":{"crate_id":32,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"32:3664":{"crate_id":32,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:9241":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:11013":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:7967":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"27:121":{"crate_id":27,"path":["textwrap","core","display_width"],"kind":"function"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45300":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:50145":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:23314":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"0:3531":{"crate_id":0,"path":["clap","ErrorKind","DisplayHelpOnMissingArgumentOrSubcommand"],"kind":"variant"},"0:97":{"crate_id":0,"path":["clap","value_t_or_exit"],"kind":"macro"},"30:277":{"crate_id":30,"path":["unicase","UniCase"],"kind":"struct"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3236":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44616":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:12290":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"0:2851":{"crate_id":0,"path":["clap","AppSettings","IgnoreErrors"],"kind":"variant"},"1:7710":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"33:52":{"crate_id":33,"path":["strsim","StringWrapper"],"kind":"struct"},"1:3200":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10898":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:48822":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:48476":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:3515":{"crate_id":0,"path":["clap","ErrorKind","TooManyOccurrences"],"kind":"variant"},"29:217":{"crate_id":29,"path":["termcolor","NoColor"],"kind":"struct"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3550":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43529":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:955":{"crate_id":24,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44068":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8744":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"2:3308":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:11673":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4063":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"25:586":{"crate_id":25,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"2:3021":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:43770":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:4863":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"1:9371":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"32:3955":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:15286":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"0:3496":{"crate_id":0,"path":["clap","ErrorKind"],"kind":"enum"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:45835":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43539":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10849":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"32:6033":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"2:23122":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1076":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:13588":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:50548":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"25:409":{"crate_id":25,"path":["indexmap","map","IndexMap"],"kind":"struct"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:3836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"23:450":{"crate_id":23,"path":["os_str_bytes","raw_str","RawOsString"],"kind":"struct"},"1:1304":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10564":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"32:4952":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1281":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"0:3245":{"crate_id":0,"path":["clap","ArgSettings","Last"],"kind":"variant"},"2:43809":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46686":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:46398":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:45528":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"0:2847":{"crate_id":0,"path":["clap","AppSettings","HidePossibleValuesInHelp"],"kind":"variant"},"2:9941":{"crate_id":2,"path":["clap","Output"],"kind":"typedef"},"2:46255":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:14025":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:48626":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:34898":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6430":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1678":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12006":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"2:12726":{"crate_id":2,"path":["clap","Output"],"kind":"typedef"},"1:15241":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"26:767":{"crate_id":26,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:10169":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:6827":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:3823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:817":{"crate_id":24,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7421":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:9073":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:7974":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"2:13057":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"32:4273":{"crate_id":32,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"32:4157":{"crate_id":32,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:14051":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:23026":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"0:3280":{"crate_id":0,"path":["clap","ValueHint","DirPath"],"kind":"variant"},"5:4109":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"5:7701":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:9399":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:963":{"crate_id":24,"path":["memchr","memmem","FindIter"],"kind":"struct"},"32:1713":{"crate_id":32,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:5714":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"2:45620":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"32:1705":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:137":{"crate_id":24,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:50361":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43840":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:46997":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10326":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"1:13729":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:15291":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:13021":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:5602":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47404":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:938":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44683":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"32:3999":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44947":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"0:3221":{"crate_id":0,"path":["clap","ArgSettings","Required"],"kind":"variant"},"2:45780":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"23:382":{"crate_id":23,"path":["os_str_bytes","raw_str","Buffer"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1445":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"27:23":{"crate_id":27,"path":["textwrap","word_separators","WordSeparatorClone"],"kind":"trait"},"1:10507":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:6521":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21321":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Odd"],"kind":"struct"},"2:46705":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"32:4914":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47392":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:5153":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"0:2855":{"crate_id":0,"path":["clap","AppSettings","InferLongArgs"],"kind":"variant"},"2:47134":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:12150":{"crate_id":2,"path":["clap","Searcher"],"kind":"typedef"},"32:494":{"crate_id":32,"path":["libc","unix","group"],"kind":"struct"},"5:1715":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:4660":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:48499":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46031":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"0:3549":{"crate_id":0,"path":["clap","Error"],"kind":"struct"},"1:5529":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"32:4065":{"crate_id":32,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"26:1595":{"crate_id":26,"path":["hashbrown","set","Union"],"kind":"struct"},"0:3535":{"crate_id":0,"path":["clap","ErrorKind","ArgumentNotFound"],"kind":"variant"},"1:15274":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"32:1503":{"crate_id":32,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"27:230":{"crate_id":27,"path":["textwrap","wrap_algorithms","FirstFit"],"kind":"struct"},"1:14097":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3037":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46355":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"0:2857":{"crate_id":0,"path":["clap","AppSettings","NoBinaryName"],"kind":"variant"},"2:10312":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"23:198":{"crate_id":23,"path":["os_str_bytes","pattern","Pattern"],"kind":"trait"},"2:8360":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3135":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:12720":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:15283":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:14101":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:943":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10313":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3806":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"0:132":{"crate_id":0,"path":["clap","IntoApp"],"kind":"trait"},"2:44607":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48100":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:14751":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3175":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21654":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"32:5324":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11783":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7389":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:13147":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:5601":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:3094":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:5157":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:50294":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"29:29":{"crate_id":29,"path":["termcolor","WriteColor"],"kind":"trait"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8663":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:5397":{"crate_id":5,"path":["clap","Owned"],"kind":"typedef"},"0:2841":{"crate_id":0,"path":["clap","AppSettings","DeriveDisplayOrder"],"kind":"variant"},"24:695":{"crate_id":24,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:47300":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:3047":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:4716":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"32:3634":{"crate_id":32,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2618":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"6:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1507":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:155":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"26:445":{"crate_id":26,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"2:43577":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:732":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:4745":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"1:11157":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:1431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"26:66":{"crate_id":26,"path":["hashbrown","raw","inner","alloc","inner","Allocator"],"kind":"trait"},"24:893":{"crate_id":24,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"32:574":{"crate_id":32,"path":["libc","unix","winsize"],"kind":"struct"},"6:3993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8033":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11564":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:3040":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"26:439":{"crate_id":26,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"1:10816":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"0:3276":{"crate_id":0,"path":["clap","ValueHint","AnyPath"],"kind":"variant"},"6:3902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:14361":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"2:46730":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3256":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"32:4130":{"crate_id":32,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:10440":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:6078":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"32:3975":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:7913":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:860":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11017":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"0:2960":{"crate_id":0,"path":["clap","ArgValue"],"kind":"struct"},"25:604":{"crate_id":25,"path":["indexmap","map","Iter"],"kind":"struct"},"32:4996":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:875":{"crate_id":1,"path":["clap","Owned"],"kind":"typedef"},"1:4402":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:10276":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"0:3294":{"crate_id":0,"path":["clap","ValueHint","Url"],"kind":"variant"},"2:3179":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:5986":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1972":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"32:1686":{"crate_id":32,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:45543":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2081":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48595":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47983":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8524":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"32:1541":{"crate_id":32,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46490":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:10182":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:47201":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"0:3278":{"crate_id":0,"path":["clap","ValueHint","FilePath"],"kind":"variant"},"2:12219":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"2:53104":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"0:1875":{"crate_id":0,"path":["clap","Item"],"kind":"typedef"},"27:56":{"crate_id":27,"path":["textwrap","word_splitters","WordSplitterClone"],"kind":"trait"},"24:1002":{"crate_id":24,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8088":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:43107":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"0:3296":{"crate_id":0,"path":["clap","ValueHint","EmailAddress"],"kind":"variant"},"2:3106":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10763":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"32:4187":{"crate_id":32,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:850":{"crate_id":24,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"32:1523":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"26:678":{"crate_id":26,"path":["hashbrown","map","Iter"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"32:4285":{"crate_id":32,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"32:3899":{"crate_id":32,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"32:5912":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"0:2807":{"crate_id":0,"path":["clap","Output"],"kind":"typedef"},"2:3170":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:43613":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:43560":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:527":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12915":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3040":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1953":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"0:96":{"crate_id":0,"path":["clap","value_t"],"kind":"macro"},"2:45805":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:13429":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"0:3519":{"crate_id":0,"path":["clap","ErrorKind","ArgumentConflict"],"kind":"variant"},"5:2781":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1965":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"23:361":{"crate_id":23,"path":["clap","Owned"],"kind":"typedef"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:3539":{"crate_id":0,"path":["clap","ErrorKind","Format"],"kind":"variant"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:1412":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"26:1559":{"crate_id":26,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"32:6587":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:43514":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"22:5":{"crate_id":22,"path":["bitflags","bitflags"],"kind":"macro"},"6:4071":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:46265":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:3501":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"32:4940":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44700":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"32:6058":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1574":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:48292":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"32:3805":{"crate_id":32,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3034":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11673":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"0:2871":{"crate_id":0,"path":["clap","AppSettings","WaitOnError"],"kind":"variant"},"2:2523":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"32:4163":{"crate_id":32,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"32:6020":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"5:5378":{"crate_id":5,"path":["clap","Output"],"kind":"typedef"},"2:22994":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"25:1102":{"crate_id":25,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:0":{"crate_id":21,"path":["lazy_static"],"kind":"module"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"2:43552":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4752":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43781":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:15284":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3110":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:13060":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:3671":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:15275":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"0:2853":{"crate_id":0,"path":["clap","AppSettings","InferSubcommands"],"kind":"variant"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"32:148":{"crate_id":32,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:4299":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"32:3845":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:984":{"crate_id":24,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:809":{"crate_id":24,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:10426":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2095":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"32:3838":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"26:0":{"crate_id":26,"path":["hashbrown"],"kind":"module"},"2:12013":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"25:630":{"crate_id":25,"path":["indexmap","map","IterMut"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"1:695":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"23:375":{"crate_id":23,"path":["clap","Target"],"kind":"typedef"},"5:313":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2711":{"crate_id":1,"path":["clap","Owned"],"kind":"typedef"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:9351":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"5:4764":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"6:614":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:53052":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"0:3529":{"crate_id":0,"path":["clap","ErrorKind","DisplayHelp"],"kind":"variant"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"25:1077":{"crate_id":25,"path":["indexmap","set","Intersection"],"kind":"struct"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:82":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"0:2833":{"crate_id":0,"path":["clap","AppSettings","DontDelimitTrailingValues"],"kind":"variant"},"32:4053":{"crate_id":32,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"22:0":{"crate_id":22,"path":["bitflags"],"kind":"module"},"1:10846":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:10364":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:14084":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2925":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:14038":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"32:1645":{"crate_id":32,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"0:3257":{"crate_id":0,"path":["clap","ArgSettings","HiddenLongHelp"],"kind":"variant"},"2:46177":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"32:4149":{"crate_id":32,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3128":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:10204":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1954":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:15271":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:48959":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10819":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"25:269":{"crate_id":25,"path":["indexmap","map","core","Entry"],"kind":"enum"},"32:4136":{"crate_id":32,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11200":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:3768":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22415":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:46237":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"26:692":{"crate_id":26,"path":["hashbrown","map","IterMut"],"kind":"struct"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:44839":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:220":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:7462":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"23:439":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"2:49749":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"0:3597":{"crate_id":0,"path":["clap","Values"],"kind":"struct"},"2:3247":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:6606":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5826":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"26:1563":{"crate_id":26,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8680":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1268":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:43271":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"25:968":{"crate_id":25,"path":["indexmap","set","Iter"],"kind":"struct"},"2:3673":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4746":{"crate_id":1,"path":["clap","Iter"],"kind":"typedef"},"2:48269":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"0:3537":{"crate_id":0,"path":["clap","ErrorKind","Io"],"kind":"variant"},"2:46246":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:8362":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2918":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"0:3521":{"crate_id":0,"path":["clap","ErrorKind","MissingRequiredArgument"],"kind":"variant"},"24:1039":{"crate_id":24,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"26:1885":{"crate_id":26,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:657":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:12727":{"crate_id":2,"path":["clap","Future"],"kind":"typedef"},"6:1525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"0:3247":{"crate_id":0,"path":["clap","ArgSettings","HideDefaultValue"],"kind":"variant"},"2:11477":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:22332":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2614":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"32:552":{"crate_id":32,"path":["libc","unix","hostent"],"kind":"struct"},"2:45519":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:877":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10912":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2783":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:43669":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"27:127":{"crate_id":27,"path":["clap","Target"],"kind":"typedef"},"32:4143":{"crate_id":32,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11545":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9960":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"32:5906":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:861":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:1022":{"crate_id":24,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"0:2845":{"crate_id":0,"path":["clap","AppSettings","Hidden"],"kind":"variant"},"1:3472":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"2:22632":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7374":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"32:5283":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46572":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2663":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:3443":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"6:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:3274":{"crate_id":0,"path":["clap","ValueHint","Other"],"kind":"variant"},"5:1056":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:7497":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:49278":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:45286":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"29:78":{"crate_id":29,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"2:26069":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2215":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:1423":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:22498":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:1636":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:14492":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:36118":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6535":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10391":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"32:649":{"crate_id":32,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"26:975":{"crate_id":26,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:7684":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"23:409":{"crate_id":23,"path":["os_str_bytes","pattern","EncodedChar"],"kind":"struct"},"26:993":{"crate_id":26,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"26:1411":{"crate_id":26,"path":["hashbrown","set","HashSet"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:5533":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"29:426":{"crate_id":29,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"2:45019":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:22229":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3018":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"0:3223":{"crate_id":0,"path":["clap","ArgSettings","MultipleValues"],"kind":"variant"},"24:1069":{"crate_id":24,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:53078":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"5:2013":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10776":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4304":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:14464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"26:535":{"crate_id":26,"path":["hashbrown","map","HashMap"],"kind":"struct"},"0:3497":{"crate_id":0,"path":["clap","ErrorKind","InvalidValue"],"kind":"variant"},"2:47008":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:49356":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:15281":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:7135":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:3682":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:44778":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:5519":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7132":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:3780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"32:3738":{"crate_id":32,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:47188":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"32:5751":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:827":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:606":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"32:5775":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"26:176":{"crate_id":26,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"1:12778":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"6:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:14667":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"0:2863":{"crate_id":0,"path":["clap","AppSettings","SubcommandRequiredElseHelp"],"kind":"variant"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6673":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"23:448":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"6:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"32:1509":{"crate_id":32,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:3935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:8922":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:48206":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"32:4256":{"crate_id":32,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"0:143":{"crate_id":0,"path":["clap","Subcommand"],"kind":"trait"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8477":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"24:939":{"crate_id":24,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"32:3873":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:10347":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"32:5134":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6691":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4349":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:5221":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5712":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10512":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9637":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"3:299":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"2:43871":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2786":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3804":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"0:2810":{"crate_id":0,"path":["clap","Err"],"kind":"typedef"},"2:50208":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:11931":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10994":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4083":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"32:5309":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"32:6575":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:14074":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:15270":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43306":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:22553":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4324":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"0:1582":{"crate_id":0,"path":["clap","Result"],"kind":"typedef"},"2:44760":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:12705":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46228":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"23:525":{"crate_id":23,"path":["os_str_bytes","EncodingError"],"kind":"struct"},"0:3523":{"crate_id":0,"path":["clap","ErrorKind","MissingSubcommand"],"kind":"variant"},"1:14000":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:1096":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:48722":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4744":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"2:45573":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:840":{"crate_id":24,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43169":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"26:110":{"crate_id":26,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"1:8066":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:44097":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10770":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"26:1877":{"crate_id":26,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:13732":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"29:97":{"crate_id":29,"path":["termcolor","WriterInner"],"kind":"enum"},"1:2238":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1413":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11140":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49542":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:3842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"32:4172":{"crate_id":32,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:1948":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"0:2827":{"crate_id":0,"path":["clap","AppSettings","ArgRequiredElseHelp"],"kind":"variant"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"25:133":{"crate_id":25,"path":["indexmap","map","core","raw","OccupiedEntry"],"kind":"struct"},"2:46946":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7398":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"0:3215":{"crate_id":0,"path":["clap","Output"],"kind":"typedef"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:10703":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"25:45":{"crate_id":25,"path":["indexmap","mutable_keys","MutableKeys"],"kind":"trait"},"6:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43881":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12019":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"32:3892":{"crate_id":32,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"32:4097":{"crate_id":32,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:5397":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:7186":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6566":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:45534":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"0:3525":{"crate_id":0,"path":["clap","ErrorKind","UnexpectedMultipleUsage"],"kind":"variant"},"2:45817":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"29:353":{"crate_id":29,"path":["termcolor","ColorSpec"],"kind":"struct"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"27:239":{"crate_id":27,"path":["textwrap","core","Word"],"kind":"struct"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:13726":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:21517":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7028":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:917":{"crate_id":24,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"32:4027":{"crate_id":32,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44641":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2915":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5104":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10270":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:7481":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:574":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11728":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:3983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2513":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:2921":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"33:93":{"crate_id":33,"path":["strsim","StrSimError"],"kind":"enum"},"2:8883":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1464":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11594":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:23250":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3290":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43830":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8706":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7310":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"32:1627":{"crate_id":32,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:48548":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:48350":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"6:4205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"26:1568":{"crate_id":26,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:4191":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"0:92":{"crate_id":0,"path":["clap","clap_app"],"kind":"macro"},"6:4121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:1399":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46854":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"32:3884":{"crate_id":32,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1482":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10753":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"23:445":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"2:43682":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9":{"crate_id":1,"path":["std","panic"],"kind":"macro"},"2:46739":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:1436":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:10145":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5234":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:49325":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10309":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:7917":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"27:122":{"crate_id":27,"path":["textwrap","core","Fragment"],"kind":"trait"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:3850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2240":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"27:216":{"crate_id":27,"path":["textwrap","word_splitters","NoHyphenation"],"kind":"struct"},"6:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2668":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46526":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"0:3733":{"crate_id":0,"path":["clap","ColorChoice","Never"],"kind":"variant"},"26:741":{"crate_id":26,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3166":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:5722":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"0:3235":{"crate_id":0,"path":["clap","ArgSettings","NextLineHelp"],"kind":"variant"},"6:553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:10468":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8466":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"2:23090":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:7429":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11828":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3457":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48164":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:12300":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:3223":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5696":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"0:2825":{"crate_id":0,"path":["clap","AppSettings","ArgsNegateSubcommands"],"kind":"variant"},"2:47377":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2912":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"0:2859":{"crate_id":0,"path":["clap","AppSettings","NextLineHelp"],"kind":"variant"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4427":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"2:43790":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:15020":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:6951":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46422":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"0:3610":{"crate_id":0,"path":["clap","OsValues"],"kind":"struct"},"6:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"32:5141":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3018":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:11458":{"crate_id":2,"path":["clap","Item"],"kind":"typedef"},"2:3162":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:8472":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"32:5289":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3118":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10937":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:13557":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"32:1698":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:3486":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10964":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:45561":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"0:89":{"crate_id":0,"path":["clap","crate_description"],"kind":"macro"},"32:5178":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:7642":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:7910":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10255":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:43691":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"32:520":{"crate_id":32,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8539":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:9248":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:5485":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22578":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11788":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"0:2829":{"crate_id":0,"path":["clap","AppSettings","SubcommandPrecedenceOverArg"],"kind":"variant"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:29967":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:0":{"crate_id":20,"path":["clap_derive"],"kind":"module"},"0:2815":{"crate_id":0,"path":["clap","AppSettings","AllowLeadingHyphen"],"kind":"variant"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8426":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"27:207":{"crate_id":27,"path":["textwrap","word_separators","AsciiSpace"],"kind":"struct"},"5:7226":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"1:7201":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11744":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7093":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:24":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2959":{"crate_id":2,"path":["clap","Error"],"kind":"typedef"},"0:3227":{"crate_id":0,"path":["clap","ArgSettings","ForbidEmptyValues"],"kind":"variant"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:660":{"crate_id":5,"path":["clap","Owned"],"kind":"typedef"},"23:92":{"crate_id":23,"path":["os_str_bytes","OsStringBytes"],"kind":"trait"},"32:561":{"crate_id":32,"path":["libc","unix","iovec"],"kind":"struct"},"24:993":{"crate_id":24,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"26:728":{"crate_id":26,"path":["hashbrown","map","Values"],"kind":"struct"},"2:5970":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"32:1498":{"crate_id":32,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43639":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:663":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11808":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:151":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:811":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6532":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"25:831":{"crate_id":25,"path":["indexmap","set","IndexSet"],"kind":"struct"},"32:5759":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8058":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9397":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:5704":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:7531":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:14068":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"0:2837":{"crate_id":0,"path":["clap","AppSettings","DisableHelpSubcommand"],"kind":"variant"},"32:6564":{"crate_id":32,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"0:3533":{"crate_id":0,"path":["clap","ErrorKind","DisplayVersion"],"kind":"variant"},"32:5037":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"26:1852":{"crate_id":26,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"5:5207":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:3022":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"0:3286":{"crate_id":0,"path":["clap","ValueHint","CommandString"],"kind":"variant"},"1:918":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"32:6006":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10519":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:7239":{"crate_id":1,"path":["clap","Item"],"kind":"typedef"},"1:10533":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:9325":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:8586":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"1:14479":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"0:729":{"crate_id":0,"path":["clap","Err"],"kind":"typedef"},"1:11665":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:1310":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8988":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"0:3243":{"crate_id":0,"path":["clap","ArgSettings","RequireEquals"],"kind":"variant"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10344":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:9965":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2909":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:47162":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11657":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"30:301":{"crate_id":30,"path":["unicase","Encoding"],"kind":"enum"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"32:4922":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:4041":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:48774":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"32:4263":{"crate_id":32,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:1809":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"0:3225":{"crate_id":0,"path":["clap","ArgSettings","MultipleOccurrences"],"kind":"variant"},"24:974":{"crate_id":24,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2710":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:7120":{"crate_id":1,"path":["clap","Owned"],"kind":"typedef"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"0:2813":{"crate_id":0,"path":["clap","AppSettings","AllowInvalidUtf8ForExternalSubcommands"],"kind":"variant"},"1:6608":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:49116":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:15290":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:10193":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:7421":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46380":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:9078":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:50372":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:14342":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:29790":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10194":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:7011":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7658":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"6:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:3735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"0:87":{"crate_id":0,"path":["clap","crate_version"],"kind":"macro"},"2:12961":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"26:350":{"crate_id":26,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"2:46714":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:6302":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"29:0":{"crate_id":29,"path":["termcolor"],"kind":"module"},"5:5966":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"31:8":{"crate_id":31,"path":["atty","Stream"],"kind":"enum"},"2:50003":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:23154":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:14742":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"2:43720":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"32:5047":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"0:3501":{"crate_id":0,"path":["clap","ErrorKind","InvalidSubcommand"],"kind":"variant"},"2:3464":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"32:5029":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:1298":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:48878":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10408":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8159":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"32:3785":{"crate_id":32,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49892":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:7471":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:7443":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"0:1890":{"crate_id":0,"path":["clap","Item"],"kind":"typedef"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"2:4376":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9401":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"0:2861":{"crate_id":0,"path":["clap","AppSettings","SubcommandsNegateReqs"],"kind":"variant"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43606":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9411":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"0:3369":{"crate_id":0,"path":["clap","ArgGroup"],"kind":"struct"},"25:1303":{"crate_id":25,"path":["indexmap","Bucket"],"kind":"struct"},"1:13392":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:47142":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10783":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:1010":{"crate_id":24,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3032":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3084":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46590":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:3741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:3816":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:46802":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:15273":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11579":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2297":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:50082":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:9340":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:50352":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47318":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:15292":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"30:244":{"crate_id":30,"path":["unicase","unicode","Unicode"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:21281":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_right","Rotate"],"kind":"struct"},"2:3145":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:1239":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"0:2865":{"crate_id":0,"path":["clap","AppSettings","UseLongFormatForHelpSubcommand"],"kind":"variant"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"26:812":{"crate_id":26,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"26:715":{"crate_id":26,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:48187":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50433":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:5463":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4150":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2358":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"2:3174":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44769":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"27:20":{"crate_id":27,"path":["textwrap","word_separators","WordSeparator"],"kind":"trait"},"6:595":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:6262":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"32:1599":{"crate_id":32,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"0:3746":{"crate_id":0,"path":["clap","SubCommand"],"kind":"struct"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"0:98":{"crate_id":0,"path":["clap","values_t"],"kind":"macro"},"21:20":{"crate_id":21,"path":["lazy_static","lazy","Lazy"],"kind":"struct"},"2:9393":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"0:3292":{"crate_id":0,"path":["clap","ValueHint","Hostname"],"kind":"variant"},"0:3511":{"crate_id":0,"path":["clap","ErrorKind","TooManyValues"],"kind":"variant"},"2:12070":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:48311":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"0:3499":{"crate_id":0,"path":["clap","ErrorKind","UnknownArgument"],"kind":"variant"},"2:53130":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"0:3507":{"crate_id":0,"path":["clap","ErrorKind","NoEquals"],"kind":"variant"},"32:5930":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46027":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"26:1575":{"crate_id":26,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46696":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10710":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"32:3690":{"crate_id":32,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"32:6552":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:1092":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10598":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10717":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"0:3251":{"crate_id":0,"path":["clap","ArgSettings","HideEnv"],"kind":"variant"},"32:3855":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7606":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"0:90":{"crate_id":0,"path":["clap","crate_name"],"kind":"macro"},"6:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:48649":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"32:4193":{"crate_id":32,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"32:4965":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"5:5108":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"6:501":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"0:3220":{"crate_id":0,"path":["clap","ArgSettings"],"kind":"enum"},"12:116":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"2:46327":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10349":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"32:4240":{"crate_id":32,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"29:306":{"crate_id":29,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"26:1869":{"crate_id":26,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"0:3517":{"crate_id":0,"path":["clap","ErrorKind","WrongNumberOfValues"],"kind":"variant"},"2:9407":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"32:4181":{"crate_id":32,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"32:6432":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"0:140":{"crate_id":0,"path":["clap","Args"],"kind":"trait"},"1:10021":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10183":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"1:6673":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:45796":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"32:615":{"crate_id":32,"path":["libc","unix","protoent"],"kind":"struct"},"1:12297":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"32:4113":{"crate_id":32,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:2284":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"32:5126":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3371":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:43861":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:14775":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"32:5874":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47158":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:15285":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6930":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"0:2875":{"crate_id":0,"path":["clap","AppSettings","NoAutoVersion"],"kind":"variant"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"0:3731":{"crate_id":0,"path":["clap","ColorChoice","Always"],"kind":"variant"},"2:44692":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"32:3717":{"crate_id":32,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:6066":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"26:1863":{"crate_id":26,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"1:11617":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:8435":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"0:2812":{"crate_id":0,"path":["clap","AppSettings"],"kind":"enum"},"2:44911":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3030":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"25:988":{"crate_id":25,"path":["indexmap","set","Drain"],"kind":"struct"},"5:6002":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"28:53":{"crate_id":28,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"6:3747":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7617":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43818":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10813":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"30:181":{"crate_id":30,"path":["unicase","eq"],"kind":"function"},"32:5834":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"24:867":{"crate_id":24,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4066":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:4154":{"crate_id":1,"path":["std","io","stdio","stdout"],"kind":"function"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"1:10572":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1595":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"32:5114":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11624":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:9381":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"0:3241":{"crate_id":0,"path":["clap","ArgSettings","AllowHyphenValues"],"kind":"variant"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22132":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:11994":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4193":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:23058":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:50418":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2661":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"1:11606":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:4421":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:5786":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:10556":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46919":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"32:3795":{"crate_id":32,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2611":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"26:327":{"crate_id":26,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"32:5897":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:2783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:5391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4750":{"crate_id":1,"path":["clap","Iter"],"kind":"typedef"},"2:47031":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"29:92":{"crate_id":29,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"5:7566":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22225":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"32:5804":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"29:373":{"crate_id":29,"path":["termcolor","Color"],"kind":"enum"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:7513":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1626":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"6:4175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:45091":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:3954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:5479":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21266":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_left","Rotate"],"kind":"struct"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"5:2061":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3140":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:9409":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"32:4044":{"crate_id":32,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8152":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2086":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:5528":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"32:3723":{"crate_id":32,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"26:1019":{"crate_id":26,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"32:5811":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"26:752":{"crate_id":26,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:21300":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Hi"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:1948":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"0:2819":{"crate_id":0,"path":["clap","AppSettings","AllowNegativeNumbers"],"kind":"variant"},"2:21319":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Even"],"kind":"struct"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:13128":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:6908":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:9596":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"5:1274":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:12857":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:50509":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:11749":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2846":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7629":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2243":{"crate_id":1,"path":["std","env","args_os"],"kind":"function"},"1:6604":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8958":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"1:13407":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:15277":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46472":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"6:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:22722":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:1208":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:45827":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"0:2817":{"crate_id":0,"path":["clap","AppSettings","AllArgsOverrideSelf"],"kind":"variant"},"0:1843":{"crate_id":0,"path":["clap","Item"],"kind":"typedef"},"32:4221":{"crate_id":32,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:1288":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8590":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47363":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"32:5102":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:14311":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"32:5024":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:10551":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2954":{"crate_id":2,"path":["clap","Error"],"kind":"typedef"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"32:4201":{"crate_id":32,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:927":{"crate_id":24,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"0:2821":{"crate_id":0,"path":["clap","AppSettings","AllowMissingPositional"],"kind":"variant"},"2:11710":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:4295":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:15288":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3159":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:10385":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"32:3818":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9519":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:4418":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4365":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3025":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:3352":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"26:1582":{"crate_id":26,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:533":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8899":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:44675":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"23:0":{"crate_id":23,"path":["os_str_bytes"],"kind":"module"},"2:53091":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"24:902":{"crate_id":24,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"32:607":{"crate_id":32,"path":["libc","unix","servent"],"kind":"struct"},"24:877":{"crate_id":24,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43148":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:22520":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:3787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"0:2839":{"crate_id":0,"path":["clap","AppSettings","DisableVersionFlag"],"kind":"variant"},"2:3150":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:15272":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"32:3832":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"32:1571":{"crate_id":32,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:7404":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:50392":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"0:3253":{"crate_id":0,"path":["clap","ArgSettings","HideEnvValues"],"kind":"variant"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12791":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"1:15252":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:957":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"0:3231":{"crate_id":0,"path":["clap","ArgSettings","TakesValue"],"kind":"variant"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"32:3677":{"crate_id":32,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43479":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:47166":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7519":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46626":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"29:189":{"crate_id":29,"path":["termcolor","Buffer"],"kind":"struct"},"2:43599":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"29:90":{"crate_id":29,"path":["termcolor","StandardStream"],"kind":"struct"},"32:3769":{"crate_id":32,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46301":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:22537":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:14015":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:7063":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:3498":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"0:2889":{"crate_id":0,"path":["clap","App"],"kind":"struct"},"2:43799":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:76":{"crate_id":2,"path":["core","usize"],"kind":"module"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46825":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9956":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"2:3020":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3462":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"26:843":{"crate_id":26,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:49085":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"32:4279":{"crate_id":32,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:11712":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46336":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"32:3936":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10285":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"23:433":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"2:12790":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"26:1555":{"crate_id":26,"path":["hashbrown","set","Iter"],"kind":"struct"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:43192":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46314":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"0:2873":{"crate_id":0,"path":["clap","AppSettings","NoAutoHelp"],"kind":"variant"},"32:3744":{"crate_id":32,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46392":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3452":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"0:91":{"crate_id":0,"path":["clap","app_from_crate"],"kind":"macro"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:22707":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:8012":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"6:1541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:3873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"25:648":{"crate_id":25,"path":["indexmap","map","IntoIter"],"kind":"struct"},"0:3255":{"crate_id":0,"path":["clap","ArgSettings","HiddenShortHelp"],"kind":"variant"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:14629":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"23:436":{"crate_id":23,"path":["clap","Output"],"kind":"typedef"},"1:10974":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"1:4148":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11916":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:13498":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:21298":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Lo"],"kind":"struct"},"6:4229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:791":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4104":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"25:197":{"crate_id":25,"path":["indexmap","map","core","IndexMapCore"],"kind":"struct"},"2:9606":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:6184":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"32:1591":{"crate_id":32,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43123":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8672":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:1580":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:9405":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:43583":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"23:415":{"crate_id":23,"path":["os_str_bytes","raw_str","RawOsStr"],"kind":"struct"},"5:654":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"32:0":{"crate_id":32,"path":["libc"],"kind":"module"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"23:190":{"crate_id":23,"path":["os_str_bytes","pattern","Encoded"],"kind":"trait"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:4449":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7240":{"crate_id":1,"path":["clap","IntoIter"],"kind":"typedef"},"1:7610":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:47154":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:48331":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:3089":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"30:286":{"crate_id":30,"path":["unicase","Ascii"],"kind":"struct"},"0:3249":{"crate_id":0,"path":["clap","ArgSettings","IgnoreCase"],"kind":"variant"},"6:1738":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"29:412":{"crate_id":29,"path":["termcolor","ParseColorError"],"kind":"struct"},"6:3762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5943":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43059":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:49391":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10209":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:21253":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","reverse","Reverse"],"kind":"struct"},"2:45604":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:12024":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:7107":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1218":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:496":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44983":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"32:3905":{"crate_id":32,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:4159":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46871":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:1058":{"crate_id":24,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:14248":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"32:3762":{"crate_id":32,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"32:5982":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"0:3288":{"crate_id":0,"path":["clap","ValueHint","CommandWithArguments"],"kind":"variant"},"1:15236":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2306":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2699":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"29:59":{"crate_id":29,"path":["termcolor","IoStandardStream"],"kind":"enum"},"2:11784":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46408":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"32:5857":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:15280":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:947":{"crate_id":24,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"2:43738":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:4102":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11227":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"0:3284":{"crate_id":0,"path":["clap","ValueHint","CommandName"],"kind":"variant"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:6932":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"28:0":{"crate_id":28,"path":["unicode_width"],"kind":"module"},"6:521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:21507":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7615":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11039":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"29:105":{"crate_id":29,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"1:10918":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:43700":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:5193":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"32:75":{"crate_id":32,"path":["libc","unix","DIR"],"kind":"enum"},"6:1643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1422":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"0:88":{"crate_id":0,"path":["clap","crate_authors"],"kind":"macro"},"5:6743":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"32:3867":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"26:705":{"crate_id":26,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44752":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:21511":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:14254":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"0:137":{"crate_id":0,"path":["clap","FromArgMatches"],"kind":"trait"},"1:4383":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"5:4428":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"25:668":{"crate_id":25,"path":["indexmap","map","Drain"],"kind":"struct"},"1:976":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"0:3290":{"crate_id":0,"path":["clap","ValueHint","Username"],"kind":"variant"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"32:1586":{"crate_id":32,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"26:851":{"crate_id":26,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"32:4976":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8324":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:12225":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:11679":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"0:3218":{"crate_id":0,"path":["clap","Err"],"kind":"typedef"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"32:6454":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:48004":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"30:81":{"crate_id":30,"path":["clap","Target"],"kind":"typedef"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:11056":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:14393":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1970":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:9642":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:2791":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3100":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"32:6581":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48854":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9376":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"2:3126":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"1:10878":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"2:48133":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:2144":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7811":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"25:22":{"crate_id":25,"path":["indexmap","equivalent","Equivalent"],"kind":"trait"},"6:509":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"0:3282":{"crate_id":0,"path":["clap","ValueHint","ExecutablePath"],"kind":"variant"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:2633":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:21663":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:14324":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"0:3259":{"crate_id":0,"path":["clap","ArgSettings","AllowInvalidUtf8"],"kind":"variant"},"5:788":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44077":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10454":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:48674":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"32:4072":{"crate_id":32,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:170":{"crate_id":24,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:53022":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:5107":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"32:4119":{"crate_id":32,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:4069":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7324":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44052":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3024":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:637":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"0:3505":{"crate_id":0,"path":["clap","ErrorKind","EmptyValue"],"kind":"variant"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:10789":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:4199":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:1995":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"32:1516":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"32:4078":{"crate_id":32,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9338":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:48077":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:50471":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"32:3987":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"0:0":{"crate_id":0,"path":["clap"],"kind":"module"},"24:885":{"crate_id":24,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10726":{"crate_id":1,"path":["std","io","Initializer"],"kind":"struct"},"2:46962":{"crate_id":2,"path":["clap","Searcher"],"kind":"typedef"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"32:1532":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44059":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:7359":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"32:4089":{"crate_id":32,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:3017":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:43498":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:10141":{"crate_id":2,"path":["clap","IntoIter"],"kind":"typedef"},"2:50456":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"6:4258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3173":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:44875":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7478":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:1378":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"32:3917":{"crate_id":32,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:4778":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"0:3271":{"crate_id":0,"path":["clap","ValueHint"],"kind":"enum"},"2:53117":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"2:46939":{"crate_id":2,"path":["clap","Searcher"],"kind":"typedef"},"32:4034":{"crate_id":32,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4292":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:804":{"crate_id":5,"path":["clap","Target"],"kind":"typedef"},"2:23282":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"26:154":{"crate_id":26,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3376":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"1:6204":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7579":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"32:5010":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:5164":{"crate_id":5,"path":["clap","Output"],"kind":"typedef"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:1277":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:14764":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8368":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:5170":{"crate_id":5,"path":["clap","Output"],"kind":"typedef"},"1:9196":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"5:7429":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"0:3323":{"crate_id":0,"path":["clap","Arg"],"kind":"struct"},"25:1052":{"crate_id":25,"path":["indexmap","set","Difference"],"kind":"struct"},"32:1553":{"crate_id":32,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"32:6593":{"crate_id":32,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"32:502":{"crate_id":32,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7872":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8166":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"32:5784":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:10970":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:14232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:9602":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:49199":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:50486":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:3555":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:22614":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"32:6604":{"crate_id":32,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:7241":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"32:1659":{"crate_id":32,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12802":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"32:1669":{"crate_id":32,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:50255":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43761":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3891":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43031":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"0:3237":{"crate_id":0,"path":["clap","ArgSettings","RequireDelimiter"],"kind":"variant"},"0:2849":{"crate_id":0,"path":["clap","AppSettings","HelpRequired"],"kind":"variant"},"25:534":{"crate_id":25,"path":["indexmap","map","Keys"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8361":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"27:54":{"crate_id":27,"path":["textwrap","word_splitters","WordSplitter"],"kind":"trait"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"29:95":{"crate_id":29,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"25:953":{"crate_id":25,"path":["indexmap","set","IntoIter"],"kind":"struct"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10988":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:45293":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:7425":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"32:582":{"crate_id":32,"path":["libc","unix","linger"],"kind":"struct"},"0:3729":{"crate_id":0,"path":["clap","ColorChoice","Auto"],"kind":"variant"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:11453":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"23:114":{"crate_id":23,"path":["os_str_bytes","private","Sealed"],"kind":"trait"},"6:6655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10140":{"crate_id":2,"path":["clap","Item"],"kind":"typedef"},"0:3513":{"crate_id":0,"path":["clap","ErrorKind","TooFewValues"],"kind":"variant"},"2:44574":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:5725":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"32:1634":{"crate_id":32,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:60085":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:14448":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"32:3729":{"crate_id":32,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:10593":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:12004":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:3233":{"crate_id":0,"path":["clap","ArgSettings","UseValueDelimiter"],"kind":"variant"},"30:200":{"crate_id":30,"path":["clap","Target"],"kind":"typedef"},"1:2720":{"crate_id":1,"path":["clap","Output"],"kind":"typedef"},"2:8927":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4383":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"27:264":{"crate_id":27,"path":["textwrap","Options"],"kind":"struct"},"2:48029":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10731":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:23346":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4230":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:3131":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1287":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"31:0":{"crate_id":31,"path":["atty"],"kind":"module"},"23:76":{"crate_id":23,"path":["os_str_bytes","OsStrBytes"],"kind":"trait"},"2:3156":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:153":{"crate_id":24,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10502":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"32:6558":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8317":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7600":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:12971":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:9390":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11066":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44624":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"26:824":{"crate_id":26,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"32:546":{"crate_id":32,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"26:805":{"crate_id":26,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:11733":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"0:3509":{"crate_id":0,"path":["clap","ErrorKind","ValueValidation"],"kind":"variant"},"1:10317":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:6419":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"25:1134":{"crate_id":25,"path":["indexmap","set","Union"],"kind":"struct"},"2:3379":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"33:0":{"crate_id":33,"path":["strsim"],"kind":"module"},"27:86":{"crate_id":27,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"trait"},"6:1832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10227":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"32:4946":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"24:833":{"crate_id":24,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7473":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"26:1858":{"crate_id":26,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"1:15276":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:13079":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"32:5067":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:1273":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"0:3616":{"crate_id":0,"path":["clap","Indices"],"kind":"struct"},"32:3777":{"crate_id":32,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:15287":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4434":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"24:705":{"crate_id":24,"path":["memchr","cow","Imp"],"kind":"enum"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8740":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"1:3496":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:9124":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"32:3750":{"crate_id":32,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46676":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46544":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:48445":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10377":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"0:3239":{"crate_id":0,"path":["clap","ArgSettings","HidePossibleValues"],"kind":"variant"},"2:22700":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"0:86":{"crate_id":0,"path":["clap","crate_license"],"kind":"macro"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"27:90":{"crate_id":27,"path":["textwrap","wrap_algorithms","WrapAlgorithmClone"],"kind":"trait"},"5:4174":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"2:6833":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:50381":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:12753":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1300":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:1226":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5674":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45788":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"26:1589":{"crate_id":26,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"32:5152":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:3157":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:8399":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44632":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:2177":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:1837":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:2990":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:36055":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46840":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"28:47":{"crate_id":28,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"0:3272":{"crate_id":0,"path":["clap","ValueHint","Unknown"],"kind":"variant"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"23:160":{"crate_id":23,"path":["os_str_bytes","iter","Split"],"kind":"struct"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2341":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:44803":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:47310":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4156":{"crate_id":2,"path":["core","array","collect_into_array","Guard"],"kind":"struct"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2815":{"crate_id":1,"path":["clap","Target"],"kind":"typedef"},"1:10980":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"32:144":{"crate_id":32,"path":["libc","unix","FILE"],"kind":"enum"},"32:5991":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10046":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1311":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:4227":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:15278":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:7468":{"crate_id":2,"path":["clap","Item"],"kind":"typedef"},"0:117":{"crate_id":0,"path":["clap","Parser"],"kind":"trait"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"32:526":{"crate_id":32,"path":["libc","unix","rusage"],"kind":"struct"},"2:43620":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:14607":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"26:1034":{"crate_id":26,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48398":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:48238":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21570":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"25:115":{"crate_id":25,"path":["indexmap","map","core","raw","DebugIndices"],"kind":"struct"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:2787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:50333":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:48697":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"26:405":{"crate_id":26,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"2:3253":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:5176":{"crate_id":5,"path":["clap","Output"],"kind":"typedef"},"0:3229":{"crate_id":0,"path":["clap","ArgSettings","Hidden"],"kind":"variant"},"2:7458":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10922":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:15269":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:1473":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:4437":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:14401":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"23:403":{"crate_id":23,"path":["os_str_bytes","pattern","EncodedByte"],"kind":"struct"},"1:15289":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:4430":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"2:3079":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2932":{"crate_id":1,"path":["clap","Owned"],"kind":"typedef"},"2:45595":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:2179":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46440":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22591":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:22735":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"32:6546":{"crate_id":32,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"32:3812":{"crate_id":32,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:7413":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:22670":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"30:0":{"crate_id":30,"path":["unicase"],"kind":"module"},"2:11877":{"crate_id":2,"path":["clap","Output"],"kind":"typedef"},"0:3728":{"crate_id":0,"path":["clap","ColorChoice"],"kind":"enum"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2704":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"6:3910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"25:312":{"crate_id":25,"path":["indexmap","map","core","VacantEntry"],"kind":"struct"},"2:2072":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"32:567":{"crate_id":32,"path":["libc","unix","pollfd"],"kind":"struct"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43649":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"30:259":{"crate_id":30,"path":["unicase","unicode","fold","Fold"],"kind":"enum"},"2:43729":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"25:44":{"crate_id":25,"path":["indexmap","mutable_keys","PrivateMarker"],"kind":"struct"},"5:4648":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"26:372":{"crate_id":26,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"1:11117":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:7506":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1491":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:5568":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"2:3053":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"0:2867":{"crate_id":0,"path":["clap","AppSettings","SubcommandRequired"],"kind":"variant"},"5:5722":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"0:2869":{"crate_id":0,"path":["clap","AppSettings","TrailingVarArg"],"kind":"variant"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1402":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"2:48052":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"0:2843":{"crate_id":0,"path":["clap","AppSettings","PropagateVersion"],"kind":"variant"},"2:23642":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"32:5793":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:21934":{"crate_id":2,"path":["core","core_simd","select","Select"],"kind":"trait"},"2:3040":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:45279":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:46721":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"32:1692":{"crate_id":32,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"32:5961":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11699":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"32:4885":{"crate_id":32,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3032":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:1887":{"crate_id":2,"path":["clap","Target"],"kind":"typedef"},"1:11551":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:47150":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:3250":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"32:1823":{"crate_id":32,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"0:99":{"crate_id":0,"path":["clap","values_t_or_exit"],"kind":"macro"},"32:1565":{"crate_id":32,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"}},"external_crates":{"30":{"name":"unicase","html_root_url":"https://docs.rs/unicase/2.6.0/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"atty","html_root_url":null},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"memchr","html_root_url":null},"29":{"name":"termcolor","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"strsim","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"22":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"os_str_bytes","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"unicode_width","html_root_url":null},"32":{"name":"libc","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"textwrap","html_root_url":"https://docs.rs/textwrap/0.14.2/"},"21":{"name":"lazy_static","html_root_url":"https://docs.rs/lazy_static/1.4.0/"},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"indexmap","html_root_url":"https://docs.rs/indexmap/1/"},"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"hashbrown","html_root_url":null},"20":{"name":"clap_derive","html_root_url":"https://docs.rs/clap_derive/3.0.0-beta.5/"}},"format_version":9}