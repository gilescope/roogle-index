{"root":"0:0","crate_version":"1.0.72","includes_private":false,"index":{"1:5529":{"id":"1:5529","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9341":{"id":"2:9341","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9342","2:9343","2:9345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:102":{"id":"0:102","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[339,4],"end":[342,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12455":{"id":"2:12455","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2622":{"id":"2:2622","crate_id":2,"name":"borrow_mut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3114":{"id":"2:3114","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3116"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2941-0:305":{"id":"b:2:2941-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9409":{"id":"2:9409","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12426":{"id":"2:12426","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5485":{"id":"1:5485","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5486","1:5487","1:5488","1:5489","1:5490","1:5491","1:5492","1:5493","1:5494","1:5495","1:5496","1:5497","1:5498","1:5499","1:5500","1:5501"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:258":{"id":"0:258","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[2933,4],"end":[2935,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:366":{"id":"a:2:3012-0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9606":{"id":"2:9606","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9607","2:9608","2:9609","2:9610","2:9611","2:9612","2:9613","2:9614","2:9615","2:9616","2:9617","2:9618","2:9619","2:9620"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[183,9],"end":[183,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:376"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:152":{"id":"0:152","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[919,4],"end":[922,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["use_plt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[794,4],"end":[797,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12476":{"id":"2:12476","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5424":{"id":"5:5424","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15275"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12448":{"id":"2:12448","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2915":{"id":"2:2915","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2917"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:21934":{"id":"2:21934","crate_id":2,"name":"Select","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Mask","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21928","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Mask"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:125":{"id":"0:125","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[612,4],"end":[619,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cuda",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12467":{"id":"2:12467","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7506":{"id":"2:7506","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7507","2:7508","2:7509","2:7510","2:7514","2:7517"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7913":{"id":"2:7913","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12408":{"id":"2:12408","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:363":{"id":"0:363","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[145,9],"end":[145,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2847":{"id":"2:2847","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2956-0:305":{"id":"b:2:2956-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[162,0],"end":[166,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:87"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9403":{"id":"2:9403","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3150":{"id":"2:3150","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152","2:3153"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3253":{"id":"2:3253","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3255"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3256","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3089":{"id":"2:3089","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3091","2:3092"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12004":{"id":"2:12004","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12006","2:12007","2:12008","2:12009","2:12010","2:12011","2:12012"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2909":{"id":"2:2909","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2911"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:21663":{"id":"2:21663","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:22229","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:288":{"id":"0:288","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2945-0:305":{"id":"b:2:2945-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[279,0],"end":[2770,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:101","0:102","0:104","0:106","0:110","0:112","0:113","0:115","0:116","0:117","0:118","0:119","0:120","0:122","0:124","0:125","0:126","0:127","0:128","0:129","0:130","0:134","0:138","0:139","0:140","0:141","0:142","0:143","0:144","0:146","0:148","0:150","0:151","0:152","0:153","0:157","0:163","0:168","0:170","0:171","0:172"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12482":{"id":"2:12482","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:46739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12013":{"id":"2:12013","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12015","2:12016","2:12017","2:12018"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2921":{"id":"2:2921","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923","2:2924"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:118":{"id":"0:118","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9965":{"id":"2:9965","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:9967","2:9968","2:9969","2:9970","2:9971","2:9972","2:9973"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:9956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:362":{"id":"0:362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,9],"end":[145,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:363"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9637":{"id":"2:9637","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9638","2:9639","2:9640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:115":{"id":"0:115","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[458,4],"end":[511,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3126":{"id":"2:3126","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3128"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:661":{"id":"5:661","crate_id":5,"name":"to_owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5408":{"id":"5:5408","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2633":{"id":"2:2633","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2634","2:2635"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:163":{"id":"0:163","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1080,4],"end":[1084,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThe name `output` should be the name of the library.  For backwards compatibility,\nthe `output` may start with `lib` and end with `.a`.  The Rust compiler will create\nthe assembly with the lib prefix and .a extension.  MSVC will create a file without prefix,\nending with `.lib`.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[384,4],"end":[388,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["val",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2956-0:366":{"id":"b:2:2956-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5463":{"id":"1:5463","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5464","1:5465","1:5466","1:5467"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3247":{"id":"2:3247","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7910":{"id":"2:7910","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7531":{"id":"2:7531","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7532","2:7533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:3675-0:281":{"id":"b:2:3675-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8360-0:305":{"id":"a:2:8360-0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3053-0:359":{"id":"a:2:3053-0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3053-0:366":{"id":"a:2:3053-0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:281":{"id":"0:281","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:282","0:284","0:286","0:288","0:290"],"impls":["a:2:3012-0:281","a:2:3024-0:281","a:2:3053-0:281","a:2:8360-0:281","a:2:8361-0:281","b:2:2945-0:281","b:2:2941-0:281","b:5:658-0:281","b:2:2956-0:281","b:2:2951-0:281","b:2:2617-0:281","b:2:2620-0:281","b:2:3675-0:281","0:303","0:302","0:300","0:297","0:294","0:296","0:299"]}},"b:2:2951-0:305":{"id":"b:2:2951-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:168":{"id":"0:168","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1287,4],"end":[1312,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7471":{"id":"2:7471","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7473","2:7475","2:7476"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12360":{"id":"2:12360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11466","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12361","2:12362","2:12363","2:12364","2:12365","2:12366","2:12367","2:12368","2:12370","2:12372","2:12374","2:12376","2:12377","2:12378","2:12379","2:12380","2:12381","2:12382","2:12383","2:12384","2:12385","2:12386","2:12387","2:12388","2:12391","2:12394","2:12397","2:12401","2:12405","2:12408","2:12411","2:12414","2:12417","2:12420","2:12423","2:12426","2:12429","2:12432","2:12435","2:12438","2:12441","2:12444","2:12446","2:12448","2:12450","2:12451","2:12452","2:12455","2:12458","2:12461","2:12464","2:12467","2:12470","2:12473","2:12475","2:12476","2:12477","2:12478","2:12479","2:12481","2:12482"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6608":{"id":"1:6608","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6609"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12405":{"id":"2:12405","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11994","str::split_whitespace":"1:15275","`DoubleEndedIterator`":"2:7506","prim@char":"1:15270","str::rsplit":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:46422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2663":{"id":"2:2663","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2665","2:2666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:7917":{"id":"2:7917","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7011","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9596":{"id":"2:9596","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9597","2:9599"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3379":{"id":"2:3379","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381","2:3382","2:3383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:8360":{"id":"2:8360","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:359":{"id":"0:359","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[146,0],"end":[151,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3012-0:359","a:2:3024-0:359","a:2:3053-0:359","a:2:8360-0:359","a:2:8361-0:359","b:2:2945-0:359","b:2:2941-0:359","b:5:658-0:359","b:5:5724-0:359","b:2:2956-0:359","b:2:2951-0:359","b:2:2617-0:359","b:2:2620-0:359","b:2:3675-0:359","0:86","0:362","0:364","0:88","0:90"]}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[183,16],"end":[183,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:378"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8883":{"id":"2:8883","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8884","2:8885","2:8886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2668":{"id":"2:2668","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:83":{"id":"0:83","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"a:2:8360-0:359":{"id":"a:2:8360-0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3256":{"id":"2:3256","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3258","2:3259"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2990":{"id":"2:2990","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:148":{"id":"0:148","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[881,4],"end":[884,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["archiver",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:22229":{"id":"2:22229","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8361-0:359":{"id":"a:2:8361-0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12019":{"id":"2:12019","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12021","2:12022","2:12023"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9401":{"id":"2:9401","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12379":{"id":"2:12379","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15275"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12386":{"id":"2:12386","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:46686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:366":{"id":"b:2:2945-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:87":{"id":"0:87","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[840,4],"end":[843,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["debug",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12477":{"id":"2:12477","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12377":{"id":"2:12377","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15275","crate::ops::IndexMut":"2:3312","str::slice_unchecked":"1:15275"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:359":{"id":"a:2:3024-0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5471":{"id":"1:5471","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5472","1:5473","1:5474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12441":{"id":"2:12441","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","`DoubleEndedIterator`":"2:7506","str::match_indices":"1:15275"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:46590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3140":{"id":"2:3140","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142","2:3143"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:21517":{"id":"2:21517","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:21507","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12420":{"id":"2:12420","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","str::rsplitn":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:46526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:259":{"id":"0:259","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[2941,4],"end":[2955,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2955":{"id":"2:2955","crate_id":2,"name":"try_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[169,4],"end":[171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:13128":{"id":"2:13128","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13129","2:13130","2:13131","2:13132","2:13133","2:13134","2:13135"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5402":{"id":"5:5402","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12411":{"id":"2:12411","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994","`DoubleEndedIterator`":"2:7506","str::split":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:46440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2611":{"id":"2:2611","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2613"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:128":{"id":"0:128","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[674,4],"end":[678,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3020":{"id":"2:3020","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9405":{"id":"2:9405","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9406"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12383":{"id":"2:12383","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15275"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:46696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12481":{"id":"2:12481","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:46730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2944":{"id":"2:2944","crate_id":2,"name":"into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3024":{"id":"2:3024","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3156":{"id":"2:3156","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158","2:3159"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:127":{"id":"0:127","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[653,4],"end":[656,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings_into_errors",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:254":{"id":"0:254","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[2891,4],"end":[2913,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3179":{"id":"2:3179","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12385":{"id":"2:12385","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:46676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5479":{"id":"1:5479","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5480","1:5481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12461":{"id":"2:12461","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3106":{"id":"2:3106","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3107","2:3108"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12470":{"id":"2:12470","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5722":{"id":"5:5722","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12370":{"id":"2:12370","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:44574"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:281":{"id":"b:5:658-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3131":{"id":"2:3131","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3132","2:3133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2941-0:366":{"id":"b:2:2941-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2959":{"id":"2:2959","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:36055","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2941-0:281":{"id":"b:2:2941-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0":{"id":"0:0","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3254,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:73","0:305","0:359","0:366"]}},"b:2:2620-0:305":{"id":"b:2:2620-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3012-0:305":{"id":"a:2:3012-0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12387":{"id":"2:12387","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:46714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:150":{"id":"0:150","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[895,4],"end":[898,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cargo_metadata",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:112":{"id":"0:112","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[406,4],"end":[409,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3135":{"id":"2:3135","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137","2:3138"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:304":{"id":"0:304","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12374":{"id":"2:12374","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12435":{"id":"2:12435","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:7506","str::matches":"1:15275","self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:46644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:11453":{"id":"2:11453","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11454","2:11455"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:282":{"id":"0:282","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3673":{"id":"2:3673","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"2:3100":{"id":"2:3100","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3102","2:3103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12401":{"id":"2:12401","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","`None`":"2:44574"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:305":{"id":"b:5:658-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5724-0:359":{"id":"b:5:5724-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:5722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:5726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3145":{"id":"2:3145","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3147","2:3148"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:73":{"id":"0:73","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[881,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:80","0:82","0:281","0:83"]}},"2:12720":{"id":"2:12720","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12721","2:12722","2:12723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12380":{"id":"2:12380","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:46392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:343":{"id":"0:343","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3122":{"id":"2:3122","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3124"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12397":{"id":"2:12397","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:44574","self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:654":{"id":"5:654","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:655","5:656","5:657"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12365":{"id":"2:12365","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:256":{"id":"0:256","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[2919,4],"end":[2921,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:122":{"id":"0:122","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[584,4],"end":[593,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Item","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:7462","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12429":{"id":"2:12429","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[362,4],"end":[371,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dirs",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7462","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Item","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:7462","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3110":{"id":"2:3110","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:295":{"id":"0:295","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9390":{"id":"2:9390","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12024":{"id":"2:12024","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3308":{"id":"2:3308","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310","2:3311"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"b:2:2620-0:281":{"id":"b:2:2620-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:116":{"id":"0:116","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[524,4],"end":[527,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:359":{"id":"b:2:2620-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12367":{"id":"2:12367","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15284"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:304"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5397":{"id":"1:5397","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5398","1:5399"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12391":{"id":"2:12391","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:281":{"id":"a:2:3012-0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3174":{"id":"2:3174","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2951-0:359":{"id":"b:2:2951-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:343"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4427":{"id":"1:4427","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4428","1:4429","1:4430","1:4431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2614":{"id":"2:2614","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2616"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2960":{"id":"2:2960","crate_id":2,"name":"try_from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9397":{"id":"2:9397","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3501":{"id":"2:3501","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5153":{"id":"5:5153","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5155","5:5156"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:12438":{"id":"2:12438","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15275","self::pattern":"2:11994","`DoubleEndedIterator`":"2:7506","prim@char":"1:15270"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:46572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12473":{"id":"2:12473","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11931","FromStr::Err":"2:11931"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11931","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3675-0:359":{"id":"b:2:3675-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6606":{"id":"1:6606","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7011":{"id":"2:7011","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7012","2:7013","2:7014","2:7015","2:7016","2:7017","2:7018"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2710","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:101":{"id":"0:101","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[285,4],"end":[322,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:8361":{"id":"2:8361","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3675-0:366":{"id":"b:2:3675-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12382":{"id":"2:12382","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:46408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12475":{"id":"2:12475","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:286":{"id":"0:286","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2918":{"id":"2:2918","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2920"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[172,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:89"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:341":{"id":"0:341","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12458":{"id":"2:12458","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12361":{"id":"2:12361","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:2947":{"id":"2:2947","crate_id":2,"name":"from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"1:6535":{"id":"1:6535","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12450":{"id":"2:12450","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5533":{"id":"1:5533","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:365":{"id":"0:365","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[145,16],"end":[145,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12444":{"id":"2:12444","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,0],"end":[174,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","type_id","source","cause","backtrace"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3677":{"id":"2:3677","crate_id":2,"name":"type_id","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:43271","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5157":{"id":"5:5157","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5159","5:5160"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12432":{"id":"2:12432","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7506","self::pattern":"2:11994","prim@char":"1:15270","str::matches":"1:15275"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:46626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:143":{"id":"0:143","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[851,4],"end":[854,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["force",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3079":{"id":"2:3079","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081","2:3082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:144":{"id":"0:144","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[861,4],"end":[864,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["out_dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2710":{"id":"2:2710","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2712","2:2713","2:2714","2:2715","2:2716"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12478":{"id":"2:12478","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:281":{"id":"b:2:2945-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4349":{"id":"1:4349","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4350","1:4351","1:4353","1:4354","1:4355","1:4356","1:4357","1:4358","1:4359","1:4360","1:4362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3024-0:366":{"id":"a:2:3024-0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:113":{"id":"0:113","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[423,4],"end":[426,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9399":{"id":"2:9399","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:134":{"id":"0:134","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_set_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9411":{"id":"2:9411","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9412"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:82":{"id":"0:82","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["_tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"2:3223":{"id":"2:3223","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3224","2:3225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5391":{"id":"1:5391","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5392","1:5393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:262":{"id":"0:262","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[2977,4],"end":[2979,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2699":{"id":"2:2699","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2700","2:2701","2:2702","2:2703"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2710","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:260":{"id":"0:260","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[2960,4],"end":[2969,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12705":{"id":"2:12705","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12706","2:12707"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:290":{"id":"0:290","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12384":{"id":"2:12384","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15275"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:46705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5423":{"id":"5:5423","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15275"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:378":{"id":"0:378","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[183,16],"end":[183,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[92,0],"end":[127,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:100","a:2:3012-0:305","a:2:3024-0:305","a:2:3053-0:305","a:2:8360-0:305","a:2:8361-0:305","b:2:2945-0:305","b:2:2941-0:305","b:5:658-0:305","b:2:2956-0:305","b:2:2951-0:305","b:2:2617-0:305","b:2:2620-0:305","b:2:3675-0:305","0:340","0:242","0:342"]}},"2:12363":{"id":"2:12363","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5541":{"id":"1:5541","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5542"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:366":{"id":"0:366","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[184,0],"end":[193,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:244","a:2:3012-0:366","a:2:3024-0:366","a:2:3053-0:366","a:2:8360-0:366","a:2:8361-0:366","b:2:2945-0:366","b:2:2941-0:366","b:5:658-0:366","b:2:2956-0:366","b:2:2951-0:366","b:2:2617-0:366","b:2:2620-0:366","b:2:3675-0:366","0:375","0:377"]}},"2:3017":{"id":"2:3017","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12381":{"id":"2:12381","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:46398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3012-0:359":{"id":"a:2:3012-0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2619":{"id":"2:2619","crate_id":2,"name":"borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7458":{"id":"2:7458","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7460"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3021":{"id":"2:3021","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5421":{"id":"5:5421","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7606","`Box<str>`":"5:313"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2617-0:281":{"id":"b:2:2617-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4716":{"id":"1:4716","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4717","1:4718"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:261":{"id":"0:261","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[2972,4],"end":[2974,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2956-0:281":{"id":"b:2:2956-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:7481":{"id":"1:7481","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7482"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8360-0:366":{"id":"a:2:8360-0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:263":{"id":"0:263","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[2982,4],"end":[2987,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3012":{"id":"2:3012","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:295"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:146":{"id":"0:146","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[871,4],"end":[874,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compiler",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3024-0:281":{"id":"a:2:3024-0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12452":{"id":"2:12452","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:366":{"id":"a:2:8361-0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6691":{"id":"1:6691","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3290":{"id":"2:3290","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292","2:3293","2:3294"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5401":{"id":"5:5401","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:313","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:376":{"id":"0:376","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[183,9],"end":[183,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4434":{"id":"1:4434","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4435","1:4436","1:4437","1:4439","1:4440","1:4442","1:4443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2617-0:366":{"id":"b:2:2617-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:284":{"id":"0:284","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:140":{"id":"0:140","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[821,4],"end":[824,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:172":{"id":"0:172","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1361,4],"end":[1432,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12414":{"id":"2:12414","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15275","self::pattern":"2:11994","prim@char":"1:15270","`DoubleEndedIterator`":"2:7506","str::rsplit_terminator":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:46472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,16],"end":[145,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:365"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11931":{"id":"2:11931","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11932","2:11933"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12388":{"id":"2:12388","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[812,4],"end":[815,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2620-0:366":{"id":"b:2:2620-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2622"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3457":{"id":"2:3457","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3459"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3452","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3464":{"id":"2:3464","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:80":{"id":"0:80","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"b:2:2617-0:305":{"id":"b:2:2617-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6204":{"id":"1:6204","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6205","1:6206","1:6207","1:6208","1:6209","1:6210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3118":{"id":"2:3118","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3120"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12423":{"id":"2:12423","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","str::splitn":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:46544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:298":{"id":"0:298","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:662":{"id":"5:662","crate_id":5,"name":"clone_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7425":{"id":"2:7425","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7427"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4409":{"id":"1:4409","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4410","1:4411","1:4413","1:4414","1:4415","1:4416","1:4417","1:4426"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12479":{"id":"2:12479","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15270"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:46721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2925":{"id":"2:2925","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2927","2:2928"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3053":{"id":"2:3053","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3053-0:281":{"id":"a:2:3053-0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2956-0:359":{"id":"b:2:2956-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2959","2:2960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12451":{"id":"2:12451","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:126":{"id":"0:126","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[627,4],"end":[632,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cudart",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12378":{"id":"2:12378","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15275"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:13057":{"id":"2:13057","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13058","2:13059","2:13060","2:13061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5726":{"id":"5:5726","crate_id":5,"name":"to_string","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2912":{"id":"2:2912","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2914"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:2954":{"id":"2:2954","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3250":{"id":"2:3250","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3253","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:124":{"id":"0:124","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[599,4],"end":[602,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:658-0:359":{"id":"b:5:658-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8361-0:281":{"id":"a:2:8361-0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:170":{"id":"0:170","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1326,4],"end":[1331,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7063","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7421":{"id":"2:7421","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7423"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3170":{"id":"2:3170","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6430":{"id":"1:6430","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6431","1:6432","1:6433","1:6434","1:6435","1:6436","1:6437","1:6438","1:6439","1:6440","1:6441","1:6442","1:6443","1:6444","1:6445","1:6446","1:6447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12366":{"id":"2:12366","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15275","`u8`":"1:15284"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"1:6604":{"id":"1:6604","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6605"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:110":{"id":"0:110","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[391,4],"end":[394,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["obj",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3084":{"id":"2:3084","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3086","2:3087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:2341":{"id":"1:2341","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2342","1:2344","1:2345","1:2346"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9390","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9397","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12446":{"id":"2:12446","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2945-0:359":{"id":"b:2:2945-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3022":{"id":"2:3022","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:861":{"id":"1:861","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:862","1:863","1:864","1:865","1:866","1:867","1:868"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2951-0:366":{"id":"b:2:2951-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2772,0],"end":[2776,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2990","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:243"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3094":{"id":"2:3094","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3096","2:3097"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5420":{"id":"5:5420","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3162":{"id":"2:3162","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3024-0:305":{"id":"a:2:3024-0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2941-0:359":{"id":"b:2:2941-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2918","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2944"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3166":{"id":"2:3166","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12362":{"id":"2:12362","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[572,4],"end":[575,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["no_default_flags",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:120":{"id":"0:120","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[578,4],"end":[581,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:2909","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12394":{"id":"2:12394","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15270","self::pattern":"2:11994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2617-0:359":{"id":"b:2:2617-0:359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:117":{"id":"0:117","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[542,4],"end":[545,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["shared_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:257":{"id":"0:257","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[2925,4],"end":[2927,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:129":{"id":"0:129","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[697,4],"end":[700,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12372":{"id":"2:12372","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12464":{"id":"2:12464","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5405":{"id":"5:5405","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5422":{"id":"5:5422","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3236":{"id":"2:3236","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3237"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"5:5400":{"id":"5:5400","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5221","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5401","5:5402","5:5405","5:5408","5:5420","5:5421","5:5422","5:5423","5:5424"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7642":{"id":"2:7642","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7643","2:7644","2:7645","2:7646","2:7648","2:7651","2:7652","2:7653","2:7654","2:7656","2:7658","2:7659","2:7661","2:7664","2:7671","2:7673","2:7676","2:7677","2:7678","2:7680","2:7682","2:7685","2:7686","2:7687","2:7691","2:7694","2:7695","2:7696","2:7698","2:7699","2:7701","2:7711","2:7726","2:7728","2:7732","2:7741","2:7744","2:7746","2:7753","2:7760","2:7767","2:7776","2:7787","2:7794","2:7801","2:7802","2:7803","2:7815","2:7822","2:7834","2:7841","2:7842","2:7847","2:7850","2:7853","2:7854","2:7856","2:7858","2:7861","2:7864","2:7867","2:7870","2:7873","2:7876","2:7878","2:7880","2:7882","2:7884","2:7886","2:7887","2:7895"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7462":{"id":"2:7462","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7463","2:7464","2:7465"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12417":{"id":"2:12417","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11994","prim@char":"1:15270","str::split_terminator":"1:15275","str::split":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:46490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:151":{"id":"0:151","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[904,4],"end":[907,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pic",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6532":{"id":"1:6532","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6533","1:6534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:6302":{"id":"1:6302","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6303","1:6304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:660":{"id":"5:660","crate_id":5,"name":"Owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"2:12376":{"id":"2:12376","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3308","`str`":"1:15275","str::slice_mut_unchecked":"1:15275"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12364":{"id":"2:12364","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11477"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[730,4],"end":[736,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_link_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2915","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3053-0:305":{"id":"a:2:3053-0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3452":{"id":"2:3452","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3453","2:3454","2:3455","2:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3457","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3452","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:141":{"id":"0:141","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[830,4],"end":[833,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9407":{"id":"2:9407","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9408"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:157":{"id":"0:157","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[946,4],"end":[1066,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:44700","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2951-0:281":{"id":"b:2:2951-0:281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2925","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2954","2:2955"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:658-0:366":{"id":"b:5:658-0:366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:660","5:661","5:662"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6184":{"id":"1:6184","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6185","1:6186","1:6187","1:6188","1:6190","1:6192","1:6193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2778,0],"end":[2988,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:254","0:256","0:257","0:258","0:259","0:260","0:261","0:262","0:263"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:243":{"id":"0:243","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[2773,4],"end":[2775,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1351,4],"end":[1356,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12368":{"id":"2:12368","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:44574"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:44574","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8361-0:305":{"id":"a:2:8361-0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:73","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2663","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:298"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:341"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3675-0:305":{"id":"b:2:3675-0:305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3677"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5519":{"id":"1:5519","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520","1:5521","1:5522","1:5523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3312":{"id":"2:3312","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3314"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3308","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8360-0:281":{"id":"a:2:8360-0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:281","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:153":{"id":"0:153","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[927,4],"end":[930,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_crt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:305","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}}},"paths":{"2:48052":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8958":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"2:43192":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:10134":{"crate_id":2,"path":["cc","Item"],"kind":"typedef"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:8472":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:1208":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:12857":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:6604":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46265":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1274":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1970":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:49199":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11728":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22735":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7579":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:14337":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:21665":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"5:7443":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:21511":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10849":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:13807":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:11056":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:43306":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:305":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"5:3574":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:23186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:574":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:48238":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:12790":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:3047":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:14051":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"1:10292":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:15290":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:7093":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:44641":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:47201":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"6:4121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:15279":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4349":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3110":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:47377":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1300":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:12802":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"1:10918":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:46962":{"crate_id":2,"path":["cc","Searcher"],"kind":"typedef"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8426":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:2013":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:26069":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:5786":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11039":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1310":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"1:15270":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:15283":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:8586":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"6:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:957":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:7241":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:6521":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:43881":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:10964":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12297":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:10021":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10980":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:22132":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:48398":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"5:5207":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:45780":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:34898":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11458":{"crate_id":2,"path":["cc","Item"],"kind":"typedef"},"6:3768":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8899":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"2:12753":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7872":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11699":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:53065":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"6:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9405":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10193":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:14448":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"2:7974":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:3175":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3100":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3034":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:10564":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:3741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3053":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:14097":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11768":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3452":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:4366":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:7425":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6691":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:3810":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"2:29790":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"0:288":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:47031":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:15236":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10507":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43613":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:48722":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46997":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43850":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10763":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:7600":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46392":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"2:3017":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:10454":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21321":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Odd"],"kind":"struct"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"0:290":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11624":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:3012":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:4174":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"5:4428":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:877":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43799":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:7566":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:7506":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:43752":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22707":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22520":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:3040":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:8399":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:45835":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:9941":{"crate_id":2,"path":["cc","Output"],"kind":"typedef"},"2:2959":{"crate_id":2,"path":["cc","Error"],"kind":"typedef"},"2:4778":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:3806":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22654":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:45788":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10770":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:22632":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3498":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:45293":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11117":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:23314":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:1953":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:13060":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:21300":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Hi"],"kind":"struct"},"6:1738":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10182":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6606":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46472":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:3040":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47158":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:7324":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3037":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:788":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10141":{"crate_id":2,"path":["cc","IntoIter"],"kind":"typedef"},"6:4229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11066":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9371":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"2:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:10349":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:2783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6078":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"1:5529":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"1:8088":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:49356":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49325":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43485":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3443":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:8361":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:2297":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43107":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47162":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5187":{"crate_id":5,"path":["cc","Owned"],"kind":"typedef"},"2:44059":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3084":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:43818":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:45604":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44052":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:46626":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:9956":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:23026":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22670":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:15269":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:45595":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4148":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43790":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46544":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"1:8466":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1464":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1678":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:7398":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:1311":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"2:21570":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3089":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:7462":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:1288":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:14020":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:7615":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:12004":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:5157":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:3843":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:9971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:7497":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3020":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:8033":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:10209":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:13021":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:13732":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46919":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:47392":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:860":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:3501":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8166":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:14114":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46345":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:15272":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:4716":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:44700":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:8922":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7429":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2925":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:45528":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:9397":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8587":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:46721":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:49038":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:15288":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8324":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:12300":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:47188":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:7913":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:4402":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"5:1445":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:21934":{"crate_id":2,"path":["core","core_simd","select","Select"],"kind":"trait"},"6:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:14764":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:14254":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47142":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10898":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:4648":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"0:82":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"2:3464":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11551":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43781":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46031":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2847":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:12225":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:53130":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"2:21266":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_left","Rotate"],"kind":"struct"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:43169":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12791":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:3179":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:10502":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10572":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:12971":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2912":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45561":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:10135":{"crate_id":2,"path":["cc","IntoIter"],"kind":"typedef"},"5:791":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:5164":{"crate_id":5,"path":["cc","Output"],"kind":"typedef"},"1:5712":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4383":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3021":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:44624":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:5519":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:9381":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"2:46730":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:45620":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:663":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:22415":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:3114":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:45279":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:10309":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47166":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:9637":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11227":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1096":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:14025":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:14479":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8368":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43830":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"12:220":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10556":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8159":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:22553":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46177":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3118":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:4109":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:8477":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:637":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6262":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:47310":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"2:48959":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:5528":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5479":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:8927":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22225":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3140":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11545":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:22606":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:14629":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:47404":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:3910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:53104":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"2:2523":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22614":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:14038":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:22332":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6982":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"1:1252":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:10274":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"1:1413":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:49391":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"0:83":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"1:811":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:1431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:15278":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3166":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:15276":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:732":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2072":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:7132":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:14742":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10326":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"2:43560":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:5378":{"crate_id":5,"path":["cc","Output"],"kind":"typedef"},"2:9393":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:10598":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"2:43700":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"1:976":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:48697":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:22229":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:4430":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11017":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3256":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3018":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7684":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11788":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46572":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:9340":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"2:21253":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","reverse","Reverse"],"kind":"struct"},"2:2918":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:877":{"crate_id":1,"path":["cc","Owned"],"kind":"typedef"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3106":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43148":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:45519":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22591":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46275":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:43639":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"2:23282":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47300":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2614":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46705":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12006":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10512":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:45796":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:3708":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:3762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:1076":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:14015":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:11453":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:49542":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:9519":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:3018":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:7374":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12290":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:48674":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:4295":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:15286":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11216":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1954":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:5966":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1304":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:1580":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21281":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","rotate_lanes_right","Rotate"],"kind":"struct"},"2:3457":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10816":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:11733":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:4156":{"crate_id":2,"path":["core","array","collect_into_array","Guard"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"2:10426":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:5722":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1298":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46398":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11877":{"crate_id":2,"path":["cc","Output"],"kind":"typedef"},"2:50548":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:8058":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"2:46327":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:14084":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10391":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7469":{"crate_id":2,"path":["cc","IntoIter"],"kind":"typedef"},"5:7226":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"5:7467":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:684":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"5:1491":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4376":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1399":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:6932":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"2:13128":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:46676":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1412":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21654":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:48350":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10813":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11602":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10169":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:3671":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:50418":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:0":{"crate_id":0,"path":["cc"],"kind":"module"},"1:11679":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11200":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:60064":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:45091":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"1:15287":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46314":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:43498":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:14074":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:15271":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2081":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7481":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43238":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"1:9241":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43031":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1226":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:3682":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:2618":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"1:10204":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:45543":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:43529":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:9596":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8706":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"2:9390":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:13498":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:22537":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:60085":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:3150":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10846":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:3250":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:12013":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1636":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8317":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44875":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:8360":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:14248":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:1965":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:7967":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:3223":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:14342":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:3983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:14775":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43514":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:9411":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4083":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43871":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50352":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:53117":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44947":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5943":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:12727":{"crate_id":2,"path":["cc","Future"],"kind":"typedef"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:44983":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47318":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:6430":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11157":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:14464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:12915":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3040":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1422":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11744":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:23122":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3907":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2909":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4750":{"crate_id":1,"path":["cc","Iter"],"kind":"typedef"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:5722":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:4227":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"1:4427":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:313":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:49892":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10922":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:7658":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:10969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4193":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:3836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9248":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3555":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43682":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"2:48311":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:43669":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:50392":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:47154":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:5193":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:48187":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43710":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"0:73":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"2:46686":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6566":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:1218":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:7063":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7389":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2215":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:7710":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:23090":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11783":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:24":{"crate_id":2,"path":["core","env"],"kind":"macro"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8988":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:46590":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:48206":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7413":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45805":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:14607":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:7421":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8590":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11606":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1423":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44692":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:15268":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:50433":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2179":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:23250":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"0:359":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:5397":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9468":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"1:10255":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7513":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:48331":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:53091":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:45019":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"0:281":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"1:2711":{"crate_id":1,"path":["cc","Owned"],"kind":"typedef"},"1:1281":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:8740":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:13057":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:50003":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43720":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3030":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:7811":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:46939":{"crate_id":2,"path":["cc","Searcher"],"kind":"typedef"},"1:9338":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:4449":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5104":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44616":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:13429":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5234":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1454":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:14688":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:3902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12705":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22578":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47018":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:13729":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43577":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10276":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46644":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3496":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43738":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:47138":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:48476":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3804":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2710":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:50381":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:45573":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:45300":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1473":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46237":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2341":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4764":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11617":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:3236":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47008":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6827":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10731":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3550":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:6302":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11564":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:15292":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:46871":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4409":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3157":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8435":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"1:5602":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:3253":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7421":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10285":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46840":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"3:299":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:6743":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:4066":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:36118":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4752":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:1262":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:3126":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4434":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11013":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7481":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:46380":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:12019":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2954":{"crate_id":2,"path":["cc","Error"],"kind":"typedef"},"2:50208":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8066":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8663":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:47150":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3472":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"6:4205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10753":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7120":{"crate_id":1,"path":["cc","Owned"],"kind":"typedef"},"2:44803":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3131":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:3823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:48626":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:8152":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:4299":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:1056":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:50456":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3025":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:7011":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:7617":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"1:10994":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43729":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:695":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:5970":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:4041":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:23058":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:11673":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43770":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:14101":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:4104":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:29932":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:7629":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2238":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:9376":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"2:4383":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"12:116":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"2:43599":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7201":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:14498":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:6608":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:14068":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3145":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:45534":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:43606":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:44675":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:12778":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"2:3174":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"5:3816":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:11477":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:53022":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"1:1277":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:13407":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:43583":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11140":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:3352":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46301":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:53052":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:4421":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"1:7359":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:48595":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:21319":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","deinterleave","Even"],"kind":"struct"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45817":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7404":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:6673":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1268":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:9399":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:48164":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10344":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"1:8672":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48133":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:1948":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"2:23346":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:44760":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:1287":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10183":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"0:282":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2815":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"6:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10912":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:50082":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"1:9124":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"1:11657":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50486":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:22498":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:48774":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:938":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:50509":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7107":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22700":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:29967":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:7473":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:49085":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10776":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1944":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:1809":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"2:50255":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7701":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:14232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4199":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10843":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46802":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:5704":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3891":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:10235":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7186":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:12961":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4063":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:606":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3079":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:5397":{"crate_id":5,"path":["cc","Owned"],"kind":"typedef"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:3022":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:10703":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4150":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43123":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"2:46027":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:509":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:7240":{"crate_id":1,"path":["cc","IntoIter"],"kind":"typedef"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:7910":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:3024":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:21517":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:23642":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10440":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:22722":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:654":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:9073":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"1:4292":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:6066":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3170":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8744":{"crate_id":1,"path":["cc","Target"],"kind":"typedef"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:49749":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2633":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1378":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:15291":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:3935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11712":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10145":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46336":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3032":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10551":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:6204":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"0:286":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"2:44911":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1574":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:2513":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:7531":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2144":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:2783":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8680":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:9960":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:10970":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:10377":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2306":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:918":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:5601":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44574":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:23218":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8539":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2663":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:5674":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:595":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:10726":{"crate_id":1,"path":["std","io","Initializer"],"kind":"struct"},"1:3371":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:13147":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10519":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:48445":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:3247":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43552":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"2:34877":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10270":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:1092":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3200":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46696":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:48100":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:43479":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44769":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"5:2781":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:1887":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"6:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43539":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11784":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3363":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:10140":{"crate_id":2,"path":["cc","Item"],"kind":"typedef"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11579":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7135":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5714":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"1:861":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3312":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8362":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:9642":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:13726":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:10937":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:14401":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:827":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:23154":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:4863":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:3954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2915":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:1402":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:15241":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"2:49116":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2699":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44839":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:9403":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:6908":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:44607":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:15274":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10717":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:43809":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:48292":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7028":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:45055":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:10364":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43620":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:1972":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:5485":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:53078":{"crate_id":2,"path":["core","core_simd","fmt","{{impl}}","fmt","Wrapper"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2240":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:50372":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:4324":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:657":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:12150":{"crate_id":2,"path":["cc","Searcher"],"kind":"typedef"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10783":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:15280":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3173":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10988":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:13258":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4181":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:7642":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:48029":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:8012":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"2:47146":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:6419":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"2:10312":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:11994":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9401":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3032":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:50333":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46365":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10878":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3135":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:10347":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:3873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46739":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:9965":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21928":{"crate_id":2,"path":["core","core_simd","select","sealed","Sealed"],"kind":"trait"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10533":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:2791":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43840":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:1948":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:9606":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:48004":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:48649":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:9078":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:44752":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2921":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:48548":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:14751":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:15281":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:4744":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9196":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"2:47130":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4069":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:43761":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:14000":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6673":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:11931":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:6951":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"2:46246":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:48499":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11594":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:3735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50294":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44778":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7344":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:50361":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:13079":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"6:1668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:2720":{"crate_id":1,"path":["cc","Output"],"kind":"typedef"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1436":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:5108":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"6:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:14311":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5826":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1239":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10819":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:10408":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:14393":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2990":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46408":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:5541":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2846":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:3780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3159":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:14492":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:5176":{"crate_id":5,"path":["cc","Output"],"kind":"typedef"},"2:3308":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3290":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:48822":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:7458":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11808":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:4159":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:2782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:44077":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:46355":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:4660":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:10789":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:7471":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43059":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:50145":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:21507":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46526":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:1995":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:9341":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:9325":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:2358":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"2:12024":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3462":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6930":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:875":{"crate_id":1,"path":["cc","Owned"],"kind":"typedef"},"5:7429":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:10974":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10710":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:5725":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8524":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:6535":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:14324":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:43649":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:15252":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5568":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"2:2095":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11828":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43691":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:12070":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:15282":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:564":{"crate_id":1,"path":["std","thread"],"kind":"module"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:5986":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2786":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:15289":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:6002":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:46440":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:14667":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"1:15277":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:49278":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10385":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43861":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3673":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:7519":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:5170":{"crate_id":5,"path":["cc","Output"],"kind":"typedef"},"6:3850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2611":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46825":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:3787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:4304":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5533":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:46854":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5696":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45127":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3486":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"2:21298":{"crate_id":2,"path":["core","core_simd","swizzle","{{impl}}","interleave","Lo"],"kind":"struct"},"2:44097":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2668":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:4230":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:13392":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7610":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:4102":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:9409":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:660":{"crate_id":5,"path":["cc","Owned"],"kind":"typedef"},"1:15284":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12219":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:36055":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3156":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:47354":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46490":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:15285":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3379":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:151":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:14361":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"2:3094":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:4437":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"2:48854":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:5382":{"crate_id":5,"path":["cc","Output"],"kind":"typedef"},"6:82":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1937":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46983":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46422":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3128":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10317":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"0:284":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"2:10468":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:496":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"2:21663":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45286":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:3993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1595":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11665":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:15020":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:4746":{"crate_id":1,"path":["cc","Iter"],"kind":"typedef"},"1:943":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:2061":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9253":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:15273":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5463":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10313":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46228":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2932":{"crate_id":1,"path":["cc","Owned"],"kind":"typedef"},"1:4191":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:48077":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:1600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1482":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47363":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8883":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"6:501":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:4745":{"crate_id":2,"path":["cc","Target"],"kind":"typedef"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:11749":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:6532":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7606":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"2:12720":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1959":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3122":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5471":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"2:48878":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:155":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2974":{"crate_id":1,"path":["std","fs"],"kind":"module"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46946":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:7917":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:11710":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2177":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:15275":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5107":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:44086":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9407":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10593":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:50407":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1626":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"5:3376":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:9351":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:533":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2086":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11673":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:3842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:45827":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7239":{"crate_id":1,"path":["cc","Item"],"kind":"typedef"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10194":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:7468":{"crate_id":2,"path":["cc","Item"],"kind":"typedef"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"0:366":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"1:4418":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:50471":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"2:44068":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44744":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43271":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:1273":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46255":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:6184":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:48269":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7478":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:6101":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4071":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7310":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44632":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"5:5153":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:44683":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:3747":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:3162":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:13557":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:6833":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:12726":{"crate_id":2,"path":["cc","Output"],"kind":"typedef"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:4731":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1507":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:11916":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:13588":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:804":{"crate_id":5,"path":["cc","Target"],"kind":"typedef"},"2:46714":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:22994":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:527":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"2:47134":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4365":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10046":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1715":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:47983":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"0:80":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:10227":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":9}