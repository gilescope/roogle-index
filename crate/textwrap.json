{"root":"0:0","crate_version":"0.14.2","includes_private":false,"index":{"1:5530":{"id":"1:5530","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12381":{"id":"2:12381","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:293":{"id":"a:2:3045-0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3086":{"id":"2:3086","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088","2:3089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12372":{"id":"2:12372","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:45280","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:858":{"id":"1:858","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:859","1:860","1:861","1:862","1:863","1:864","1:865"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2612-0:336":{"id":"b:2:2612-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[79,9],"end":[79,14]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:264"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2907":{"id":"2:2907","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2909"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3215":{"id":"2:3215","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3216","2:3217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:336":{"id":"b:2:2948-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12009":{"id":"2:12009","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12011","2:12012","2:12013"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8351-0:311":{"id":"a:2:8351-0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["words",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:543":{"id":"5:543","crate_id":5,"name":"Owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,0],"end":[408,1]},"visibility":"crate","docs":"Constructors for boxed Options, specifically.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_separators::UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_splitters::HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:211"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0":{"id":"0:0","crate_id":0,"name":"textwrap","span":{"filename":"src/lib.rs","begin":[1,0],"end":[2135,1]},"visibility":"public","docs":"The textwrap library provides functions for word wrapping and\nindenting text.\n\n# Wrapping Text\n\nWrapping text can be very useful in command-line programs where\nyou want to format dynamic output nicely so it looks good in a\nterminal. A quick example:\n\n```no_run\nfn main() {\n    let text = \"textwrap: a small library for wrapping text.\";\n    println!(\"{}\", textwrap::fill(text, 18));\n}\n```\n\nWhen you run this program, it will display the following output:\n\n```text\ntextwrap: a small\nlibrary for\nwrapping text.\n```\n\nIf you enable the `hyphenation` Cargo feature, you can get\nautomatic hyphenation for a number of languages:\n\n```no_run\n# #[cfg(feature = \"hyphenation\")]\nuse hyphenation::{Language, Load, Standard};\nuse textwrap::{fill, Options};\n\n# #[cfg(feature = \"hyphenation\")]\nfn main() {\n    let text = \"textwrap: a small library for wrapping text.\";\n    let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\n    let options = Options::new(18).word_splitter(dictionary);\n    println!(\"{}\", fill(text, &options));\n}\n\n# #[cfg(not(feature = \"hyphenation\"))]\n# fn main() { }\n```\n\nThe program will now output:\n\n```text\ntextwrap: a small\nlibrary for wrap-\nping text.\n```\n\nSee also the [`unfill`] and [`refill`] functions which allow you to\nmanipulate already wrapped text.\n\n## Wrapping Strings at Compile Time\n\nIf your strings are known at compile time, please take a look at\nthe procedural macros from the [textwrap-macros] crate.\n\n## Displayed Width vs Byte Size\n\nTo word wrap text, one must know the width of each word so one can\nknow when to break lines. This library will by default measure the\nwidth of text using the _displayed width_, not the size in bytes.\nThe `unicode-width` Cargo feature controls this.\n\nThis is important for non-ASCII text. ASCII characters such as `a`\nand `!` are simple and take up one column each. This means that\nthe displayed width is equal to the string length in bytes.\nHowever, non-ASCII characters and symbols take up more than one\nbyte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is\n`0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.\n\nThis is why we take care to use the displayed width instead of the\nbyte count when computing line lengths. All functions in this\nlibrary handle Unicode characters like this when the\n`unicode-width` Cargo feature is enabled (it is enabled by\ndefault).\n\n# Indentation and Dedentation\n\nThe textwrap library also offers functions for adding a prefix to\nevery line of a string and to remove leading whitespace. As an\nexample, the [`indent`] function allows you to turn lines of text\ninto a bullet list:\n\n```\nlet before = \"\\\nfoo\nbar\nbaz\n\";\nlet after = \"\\\n* foo\n* bar\n* baz\n\";\nassert_eq!(textwrap::indent(before, \"* \"), after);\n```\n\nRemoving leading whitespace is done with [`dedent`]:\n\n```\nlet before = \"\n    Some\n      indented\n        text\n\";\nlet after = \"\nSome\n  indented\n    text\n\";\nassert_eq!(textwrap::dedent(before), after);\n```\n\n# Cargo Features\n\nThe textwrap library can be slimmed down as needed via a number of\nCargo features. This means you only pay for the features you\nactually use.\n\nThe full dependency graph, where dashed lines indicate optional\ndependencies, is shown below:\n\n<img src=\"https://raw.githubusercontent.com/mgeisler/textwrap/master/images/textwrap-0.14.2.svg\">\n\n## Default Features\n\nThese features are enabled by default:\n\n* `unicode-linebreak`: enables finding words using the\n  [unicode-linebreak] crate, which implements the line breaking\n  algorithm described in [Unicode Standard Annex\n  #14](https://www.unicode.org/reports/tr14/).\n\n  This feature can be disabled if you are happy to find words\n  separated by ASCII space characters only. People wrapping text\n  with emojis or East-Asian characters will want most likely want\n  to enable this feature. See the\n  [`word_separators::WordSeparator`] trait for details.\n\n* `unicode-width`: enables correct width computation of non-ASCII\n  characters via the [unicode-width] crate. Without this feature,\n  every [`char`] is 1 column wide, except for emojis which are 2\n  columns wide. See the [`core::display_width`] function for\n  details.\n\n  This feature can be disabled if you only need to wrap ASCII\n  text, or if the functions in [`core`] are used directly with\n  [`core::Fragment`]s for which the widths have been computed in\n  other ways.\n\n* `smawk`: enables linear-time wrapping of the whole paragraph via\n  the [smawk] crate. See the [`wrap_algorithms::wrap_optimal_fit`]\n  function for details on the optimal-fit algorithm.\n\n  This feature can be disabled if you only ever intend to use\n  [`wrap_algorithms::wrap_first_fit`].\n\n## Optional Features\n\nThese Cargo features enable new functionality:\n\n* `terminal_size`: enables automatic detection of the terminal\n  width via the [terminal_size] crate. See the\n  [`Options::with_termwidth`] constructor for details.\n\n* `hyphenation`: enables language-sensitive hyphenation via the\n  [hyphenation] crate. See the [`word_splitters::WordSplitter`] trait for details.\n\n[unicode-linebreak]: https://docs.rs/unicode-linebreak/\n[unicode-width]: https://docs.rs/unicode-width/\n[smawk]: https://docs.rs/smawk/\n[textwrap-macros]: https://docs.rs/textwrap-macros/\n[terminal_size]: https://docs.rs/terminal_size/\n[hyphenation]: https://docs.rs/hyphenation/","links":{"`indent`":"0:7","`core::Fragment`":"0:176","`wrap_algorithms::wrap_first_fit`":"0:165","`core`":"0:169","`word_splitters::WordSplitter`":"0:67","`char`":"1:15261","`core::display_width`":"0:175","`wrap_algorithms::wrap_optimal_fit`":"0:121","`refill`":"0:237","`dedent`":"0:8","`word_separators::WordSeparator`":"0:23","`unfill`":"0:236"},"attrs":["#![doc(html_root_url = \"https://docs.rs/textwrap/0.14.2\")]","#![forbid(unsafe_code)]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![allow(clippy :: redundant_field_names)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:16","0:56","0:91","0:169","0:8","0:7","0:336","0:230","0:236","0:237","0:243","0:250","0:256"]}},"2:2625":{"id":"2:2625","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2626","2:2627"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:545":{"id":"5:545","crate_id":5,"name":"clone_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:293":{"id":"b:2:3667-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12387":{"id":"2:12387","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15261","`None`":"2:43446","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2910":{"id":"2:2910","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2912"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2933-0:293":{"id":"b:2:2933-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:175":{"id":"0:175","crate_id":0,"name":"display_width","span":{"filename":"src/core.rs","begin":[176,0],"end":[186,1]},"visibility":"public","docs":"Compute the display width of `text` while skipping over ANSI\nescape sequences.\n\n# Examples\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Café Plain\"), 10);\nassert_eq!(display_width(\"\\u{1b}[31mCafé Rouge\\u{1b}[0m\"), 10);\n```\n\n**Note:** When the `unicode-width` Cargo feature is disabled, the\nwidth of a `char` is determined by a crude approximation which\nsimply counts chars below U+1100 as 1 column wide, and all other\ncharacters as 2 columns wide. With the feature enabled, function\nwill correctly deal with [combining characters] in their\ndecomposed form (see [Unicode equivalence]).\n\nAn example of a decomposed character is “é”, which can be\ndecomposed into: “e” followed by a combining acute accent: “◌́”.\nWithout the `unicode-width` Cargo feature, every `char` below\nU+1100 has a width of 1. This includes the combining accent:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Cafe Plain\"), 10);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 10);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 11);\n```\n\n## Emojis and CJK Characters\n\nCharacters such as emojis and [CJK characters] used in the\nChinese, Japanese, and Korean langauges are seen as double-width,\neven if the `unicode-width` feature is disabled:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"😂😭🥺🤣✨😍🙏🥰😊🔥\"), 20);\nassert_eq!(display_width(\"你好\"), 4);  // “Nǐ hǎo” or “Hello” in Chinese\n```\n\n# Limitations\n\nThe displayed width of a string cannot always be computed from the\nstring alone. This is because the width depends on the rendering\nengine used. This is particularly visible with [emoji modifier\nsequences] where a base emoji is modified with, e.g., skin tone or\nhair color modifiers. It is up to the rendering engine to detect\nthis and to produce a suitable emoji.\n\nA simple example is “❤️”, which consists of “❤” (U+2764: Black\nHeart Symbol) followed by U+FE0F (Variation Selector-16). By\nitself, “❤” is a black heart, but if you follow it with the\nvariant selector, you may get a wider red heart.\n\nA more complex example would be “👨‍🦰” which should depict a man\nwith red hair. Here the computed width is too large — and the\nwidth differs depending on the use of the `unicode-width` feature:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(\"👨‍🦰\".chars().collect::<Vec<char>>(), ['\\u{1f468}', '\\u{200d}', '\\u{1f9b0}']);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"👨‍🦰\"), 4);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"👨‍🦰\"), 6);\n```\n\nThis happens because the grapheme consists of three code points:\n“👨” (U+1F468: Man), Zero Width Joiner (U+200D), and “🦰”\n(U+1F9B0: Red Hair). You can see them above in the test. With\n`unicode-width` enabled, the ZWJ is correctly seen as having zero\nwidth, without it is counted as a double-width character.\n\n## Terminal Support\n\nModern browsers typically do a great job at combining characters\nas shown above, but terminals often struggle more. As an example,\nGnome Terminal version 3.38.1, shows “❤️” as a big red heart, but\nshows \"👨‍🦰\" as “👨🦰”.\n\n[combining characters]: https://en.wikipedia.org/wiki/Combining_character\n[Unicode equivalence]: https://en.wikipedia.org/wiki/Unicode_equivalence\n[CJK characters]: https://en.wikipedia.org/wiki/CJK_characters\n[emoji modifier sequences]: https://unicode.org/emoji/charts/full-emoji-modifiers.html","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"2:12352":{"id":"2:12352","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:208":{"id":"0:208","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[290,4],"end":[292,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:289":{"id":"0:289","crate_id":0,"name":"clone","span":{"filename":"src/word_splitters.rs","begin":[114,9],"end":[114,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:302":{"id":"a:2:8351-0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2609-0:302":{"id":"b:2:2609-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3004":{"id":"2:3004","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:343":{"id":"0:343","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,34]},"visibility":"public","docs":"Indentation used for subsequent lines of output. See the\n[`Options::subsequent_indent`] method.","links":{"`Options::subsequent_indent`":"0:336"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"2:3012":{"id":"2:3012","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[80,0],"end":[85,1]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:162"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7449":{"id":"2:7449","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7451"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:330":{"id":"0:330","crate_id":0,"name":"ne","span":{"filename":"src/core.rs","begin":[215,29],"end":[215,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[65,0],"end":[70,1]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:155"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3110":{"id":"2:3110","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12460":{"id":"2:12460","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11984","prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:308":{"id":"0:308","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms.rs","begin":[77,22],"end":[77,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12375":{"id":"2:12375","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:45548","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[229,9],"end":[229,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:336":{"id":"b:2:2609-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5404":{"id":"5:5404","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6605":{"id":"1:6605","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8351-0:286":{"id":"a:2:8351-0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12391":{"id":"2:12391","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15261","`None`":"2:43446","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3456":{"id":"2:3456","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:305":{"id":"0:305","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:302":{"id":"b:2:2937-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3300":{"id":"2:3300","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3302","2:3303"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:3014":{"id":"2:3014","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2933-0:270":{"id":"b:2:2933-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3127":{"id":"2:3127","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3129","2:3130"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:179":{"id":"0:179","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[208,4],"end":[208,37]},"visibility":"default","docs":"Displayed width of the penalty that must be inserted if the\nword falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:176":{"id":"0:176","crate_id":0,"name":"Fragment","span":{"filename":"src/core.rs","begin":[198,0],"end":[209,1]},"visibility":"public","docs":"A (text) fragment denotes the unit which we wrap into lines.\n\nFragments represent an abstract _word_ plus the _whitespace_\nfollowing the word. In case the word falls at the end of the line,\nthe whitespace is dropped and a so-called _penalty_ is inserted\ninstead (typically `\"-\"` if the word was hyphenated).\n\nFor wrapping purposes, the precise content of the word, the\nwhitespace, and the penalty is irrelevant. All we need to know is\nthe displayed width of each part, which this trait provides.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:177","0:178","0:179"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:191"]}},"2:11921":{"id":"2:11921","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11922","2:11923"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:37":{"id":"0:37","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[72,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["line",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[{"outlives":"'a"}]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2614":{"id":"2:2614","crate_id":2,"name":"borrow_mut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2904":{"id":"2:2904","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2906"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"1:5394":{"id":"1:5394","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5395","1:5396"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12014":{"id":"2:12014","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:11442":{"id":"2:11442","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11443","2:11444"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12362":{"id":"2:12362","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:311":{"id":"a:2:3004-0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3045-0:311":{"id":"a:2:3045-0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,0],"end":[280,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["0:205"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6299":{"id":"1:6299","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6300","1:6301"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8351-0:336":{"id":"a:2:8351-0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[131,9],"end":[131,14]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:273"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12378":{"id":"2:12378","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11984","prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[55,4],"end":[55,53]},"visibility":"default","docs":"Return all possible indices where `word` can be split.\n\nThe indices returned must be in range `0..word.len()`. They\nshould point to the index _after_ the split point, i.e., after\n`-` if splitting on hyphens. This way, `word.split_at(idx)`\nwill break the word into two well-formed pieces.\n\n# Examples\n\n```\nuse textwrap::word_splitters::{HyphenSplitter, NoHyphenation, WordSplitter};\nassert_eq!(NoHyphenation.split_points(\"cannot-be-split\"), vec![]);\nassert_eq!(HyphenSplitter.split_points(\"can-be-split\"), vec![4, 7]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["word",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"2:12465":{"id":"2:12465","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:194":{"id":"0:194","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[321,4],"end":[323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[131,16],"end":[131,20]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3282":{"id":"2:3282","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284","2:3285","2:3286"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5421":{"id":"5:5421","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12360":{"id":"2:12360","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:43446"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12442":{"id":"2:12442","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[196,0],"end":[260,1]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":"Split `line` into words using Unicode break properties.\n\nThis word separator uses the Unicode line breaking algorithm\ndescribed in [Unicode Standard Annex\n#14](https://www.unicode.org/reports/tr14/) to find legal places\nto break lines. There is a small difference in that the U+002D\n(Hyphen-Minus) and U+00AD (Soft Hyphen) don’t create a line break:\nto allow a line break at a hyphen, use the\n[`HyphenSplitter`](crate::word_splitters::HyphenSplitter). Soft\nhyphens are not currently supported.\n\n# Examples\n\nUnlike [`AsciiSpace`], the Unicode line breaking algorithm will\nfind line break opportunities between some characters with no\nintervening whitespace:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::word_separators::{WordSeparator, UnicodeBreakProperties};\nuse textwrap::core::Word;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\"),\n                Word::from(\"😍\")]);\n\nassert_eq!(UnicodeBreakProperties.find_words(\"CJK: 你好\").collect::<Vec<_>>(),\n           vec![Word::from(\"CJK: \"),\n                Word::from(\"你\"),\n                Word::from(\"好\")]);\n}\n```\n\nA U+2060 (Word Joiner) character can be inserted if you want to\nmanually override the defaults and keep the characters together:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::word_separators::{UnicodeBreakProperties, WordSeparator};\nuse textwrap::core::Word;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂\\u{2060}😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\\u{2060}😍\")]);\n}\n```\n\nThe Unicode line breaking algorithm will also automatically\nsuppress break breaks around certain punctuation characters::\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::word_separators::{UnicodeBreakProperties, WordSeparator};\nuse textwrap::core::Word;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"[ foo ] bar !\").collect::<Vec<_>>(),\n           vec![Word::from(\"[ foo ] \"),\n                Word::from(\"bar !\")]);\n}\n```","links":{"crate::word_splitters::HyphenSplitter":"0:286","`AsciiSpace`":"0:261"},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:47"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:279":{"id":"b:2:2612-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3106":{"id":"2:3106","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3108"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[79,16],"end":[79,20]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:181":{"id":"0:181","crate_id":0,"name":"Target","span":{"filename":"src/core.rs","begin":[228,4],"end":[228,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"primitive","inner":"str"},"generics":{"params":[],"where_predicates":[]}}},"0:230":{"id":"0:230","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[726,0],"end":[745,1]},"visibility":"public","docs":"Fill a line of text at a given width.\n\nThe result is a [`String`], complete with newlines between each\nline. Use the [`wrap`] function if you need access to the\nindividual lines.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::fill;\n\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", 15),\n    \"Memory safety\\nwithout garbage\\ncollection.\"\n);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{fill, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", &options),\n    \"- Memory safety\\n  without\\n  garbage\\n  collection.\"\n);\n```","links":{"`wrap`":"0:243","`Options`":"0:336","`String`":"5:7602"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["width_or_options",{"kind":"generic","inner":"Opt"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_separators::WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_splitters::WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"Opt"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"b:2:2937-0:336":{"id":"b:2:2937-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8351":{"id":"2:8351","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:279":{"id":"a:2:3016-0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:292":{"id":"0:292","crate_id":0,"name":"fmt","span":{"filename":"src/word_splitters.rs","begin":[114,22],"end":[114,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3118":{"id":"2:3118","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3120"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[77,9],"end":[77,14]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:305"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3166":{"id":"2:3166","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:319":{"id":"0:319","crate_id":0,"name":"fmt","span":{"filename":"src/core.rs","begin":[215,9],"end":[215,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3239":{"id":"2:3239","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3132":{"id":"2:3132","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134","2:3135"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:169":{"id":"0:169","crate_id":0,"name":"core","span":{"filename":"src/core.rs","begin":[1,0],"end":[434,1]},"visibility":"public","docs":"Building blocks for advanced wrapping functionality.\n\nThe functions and structs in this module can be used to implement\nadvanced wrapping functionality when the [`wrap`](super::wrap) and\n[`fill`](super::fill) function don't do what you want.\n\nIn general, you want to follow these steps when wrapping\nsomething:\n\n1. Split your input into [`Fragment`]s. These are abstract blocks\n   of text or content which can be wrapped into lines. See\n   [`WordSeparator`](crate::word_separators::WordSeparator) for\n   how to do this for text.\n\n2. Potentially split your fragments into smaller pieces. This\n   allows you to implement things like hyphenation. If you are\n   wrapping text represented as a sequence of [`Word`]s, then you\n   can use [`split_words`](crate::word_splitters::split_words) can\n   help you do this.\n\n3. Potentially break apart fragments that are still too large to\n   fit on a single line. This is implemented in [`break_words`].\n\n4. Finally take your fragments and put them into lines. There are\n   two algorithms for this in the\n   [`wrap_algorithms`](crate::wrap_algorithms) module:\n   [`wrap_optimal_fit`](crate::wrap_algorithms::wrap_optimal_fit)\n   and [`wrap_first_fit`](crate::wrap_algorithms::wrap_first_fit).\n   The former produces better line breaks, the latter is faster.\n\n5. Iterate through the slices returned by the wrapping functions\n   and construct your lines of output.\n\nPlease [open an issue](https://github.com/mgeisler/textwrap/) if\nthe functionality here is not sufficient or if you have ideas for\nimproving it. We would love to hear from you!","links":{"crate::wrap_algorithms":"0:91","super::wrap":"0:243","crate::wrap_algorithms::wrap_optimal_fit":"0:121","`Word`":"0:311","super::fill":"0:230","crate::word_splitters::split_words":"0:84","crate::word_separators::WordSeparator":"0:23","`Fragment`":"0:176","`break_words`":"0:195","crate::wrap_algorithms::wrap_first_fit":"0:165"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:175","0:176","0:311","0:195"]}},"b:2:2609-0:279":{"id":"b:2:2609-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:314":{"id":"0:314","crate_id":0,"name":"whitespace","span":{"filename":"src/core.rs","begin":[220,4],"end":[220,27]},"visibility":"public","docs":"Whitespace to insert if the word does not fall at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,40],"end":[215,42]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:286":{"id":"b:2:2612-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[77,22],"end":[77,27]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:308"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:192":{"id":"0:192","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:47":{"id":"0:47","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[197,4],"end":[259,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["line",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[{"outlives":"'a"}]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:313":{"id":"0:313","crate_id":0,"name":"word","span":{"filename":"src/core.rs","begin":[218,4],"end":[218,21]},"visibility":"public","docs":"Word content.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"a:2:3045-0:336":{"id":"a:2:3045-0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12451":{"id":"2:12451","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:185":{"id":"0:185","crate_id":0,"name":"from","span":{"filename":"src/core.rs","begin":[240,4],"end":[248,5]},"visibility":"public","docs":"Construct a `Word` from a string.\n\nA trailing stretch of `' '` is automatically taken to be the\nwhitespace part of the word.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["word",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"22:47":{"id":"22:47","crate_id":22,"name":"UnicodeWidthChar","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:48","22:49"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4713":{"id":"1:4713","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714","1:4715"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2937-0:293":{"id":"b:2:2937-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3667-0:286":{"id":"b:2:3667-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:182":{"id":"0:182","crate_id":0,"name":"deref","span":{"filename":"src/core.rs","begin":[230,4],"end":[232,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3215","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:286":{"id":"a:2:8352-0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:342":{"id":"0:342","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[240,4],"end":[240,31]},"visibility":"public","docs":"Indentation used for the first line of output. See the\n[`Options::initial_indent`] method.","links":{"`Options::initial_indent`":"0:336"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"2:2839":{"id":"2:2839","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,9],"end":[14,14]},"visibility":{"restricted":{"parent":"0:92","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:296"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:178":{"id":"0:178","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[204,4],"end":[204,40]},"visibility":"default","docs":"Displayed width of the whitespace that must follow the word\nwhen the word is not at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[77,29],"end":[77,36]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6532":{"id":"1:6532","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[98,9],"end":[98,14]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:282"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:278":{"id":"0:278","crate_id":0,"name":"default","span":{"filename":"src/word_separators.rs","begin":[131,29],"end":[131,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:270":{"id":"a:2:3045-0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9597":{"id":"2:9597","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9598","2:9599","2:9600","2:9601","2:9602","2:9603","2:9604","2:9605","2:9606","2:9607","2:9608","2:9609","2:9610","2:9611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:155":{"id":"0:155","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[66,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["words",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2702":{"id":"2:2702","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2704","2:2705","2:2706","2:2707","2:2708"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9396":{"id":"2:9396","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:302":{"id":"b:2:3667-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3245":{"id":"2:3245","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3248","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:7462":{"id":"2:7462","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7464","2:7466","2:7467"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3493":{"id":"2:3493","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6601":{"id":"1:6601","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6602"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6688":{"id":"1:6688","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12431":{"id":"2:12431","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984","`DoubleEndedIterator`":"2:7497","str::match_indices":"1:15266"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:45462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3045":{"id":"2:3045","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7412":{"id":"2:7412","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7414"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2606":{"id":"2:2606","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2608"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:5:541-0:302":{"id":"b:5:541-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2947":{"id":"2:2947","crate_id":2,"name":"try_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43572","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:243":{"id":"0:243","crate_id":0,"name":"wrap","span":{"filename":"src/lib.rs","begin":[1082,0],"end":[1171,1]},"visibility":"public","docs":"Wrap a line of text at a given width.\n\nThe result is a vector of lines, each line is of type [`Cow<'_,\nstr>`](Cow), which means that the line will borrow from the input\n`&str` if possible. The lines do not have trailing whitespace,\nincluding a final `'\\n'`. Please use the [`fill`] function if you\nneed a [`String`] instead.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::wrap;\n\nlet lines = wrap(\"Memory safety without garbage collection.\", 15);\nassert_eq!(lines, &[\n    \"Memory safety\",\n    \"without garbage\",\n    \"collection.\",\n]);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nlet lines = wrap(\"Memory safety without garbage collection.\", &options);\nassert_eq!(lines, &[\n    \"- Memory safety\",\n    \"  without\",\n    \"  garbage\",\n    \"  collection.\",\n]);\n```\n\n# Optimal-Fit Wrapping\n\nBy default, `wrap` will try to ensure an even right margin by\nfinding breaks which avoid short lines. We call this an\n“optimal-fit algorithm” since the line breaks are computed by\nconsidering all possible line breaks. The alternative is a\n“first-fit algorithm” which simply accumulates words until they no\nlonger fit on the line.\n\nAs an example, using the first-fit algorithm to wrap the famous\nHamlet quote “To be, or not to be: that is the question” in a\nnarrow column with room for only 10 characters looks like this:\n\n```\n# use textwrap::{wrap_algorithms::FirstFit, Options, wrap};\n#\n# let lines = wrap(\"To be, or not to be: that is the question\",\n#                  Options::new(10).wrap_algorithm(FirstFit));\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be, or\nnot to be:\nthat is\nthe\nquestion\n# \");\n```\n\nNotice how the second to last line is quite narrow because\n“question” was too large to fit? The greedy first-fit algorithm\ndoesn’t look ahead, so it has no other option than to put\n“question” onto its own line.\n\nWith the optimal-fit wrapping algorithm, the previous lines are\nshortened slightly in order to make the word “is” go into the\nsecond last line:\n\n```\n# #[cfg(feature = \"smawk\")] {\n# use textwrap::{Options, wrap};\n# use textwrap::wrap_algorithms::OptimalFit;\n#\n# let lines = wrap(\"To be, or not to be: that is the question\",\n#                  Options::new(10).wrap_algorithm(OptimalFit));\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be,\nor not to\nbe: that\nis the\nquestion\n# \"); }\n```\n\nPlease see the [`wrap_algorithms::WrapAlgorithm`] trait for details.\n\n# Examples\n\nThe returned iterator yields lines of type `Cow<'_, str>`. If\npossible, the wrapped lines will borrow from the input string. As\nan example, a hanging indentation, the first line can borrow from\nthe input, but the subsequent lines become owned strings:\n\n```\nuse std::borrow::Cow::{Borrowed, Owned};\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15).subsequent_indent(\"....\");\nlet lines = wrap(\"Wrapping text all day long.\", &options);\nlet annotated = lines\n    .iter()\n    .map(|line| match line {\n        Borrowed(text) => format!(\"[Borrowed] {}\", text),\n        Owned(text) => format!(\"[Owned]    {}\", text),\n    })\n    .collect::<Vec<_>>();\nassert_eq!(\n    annotated,\n    &[\n        \"[Borrowed] Wrapping text\",\n        \"[Owned]    ....all day\",\n        \"[Owned]    ....long.\",\n    ]\n);\n```\n\n## Leading and Trailing Whitespace\n\nAs a rule, leading whitespace (indentation) is preserved and\ntrailing whitespace is discarded.\n\nIn more details, when wrapping words into lines, words are found\nby splitting the input text on space characters. One or more\nspaces (shown here as “␣”) are attached to the end of each word:\n\n```text\n\"Foo␣␣␣bar␣baz\" -> [\"Foo␣␣␣\", \"bar␣\", \"baz\"]\n```\n\nThese words are then put into lines. The interword whitespace is\npreserved, unless the lines are wrapped so that the `\"Foo␣␣␣\"`\nword falls at the end of a line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"Foo   bar baz\", 10), vec![\"Foo   bar\", \"baz\"]);\nassert_eq!(wrap(\"Foo   bar baz\", 8), vec![\"Foo\", \"bar baz\"]);\n```\n\nNotice how the trailing whitespace is removed in both case: in the\nfirst example, `\"bar␣\"` becomes `\"bar\"` and in the second case\n`\"Foo␣␣␣\"` becomes `\"Foo\"`.\n\nLeading whitespace is preserved when the following word fits on\nthe first line. To understand this, consider how words are found\nin a text with leading spaces:\n\n```text\n\"␣␣foo␣bar\" -> [\"␣␣\", \"foo␣\", \"bar\"]\n```\n\nWhen put into lines, the indentation is preserved if `\"foo\"` fits\non the first line, otherwise you end up with an empty line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"  foo bar\", 8), vec![\"  foo\", \"bar\"]);\nassert_eq!(wrap(\"  foo bar\", 4), vec![\"\", \"foo\", \"bar\"]);\n```","links":{"`String`":"5:7602","`wrap_algorithms::WrapAlgorithm`":"0:140","Cow":"5:546","`Options`":"0:336","`fill`":"0:230"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["width_or_options",{"kind":"generic","inner":"Opt"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_separators::WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_splitters::WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"Opt"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"0:345":{"id":"0:345","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[250,4],"end":[250,32]},"visibility":"public","docs":"Wrapping algorithm to use, see the implementations of the\n[`wrap_algorithms::WrapAlgorithm`] trait for details.","links":{"`wrap_algorithms::WrapAlgorithm`":"0:140"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"WrapAlgo"}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[131,29],"end":[131,36]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:278"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:250":{"id":"0:250","crate_id":0,"name":"wrap_columns","span":{"filename":"src/lib.rs","begin":[1230,0],"end":[1284,1]},"visibility":"public","docs":"Wrap text into columns with a given total width.\n\nThe `left_gap`, `middle_gap` and `right_gap` arguments specify the\nstrings to insert before, between, and after the columns. The\ntotal width of all columns and all gaps is specified using the\n`total_width_or_options` argument. This argument can simply be an\ninteger if you want to use default settings when wrapping, or it\ncan be a [`Options`] value if you want to customize the wrapping.\n\nIf the columns are narrow, it is recommended to set\n[`Options::break_words`] to `true` to prevent words from\nprotruding into the margins.\n\nThe per-column width is computed like this:\n\n```\n# let (left_gap, middle_gap, right_gap) = (\"\", \"\", \"\");\n# let columns = 2;\n# let options = textwrap::Options::new(80);\nlet inner_width = options.width\n    - textwrap::core::display_width(left_gap)\n    - textwrap::core::display_width(right_gap)\n    - textwrap::core::display_width(middle_gap) * (columns - 1);\nlet column_width = inner_width / columns;\n```\n\nThe `text` is wrapped using [`wrap`] and the given `options`\nargument, but the width is overwritten to the computed\n`column_width`.\n\n# Panics\n\nPanics if `columns` is zero.\n\n# Examples\n\n```\nuse textwrap::wrap_columns;\n\nlet text = \"\\\nThis is an example text, which is wrapped into three columns. \\\nNotice how the final column can be shorter than the others.\";\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is       | into three    | column can be  |\",\n                \"| an example    | columns.      | shorter than   |\",\n                \"| text, which   | Notice how    | the others.    |\",\n                \"| is wrapped    | the final     |                |\"]);\n\n// Without the `smawk` feature, the middle column is a little more uneven:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is an    | three         | column can be  |\",\n                \"| example text, | columns.      | shorter than   |\",\n                \"| which is      | Notice how    | the others.    |\",\n                \"| wrapped into  | the final     |                |\"]);","links":{"`Options`":"0:336","`wrap`":"0:243","`Options::break_words`":"0:336"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["columns",{"kind":"primitive","inner":"usize"}],["total_width_or_options",{"kind":"generic","inner":"Opt"}],["left_gap",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["middle_gap",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["right_gap",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_separators::WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_splitters::WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"Opt"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"a:2:3004-0:286":{"id":"a:2:3004-0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:273":{"id":"0:273","crate_id":0,"name":"clone","span":{"filename":"src/word_separators.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,40],"end":[215,42]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3004-0:270":{"id":"a:2:3004-0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12371":{"id":"2:12371","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:45270","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7416":{"id":"2:7416","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7418"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,22],"end":[14,27]},"visibility":{"restricted":{"parent":"0:92","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:299"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8352-0:270":{"id":"a:2:8352-0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:186":{"id":"0:186","crate_id":0,"name":"break_apart","span":{"filename":"src/core.rs","begin":[263,4],"end":[302,5]},"visibility":"public","docs":"Break this word into smaller words with a width of at most\n`line_width`. The whitespace and penalty from this `Word` is\nadded to the last piece.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nassert_eq!(\n    Word::from(\"Hello!  \").break_apart(3).collect::<Vec<_>>(),\n    vec![Word::from(\"Hel\"), Word::from(\"lo!  \")]\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["line_width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'b"}]},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:311":{"id":"b:2:2609-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9956":{"id":"2:9956","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:9958","2:9959","2:9960","2:9961","2:9962","2:9963","2:9964"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:9947","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12448":{"id":"2:12448","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11984","prim@char":"1:15261"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12467":{"id":"2:12467","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3154":{"id":"2:3154","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2655":{"id":"2:2655","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2657","2:2658"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,16],"end":[14,20]},"visibility":{"restricted":{"parent":"0:92","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3114":{"id":"2:3114","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3116"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:301":{"id":"0:301","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,29],"end":[14,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:311":{"id":"a:2:3016-0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12351":{"id":"2:12351","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:3009":{"id":"2:3009","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6201":{"id":"1:6201","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6202","1:6203","1:6204","1:6205","1:6206","1:6207"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3092":{"id":"2:3092","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094","2:3095"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3248":{"id":"2:3248","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3250","2:3251"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8352-0:311":{"id":"a:2:8352-0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2937-0:311":{"id":"b:2:2937-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,9],"end":[229,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["0:353"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12468":{"id":"2:12468","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9394":{"id":"2:9394","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4406":{"id":"1:4406","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4407","1:4408","1:4410","1:4411","1:4412","1:4413","1:4414","1:4423"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:296":{"id":"0:296","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,9],"end":[14,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4346":{"id":"1:4346","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4347","1:4348","1:4350","1:4351","1:4352","1:4353","1:4354","1:4355","1:4356","1:4357","1:4359"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:324":{"id":"0:324","crate_id":0,"name":"clone","span":{"filename":"src/core.rs","begin":[215,22],"end":[215,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12413":{"id":"2:12413","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11984","prim@char":"1:15261","str::splitn":"1:15266"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:45416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:11994":{"id":"2:11994","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11996","2:11997","2:11998","2:11999","2:12000","2:12001","2:12002"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:270":{"id":"b:2:3667-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8351-0:279":{"id":"a:2:8351-0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12398":{"id":"2:12398","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3071":{"id":"2:3071","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3073","2:3074"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9398":{"id":"2:9398","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3016":{"id":"2:3016","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9332":{"id":"2:9332","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9333","2:9334","2:9336"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3669":{"id":"2:3669","crate_id":2,"name":"type_id","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:42143","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2952":{"id":"2:2952","crate_id":2,"name":"try_from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43572","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3444":{"id":"2:3444","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3445","2:3446","2:3447","2:3448"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3449","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2943-0:302":{"id":"b:2:2943-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8352-0:302":{"id":"a:2:8352-0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2937-0:286":{"id":"b:2:2937-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12356":{"id":"2:12356","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15275","str::as_mut_ptr":"1:15266"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"b:2:2612-0:270":{"id":"b:2:2612-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2948-0:293":{"id":"b:2:2948-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5156":{"id":"5:5156","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5158","5:5159"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[114,16],"end":[114,20]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[131,22],"end":[131,27]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:276"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:336":{"id":"b:2:2933-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12425":{"id":"2:12425","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15261","`DoubleEndedIterator`":"2:7497","self::pattern":"2:11984","str::matches":"1:15266"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:45516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12373":{"id":"2:12373","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15266"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:45568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:336":{"id":"b:2:3667-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:310":{"id":"0:310","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms.rs","begin":[77,29],"end":[77,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8352-0:261":{"id":"a:2:8352-0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9402":{"id":"2:9402","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9403"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2937-0:261":{"id":"b:2:2937-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12366":{"id":"2:12366","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15266","crate::ops::Index":"2:3300","str::slice_mut_unchecked":"1:15266"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:12419":{"id":"2:12419","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7453":{"id":"2:7453","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7454","2:7455","2:7456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:91":{"id":"0:91","crate_id":0,"name":"wrap_algorithms","span":{"filename":"src/wrap_algorithms.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"Word wrapping algorithms.\n\nAfter a text has been broken into words (or [`Fragment`]s), one\nnow has to decide how to break the fragments into lines. The\nsimplest algorithm for this is implemented by [`wrap_first_fit`]:\nit uses no look-ahead and simply adds fragments to the line as\nlong as they fit. However, this can lead to poor line breaks if a\nlarge fragment almost-but-not-quite fits on a line. When that\nhappens, the fragment is moved to the next line and it will leave\nbehind a large gap. A more advanced algorithm, implemented by\n[`wrap_optimal_fit`], will take this into account. The optimal-fit\nalgorithm considers all possible line breaks and will attempt to\nminimize the gaps left behind by overly short lines.\n\nWhile both algorithms run in linear time, the first-fit algorithm\nis about 4 times faster than the optimal-fit algorithm.","links":{"`wrap_first_fit`":"0:165","`Fragment`":"0:176","`wrap_optimal_fit`":"0:121"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:121","0:293","0:140","0:302","0:165"]}},"0:77":{"id":"0:77","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["word",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[227,0],"end":[233,1]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:181","0:182"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12445":{"id":"2:12445","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:261":{"id":"b:2:2609-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:226":{"id":"0:226","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[615,4],"end":[628,5]},"visibility":"public","docs":"Change [`self.wrap_algorithm`].\n\nSee the [`wrap_algorithms::WrapAlgorithm`] trait for details on\nthe choices.\n\n[`self.wrap_algorithm`]: #structfield.wrap_algorithm","links":{"`wrap_algorithms::WrapAlgorithm`":"0:140"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["wrap_algorithm",{"kind":"generic","inner":"NewWrapAlgo"}]],"output":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"NewWrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"NewWrapAlgo","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2901":{"id":"2:2901","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2903"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:3148":{"id":"2:3148","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150","2:3151"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:286":{"id":"b:2:2948-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12358":{"id":"2:12358","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:43446"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:8":{"id":"0:8","crate_id":0,"name":"dedent","span":{"filename":"src/indentation.rs","begin":[95,0],"end":[150,1]},"visibility":"public","docs":"Removes common leading whitespace from each line.\n\nThis function will look at each non-empty line and determine the\nmaximum amount of whitespace that can be removed from all lines:\n\n```\nuse textwrap::dedent;\n\nassert_eq!(dedent(\"\n    1st line\n      2nd line\n    3rd line\n\"), \"\n1st line\n  2nd line\n3rd line\n\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"2:3371":{"id":"2:3371","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373","2:3374","2:3375"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:279":{"id":"0:279","crate_id":0,"name":"NoHyphenation","span":{"filename":"src/word_splitters.rs","begin":[99,0],"end":[99,25]},"visibility":"public","docs":"Use this as a [`Options.word_splitter`] to avoid any kind of\nhyphenation:\n\n```\nuse textwrap::{wrap, Options};\nuse textwrap::word_splitters::NoHyphenation;\n\nlet options = Options::new(8).word_splitter(NoHyphenation);\nassert_eq!(wrap(\"foo bar-baz\", &options),\n           vec![\"foo\", \"bar-baz\"]);\n```\n\n[`Options.word_splitter`]: super::Options::word_splitter","links":{"super::Options::word_splitter":"0:336"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:279","a:2:3016-0:279","a:2:3045-0:279","a:2:8351-0:279","a:2:8352-0:279","b:2:2937-0:279","b:2:2933-0:279","b:5:541-0:279","b:2:2948-0:279","b:2:2943-0:279","b:2:2609-0:279","b:2:2612-0:279","b:2:3667-0:279","0:78","0:281","0:283","0:284"]}},"1:5468":{"id":"1:5468","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5469","1:5470","1:5471"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12710":{"id":"2:12710","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12711","2:12712","2:12713"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,29],"end":[215,38]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:329","0:330"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:302":{"id":"b:2:2933-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:299":{"id":"0:299","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,22],"end":[14,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9390":{"id":"2:9390","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,9],"end":[215,14]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:319"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[305,0],"end":[324,1]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Fragment","id":"0:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:192","0:193","0:194"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3016-0:270":{"id":"a:2:3016-0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8352-0:279":{"id":"a:2:8352-0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2948-0:279":{"id":"b:2:2948-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3013":{"id":"2:3013","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:347":{"id":"0:347","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[259,4],"end":[259,32]},"visibility":"public","docs":"The method for splitting words. This can be used to prohibit\nsplitting words on hyphens, or it can be used to implement\nlanguage-aware machine hyphenation. Please see the\n[`word_splitters::WordSplitter`] trait for details.","links":{"`word_splitters::WordSplitter`":"0:67"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"WordSplit"}},"2:3158":{"id":"2:3158","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3160"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3004-0:261":{"id":"a:2:3004-0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3045-0:302":{"id":"a:2:3045-0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:541-0:279":{"id":"b:5:541-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5422":{"id":"5:5422","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15266"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,22],"end":[215,27]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:324"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,16],"end":[215,20]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:279":{"id":"b:2:2933-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6529":{"id":"1:6529","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6530","1:6531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:3016-0:293":{"id":"a:2:3016-0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2611":{"id":"2:2611","crate_id":2,"name":"borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5419":{"id":"5:5419","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[94,0],"end":[127,1]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":"Split `line` into words separated by regions of `' '` characters.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::word_separators::{AsciiSpace, WordSeparator};\n\nlet words = AsciiSpace.find_words(\"Hello   World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello   \"),\n                       Word::from(\"World!\")]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:43"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:261":{"id":"b:2:2612-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:36":{"id":"0:36","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[71,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:37"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12440":{"id":"2:12440","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3076":{"id":"2:3076","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078","2:3079"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2937-0:270":{"id":"b:2:2937-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8352-0:293":{"id":"a:2:8352-0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2943-0:270":{"id":"b:2:2943-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:81":{"id":"0:81","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[125,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["word",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12416":{"id":"2:12416","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43446","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5401":{"id":"5:5401","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[215,29],"end":[215,38]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:67":{"id":"0:67","crate_id":0,"name":"WordSplitter","span":{"filename":"src/word_splitters.rs","begin":[40,0],"end":[56,1]},"visibility":"public","docs":"The `WordSplitter` trait describes where words can be split.\n\nIf the textwrap crate has been compiled with the `hyphenation`\nCargo feature enabled, you will find an implementation of\n`WordSplitter` by the `hyphenation::Standard` struct. Use this\nstruct for language-aware hyphenation:\n\n```\n#[cfg(feature = \"hyphenation\")]\n{\n    use hyphenation::{Language, Load, Standard};\n    use textwrap::{wrap, Options};\n\n    let text = \"Oxidation is the loss of electrons.\";\n    let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\n    let options = Options::new(8).word_splitter(dictionary);\n    assert_eq!(wrap(text, &options), vec![\"Oxida-\",\n                                          \"tion is\",\n                                          \"the loss\",\n                                          \"of elec-\",\n                                          \"trons.\"]);\n}\n```\n\nPlease see the documentation for the [hyphenation] crate for more\ndetails.\n\n[hyphenation]: https://docs.rs/hyphenation/","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:68"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WordSplitterClone","id":"0:69","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:76","0:78","0:80"]}},"2:12422":{"id":"2:12422","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15266","prim@char":"1:15261","`DoubleEndedIterator`":"2:7497","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:45498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:293":{"id":"b:2:2943-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2612-0:293":{"id":"b:2:2612-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12355":{"id":"2:12355","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:7497":{"id":"2:7497","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7498","2:7499","2:7500","2:7501","2:7505","2:7508"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"5:5152":{"id":"5:5152","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5154","5:5155"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"5:5423":{"id":"5:5423","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15266"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:270":{"id":"a:2:8351-0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8352":{"id":"2:8352","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:269":{"id":"0:269","crate_id":0,"name":"default","span":{"filename":"src/word_separators.rs","begin":[79,29],"end":[79,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:341":{"id":"0:341","crate_id":0,"name":"width","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,20]},"visibility":"public","docs":"The width in columns at which the text will be wrapped.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:276":{"id":"0:276","crate_id":0,"name":"fmt","span":{"filename":"src/word_separators.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:344":{"id":"0:344","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[247,4],"end":[247,25]},"visibility":"public","docs":"Allow long words to be broken if they cannot fit on a line.\nWhen set to `false`, some lines may be longer than\n`self.width`. See the [`Options::break_words`] method.","links":{"`Options::break_words`":"0:336"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"5:5407":{"id":"5:5407","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2948-0:302":{"id":"b:2:2948-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3137":{"id":"2:3137","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139","2:3140"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3045-0:279":{"id":"a:2:3045-0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3242":{"id":"2:3242","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3244"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:6603":{"id":"1:6603","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:537":{"id":"5:537","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:538","5:539","5:540"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2612-0:311":{"id":"b:2:2612-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:56":{"id":"0:56","crate_id":0,"name":"word_splitters","span":{"filename":"src/word_splitters.rs","begin":[1,0],"end":[311,1]},"visibility":"public","docs":"Word splitting functionality.\n\nTo wrap text into lines, long words sometimes need to be split\nacross lines. The [`WordSplitter`] trait defines this\nfunctionality. [`HyphenSplitter`] is the default implementation of\nthis treat: it will simply split words on existing hyphens.","links":{"`HyphenSplitter`":"0:286","`WordSplitter`":"0:67"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:67","0:279","0:286","0:84"]}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[500,0],"end":[663,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["0:221","0:222","0:223","0:224","0:226","0:228"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:302":{"id":"b:2:2612-0:302","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5482":{"id":"1:5482","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5483","1:5484","1:5485","1:5486","1:5487","1:5488","1:5489","1:5490","1:5491","1:5492","1:5493","1:5494","1:5495","1:5496","1:5497","1:5498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:140":{"id":"0:140","crate_id":0,"name":"WrapAlgorithm","span":{"filename":"src/wrap_algorithms.rs","begin":[32,0],"end":[41,1]},"visibility":"public","docs":"Describes how to wrap words into lines.\n\nThe simplest approach is to wrap words one word at a time. This is\nimplemented by [`FirstFit`]. If the `smawk` Cargo feature is\nenabled, a more complex algorithm is available, implemented by\n[`OptimalFit`], which will look at an entire paragraph at a time\nin order to find optimal line breaks.","links":{"`OptimalFit`":"0:293","`FirstFit`":"0:302"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:141"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WrapAlgorithmClone","id":"0:144","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:106","0:154","0:161"]}},"0:177":{"id":"0:177","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[200,4],"end":[200,29]},"visibility":"default","docs":"Displayed width of word represented by this fragment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:224":{"id":"0:224","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[594,4],"end":[607,5]},"visibility":"public","docs":"Change [`self.word_separator`].\n\nSee [`word_separators::WordSeparator`] for details on the choices.\n\n[`self.word_separator`]: #structfield.word_separator","links":{"`word_separators::WordSeparator`":"0:23"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["word_separator",{"kind":"generic","inner":"NewWordSep"}]],"output":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"NewWordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"NewWordSep","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[79,22],"end":[79,27]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:267"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[79,29],"end":[79,36]},"visibility":{"restricted":{"parent":"0:16","path":"::word_separators"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:269"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12463":{"id":"2:12463","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11921","FromStr::Err":"2:11921"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43572","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11921","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11921","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[77,16],"end":[77,20]},"visibility":{"restricted":{"parent":"0:91","path":"::wrap_algorithms"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"21:21":{"id":"21:21","crate_id":21,"name":"Matrix","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:23","21:24","21:25"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"bounds":[],"implementors":[]}},"2:2917":{"id":"2:2917","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919","2:2920"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2939":{"id":"2:2939","crate_id":2,"name":"from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12003":{"id":"2:12003","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12005","2:12006","2:12007","2:12008"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[14,29],"end":[14,36]},"visibility":{"restricted":{"parent":"0:92","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:301"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8352-0:336":{"id":"a:2:8352-0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:16":{"id":"0:16","crate_id":0,"name":"word_separators","span":{"filename":"src/word_separators.rs","begin":[1,0],"end":[406,1]},"visibility":"public","docs":"Functionality for finding words.\n\nIn order to wrap text, we need to know where the legal break\npoints are, i.e., where the words of the text are. This means that\nwe need to define what a \"word\" is.\n\nA simple approach is to simply split the text on whitespace, but\nthis does not work for East-Asian languages such as Chinese or\nJapanese where there are no spaces between words. Breaking a long\nsequence of emojis is another example where line breaks might be\nwanted even if there are no whitespace to be found.\n\nThe [`WordSeparator`] trait is responsible for determining where\nthere words are in a line of text. Please refer to the trait and\nthe structs which implement it for more information.","links":{"`WordSeparator`":"0:23"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:23","0:261","0:270"]}},"a:2:3016-0:261":{"id":"a:2:3016-0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3081":{"id":"2:3081","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3083","2:3084"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[79,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:77"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,16],"end":[229,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["0:359"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12364":{"id":"2:12364","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9956","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":"wrap_optimal_fit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[178,0],"end":[256,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with an optimal-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# Optimal-Fit Algorithm\n\nThe algorithm considers all possible break points and picks the\nbreaks which minimizes the gaps at the end of each line. More\nprecisely, the algorithm assigns a cost or penalty to each break\npoint, determined by `cost = gap * gap` where `gap = target_width -\nline_width`. Shorter lines are thus penalized more heavily since\nthey leave behind a larger gap.\n\nWe can illustrate this with the text “To be, or not to be: that is\nthe question”. We will be wrapping it in a narrow column with room\nfor only 10 characters. The [greedy\nalgorithm](super::wrap_first_fit) will produce these lines, each\nannotated with the corresponding penalty:\n\n```text\n\"To be, or\"   1² =  1\n\"not to be:\"  0² =  0\n\"that is\"     3² =  9\n\"the\"         7² = 49\n\"question\"    2² =  4\n```\n\nWe see that line four with “the” leaves a gap of 7 columns, which\ngives it a penalty of 49. The sum of the penalties is 63.\n\nThere are 10 words, which means that there are `2_u32.pow(9)` or\n512 different ways to typeset it. We can compute\nthe sum of the penalties for each possible line break and search\nfor the one with the lowest sum:\n\n```text\n\"To be,\"     4² = 16\n\"or not to\"  1² =  1\n\"be: that\"   2² =  4\n\"is the\"     4² = 16\n\"question\"   2² =  4\n```\n\nThe sum of the penalties is 41, which is better than what the\ngreedy algorithm produced.\n\nSearching through all possible combinations would normally be\nprohibitively slow. However, it turns out that the problem can be\nformulated as the task of finding column minima in a cost matrix.\nThis matrix has a special form (totally monotone) which lets us\nuse a [linear-time algorithm called\nSMAWK](https://lib.rs/crates/smawk) to find the optimal break\npoints.\n\nThis means that the time complexity remains O(_n_) where _n_ is\nthe number of words. Compared to\n[`wrap_first_fit`](super::wrap_first_fit), this function is about\n4 times slower.\n\nThe optimization of per-line costs over the entire paragraph is\ninspired by the line breaking algorithm used in TeX, as described\nin the 1981 article [_Breaking Paragraphs into\nLines_](http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf)\nby Knuth and Plass. The implementation here is based on [Python\ncode by David\nEppstein](https://github.com/jfinkels/PADS/blob/master/pads/wrap.py).\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"super::wrap_first_fit":"0:165"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fragments",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fragment","id":"0:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"2:12407":{"id":"2:12407","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15266","str::split_terminator":"1:15266","prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:45362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:541-0:270":{"id":"b:5:541-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3142":{"id":"2:3142","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3144","2:3145"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[17,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:92","path":"::wrap_algorithms::optimal_fit"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:107"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2948-0:270":{"id":"b:2:2948-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:346":{"id":"0:346","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[254,4],"end":[254,31]},"visibility":"public","docs":"The line breaking algorithm to use, see\n[`word_separators::WordSeparator`] trait for an overview and\npossible implementations.","links":{"`word_separators::WordSeparator`":"0:23"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"WordSep"}},"b:2:2933-0:286":{"id":"b:2:2933-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12367":{"id":"2:12367","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3304","str::slice_unchecked":"1:15266","`str`":"1:15266"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"2:13118":{"id":"2:13118","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13119","2:13120","2:13121","2:13122","2:13123","2:13124","2:13125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[235,0],"end":[303,1]},"visibility":{"restricted":{"parent":"0:169","path":"::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:185","0:186"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:237":{"id":"0:237","crate_id":0,"name":"refill","span":{"filename":"src/lib.rs","begin":[893,0],"end":[911,1]},"visibility":"public","docs":"Refill a paragraph of wrapped text with a new width.\n\nThis function will first use the [`unfill`] function to remove\nnewlines from the text. Afterwards the text is filled again using\nthe [`fill`] function.\n\nThe `new_width_or_options` argument specify the new width and can\nspecify other options as well — except for\n[`Options::initial_indent`] and [`Options::subsequent_indent`],\nwhich are deduced from `filled_text`.\n\n# Examples\n\n```\nuse textwrap::refill;\n\n// Some loosely wrapped text. The \"> \" prefix is recognized automatically.\nlet text = \"\\\n> Memory\n> safety without garbage\n> collection.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n> Memory safety\n> without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 40), \"\\\n> Memory safety without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 60), \"\\\n> Memory safety without garbage collection.\n\");\n```\n\nYou can also reshape bullet points:\n\n```\nuse textwrap::refill;\n\nlet text = \"\\\n- This is my\n  list item.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n- This is my list\n  item.\n\");\n```","links":{"`fill`":"0:230","`Options::subsequent_indent`":"0:336","`unfill`":"0:236","`Options::initial_indent`":"0:336"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["filled_text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["new_width_or_options",{"kind":"generic","inner":"Opt"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_separators::WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"word_splitters::WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"Opt"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"b:2:2609-0:286":{"id":"b:2:2609-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12457":{"id":"2:12457","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[103,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":"`NoHyphenation` implements `WordSplitter` by not splitting the\nword at all.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:79"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12428":{"id":"2:12428","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7497","str::rmatch_indices":"1:15266","prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:45444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2933-0:261":{"id":"b:2:2933-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141":{"id":"0:141","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[40,4],"end":[40,99]},"visibility":"default","docs":"Wrap words according to line widths.\n\nThe `line_widths` slice gives the target line width for each\nline (the last slice element is repeated as necessary). This\ncan be used to implement hanging indentation.\n\nPlease see the implementors of the trait for examples.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["words",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"1:5538":{"id":"1:5538","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5539"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3123":{"id":"2:3123","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3124","2:3125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5399":{"id":"5:5399","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5220","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5400","5:5401","5:5404","5:5407","5:5419","5:5420","5:5421","5:5422","5:5423"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2943-0:311":{"id":"b:2:2943-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12354":{"id":"2:12354","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11466"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:2913":{"id":"2:2913","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2915","2:2916"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7908":{"id":"2:7908","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7002","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:223":{"id":"0:223","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[582,4],"end":[587,5]},"visibility":"public","docs":"Change [`self.break_words`]. This controls if words longer\nthan `self.width` can be broken, or if they will be left\nsticking out into the right margin.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(4).break_words(true);\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"This\",\n                \"is a\",\n                \"litt\",\n                \"le\",\n                \"exam\",\n                \"ple.\"]);\n```\n\n[`self.break_words`]: #structfield.break_words","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12374":{"id":"2:12374","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15266"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:45577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12353":{"id":"2:12353","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12401":{"id":"2:12401","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15261","`DoubleEndedIterator`":"2:7497","self::pattern":"2:11984","str::split":"1:15266"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:45312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:221":{"id":"0:221","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[519,4],"end":[524,5]},"visibility":"public","docs":"Change [`self.initial_indent`]. The initial indentation is\nused on the very first line of output.\n\n# Examples\n\nClassic paragraph indentation can be achieved by specifying an\ninitial indentation and wrapping each paragraph by itself:\n\n```\nuse textwrap::{Options, wrap};\n\nlet options = Options::new(16).initial_indent(\"    \");\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"    This is a\",\n                \"little example.\"]);\n```\n\n[`self.initial_indent`]: #structfield.initial_indent","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["indent",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:286":{"id":"a:2:3045-0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12410":{"id":"2:12410","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984","str::rsplitn":"1:15266"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:45398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:544":{"id":"5:544","crate_id":5,"name":"to_owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[410,0],"end":[498,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_separators::UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["0:215"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2943-0:336":{"id":"b:2:2943-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12368":{"id":"2:12368","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15266"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12369":{"id":"2:12369","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15266"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:315":{"id":"0:315","crate_id":0,"name":"penalty","span":{"filename":"src/core.rs","begin":[222,4],"end":[222,24]},"visibility":"public","docs":"Penalty string to insert if the word falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[114,9],"end":[114,14]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:289"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5388":{"id":"1:5388","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5389","1:5390"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:302":{"id":"0:302","crate_id":0,"name":"FirstFit","span":{"filename":"src/wrap_algorithms.rs","begin":[78,0],"end":[78,20]},"visibility":"public","docs":"Wrap words using a fast and simple algorithm.\n\nThis algorithm uses no look-ahead when finding line breaks.\nImplemented by [`wrap_first_fit`], please see that function for\ndetails and examples.","links":{"`wrap_first_fit`":"0:165"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:302","a:2:3016-0:302","a:2:3045-0:302","a:2:8351-0:302","a:2:8352-0:302","b:2:2937-0:302","b:2:2933-0:302","b:5:541-0:302","b:2:2948-0:302","b:2:2943-0:302","b:2:2609-0:302","b:2:2612-0:302","b:2:3667-0:302","0:161","0:304","0:306","0:309","0:307"]}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[98,22],"end":[98,27]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:285"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:53":{"id":"22:53","crate_id":22,"name":"UnicodeWidthStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:54","22:56"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3004-0:336":{"id":"a:2:3004-0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2951":{"id":"2:2951","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:34927","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:2982":{"id":"2:2982","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2983"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:261":{"id":"b:2:2943-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12350":{"id":"2:12350","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11455","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12351","2:12352","2:12353","2:12354","2:12355","2:12356","2:12357","2:12358","2:12360","2:12362","2:12364","2:12366","2:12367","2:12368","2:12369","2:12370","2:12371","2:12372","2:12373","2:12374","2:12375","2:12376","2:12377","2:12378","2:12381","2:12384","2:12387","2:12391","2:12395","2:12398","2:12401","2:12404","2:12407","2:12410","2:12413","2:12416","2:12419","2:12422","2:12425","2:12428","2:12431","2:12434","2:12436","2:12438","2:12440","2:12441","2:12442","2:12445","2:12448","2:12451","2:12454","2:12457","2:12460","2:12463","2:12465","2:12466","2:12467","2:12468","2:12469","2:12471","2:12472"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:24":{"id":"0:24","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[46,4],"end":[46,87]},"visibility":"default","docs":"Find all words in `line`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["line",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[{"outlives":"'a"}]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"0:264":{"id":"0:264","crate_id":0,"name":"clone","span":{"filename":"src/word_separators.rs","begin":[79,9],"end":[79,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9628":{"id":"2:9628","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9629","2:9630","2:9631"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:162":{"id":"0:162","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[82,4],"end":[84,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["words",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5526":{"id":"1:5526","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:311":{"id":"b:2:2948-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:193":{"id":"0:193","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[314,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5400":{"id":"5:5400","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:311":{"id":"0:311","crate_id":0,"name":"Word","span":{"filename":"src/core.rs","begin":[216,0],"end":[225,1]},"visibility":"public","docs":"A piece of wrappable text, including any trailing whitespace.\n\nA `Word` is an example of a [`Fragment`], so it has a width,\ntrailing whitespace, and potentially a penalty item.","links":{"`Fragment`":"0:176"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":["0:313","0:314","0:315"],"impls":["0:183","a:2:3004-0:311","a:2:3016-0:311","a:2:3045-0:311","a:2:8351-0:311","a:2:8352-0:311","b:2:2937-0:311","b:2:2933-0:311","b:5:541-0:311","b:2:2948-0:311","b:2:2943-0:311","b:2:2609-0:311","b:2:2612-0:311","b:2:3667-0:311","0:191","0:322","0:320","0:333","0:327","0:180","0:317","0:325","0:331"]}},"b:2:3667-0:279":{"id":"b:2:3667-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:43":{"id":"0:43","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[95,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["line",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[{"outlives":"'a"}]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:286":{"id":"b:2:2943-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5476":{"id":"1:5476","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5477","1:5478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7522":{"id":"2:7522","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7523","2:7524"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12695":{"id":"2:12695","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12696","2:12697"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3045-0:261":{"id":"a:2:3045-0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5460":{"id":"1:5460","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5461","1:5462","1:5463","1:5464"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3098":{"id":"2:3098","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3099","2:3100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:84":{"id":"0:84","crate_id":0,"name":"split_words","span":{"filename":"src/word_splitters.rs","begin":[185,0],"end":[223,1]},"visibility":"public","docs":"Split words into smaller words according to the split points given\nby `word_splitter`.\n\nNote that we split all words, regardless of their length. This is\nto more cleanly separate the business of splitting (including\nautomatic hyphenation) from the business of word wrapping.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::word_splitters::{split_words, NoHyphenation, HyphenSplitter};\n\nassert_eq!(\n    split_words(vec![Word::from(\"foo-bar\")], &HyphenSplitter).collect::<Vec<_>>(),\n    vec![Word::from(\"foo-\"), Word::from(\"bar\")]\n);\n\n// The NoHyphenation splitter ignores the '-':\nassert_eq!(\n    split_words(vec![Word::from(\"foo-bar\")], &NoHyphenation).collect::<Vec<_>>(),\n    vec![Word::from(\"foo-bar\")]\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["words",{"kind":"generic","inner":"I"}],["word_splitter",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"WordSplit"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7453","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"2:2691":{"id":"2:2691","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2692","2:2693","2:2694","2:2695"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"1:2338":{"id":"1:2338","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2339","1:2341","1:2342","1:2343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9388","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:3667-0:311":{"id":"b:2:3667-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12384":{"id":"2:12384","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:286":{"id":"0:286","crate_id":0,"name":"HyphenSplitter","span":{"filename":"src/word_splitters.rs","begin":[115,0],"end":[115,26]},"visibility":"public","docs":"Simple and default way to split words: splitting on existing\nhyphens only.\n\nYou probably don't need to use this type since it's already used\nby default by [`Options::new`](super::Options::new).","links":{"super::Options::new":"0:336"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:286","a:2:3016-0:286","a:2:3045-0:286","a:2:8351-0:286","a:2:8352-0:286","b:2:2937-0:286","b:2:2933-0:286","b:5:541-0:286","b:2:2948-0:286","b:2:2943-0:286","b:2:2609-0:286","b:2:2612-0:286","b:2:3667-0:286","0:80","0:288","0:290","0:291"]}},"b:2:2948-0:261":{"id":"b:2:2948-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13047":{"id":"2:13047","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13048","2:13049","2:13050","2:13051"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12472":{"id":"2:12472","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15261"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:45611","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4431":{"id":"1:4431","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4432","1:4433","1:4434","1:4436","1:4437","1:4439","1:4440"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4346","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3162":{"id":"2:3162","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12404":{"id":"2:12404","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15266","str::split":"1:15266","self::pattern":"2:11984","`DoubleEndedIterator`":"2:7497","prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:45344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5516":{"id":"1:5516","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5517","1:5518","1:5519","1:5520"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2937-0:279":{"id":"b:2:2937-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2946":{"id":"2:2946","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:12395":{"id":"2:12395","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15266","self::pattern":"2:11984","prim@char":"1:15261","str::rsplit":"1:15266","`DoubleEndedIterator`":"2:7497"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:45294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:293":{"id":"a:2:8351-0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9392":{"id":"2:9392","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:228":{"id":"0:228","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[649,4],"end":[662,5]},"visibility":"public","docs":"Change [`self.word_splitter`]. The\n[`word_splitters::WordSplitter`] is used to fit part of a word\ninto the current line when wrapping text.\n\nThis function may return a different type than `Self`. That is\nthe case when the given `splitter` is of a different type the\nthe currently stored one in the `splitter` field. Take for\nexample:\n\n```\nuse textwrap::word_splitters::{HyphenSplitter, NoHyphenation};\nuse textwrap::Options;\n// The default type returned by `new`:\nlet opt: Options<_, _, HyphenSplitter> = Options::new(80);\n// Setting a different word splitter changes the type\nlet opt: Options<_, _, NoHyphenation> = opt.word_splitter(NoHyphenation);\n```\n\n[`self.word_splitter`]: #structfield.word_splitter","links":{"`word_splitters::WordSplitter`":"0:67"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["word_splitter",{"kind":"generic","inner":"NewWordSplit"}]],"output":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"NewWordSplit"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"NewWordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:205":{"id":"0:205","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[269,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["options",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4424":{"id":"1:4424","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4425","1:4426","1:4427","1:4428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:261":{"id":"0:261","crate_id":0,"name":"AsciiSpace","span":{"filename":"src/word_separators.rs","begin":[80,0],"end":[80,22]},"visibility":"public","docs":"Find words by splitting on regions of `' '` characters.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:261","a:2:3016-0:261","a:2:3045-0:261","a:2:8351-0:261","a:2:8352-0:261","b:2:2937-0:261","b:2:2933-0:261","b:5:541-0:261","b:2:2948-0:261","b:2:2943-0:261","b:2:2609-0:261","b:2:2612-0:261","b:2:3667-0:261","0:42","0:263","0:265","0:268","0:266"]}},"2:12377":{"id":"2:12377","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:45586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:7475":{"id":"1:7475","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7476"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7901":{"id":"2:7901","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12370":{"id":"2:12370","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:45264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3449":{"id":"2:3449","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12471":{"id":"2:12471","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15261"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:45602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3228":{"id":"2:3228","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:256":{"id":"0:256","crate_id":0,"name":"fill_inplace","span":{"filename":"src/lib.rs","begin":[1340,0],"end":[1374,1]},"visibility":"public","docs":"Fill `text` in-place without reallocating the input string.\n\nThis function works by modifying the input string: some `' '`\ncharacters will be replaced by `'\\n'` characters. The rest of the\ntext remains untouched.\n\nSince we can only replace existing whitespace in the input with\n`'\\n'`, we cannot do hyphenation nor can we split words longer\nthan the line width. We also need to use `AsciiSpace` as the word\nseparator since we need `' '` characters between words in order to\nreplace some of them with a `'\\n'`. Indentation is also ruled out.\nIn other words, `fill_inplace(width)` behaves as if you had called\n[`fill`] with these options:\n\n```\n# use textwrap::{core, Options};\n# use textwrap::{word_separators, word_splitters, wrap_algorithms};\n# let width = 80;\nOptions {\n    width: width,\n    initial_indent: \"\",\n    subsequent_indent: \"\",\n    break_words: false,\n    word_separator: word_separators::AsciiSpace,\n    wrap_algorithm: wrap_algorithms::FirstFit,\n    word_splitter: word_splitters::NoHyphenation,\n};\n```\n\nThe wrap algorithm is [`wrap_algorithms::FirstFit`] since this\nis the fastest algorithm — and the main reason to use\n`fill_inplace` is to get the string broken into newlines as fast\nas possible.\n\nA last difference is that (unlike [`fill`]) `fill_inplace` can\nleave trailing whitespace on lines. This is because we wrap by\ninserting a `'\\n'` at the final whitespace in the input string:\n\n```\nlet mut text = String::from(\"Hello   World!\");\ntextwrap::fill_inplace(&mut text, 10);\nassert_eq!(text, \"Hello  \\nWorld!\");\n```\n\nIf we didn't do this, the word `World!` would end up being\nindented. You can avoid this if you make sure that your input text\nhas no double spaces.\n\n# Performance\n\nIn benchmarks, `fill_inplace` is about twice as fast as [`fill`].\nPlease see the [`linear`\nbenchmark](https://github.com/mgeisler/textwrap/blob/master/benches/linear.rs)\nfor details.","links":{"`fill`":"0:230","`wrap_algorithms::FirstFit`":"0:302"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["width",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"2:12466":{"id":"2:12466","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:282":{"id":"0:282","crate_id":0,"name":"clone","span":{"filename":"src/word_splitters.rs","begin":[98,9],"end":[98,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6427":{"id":"1:6427","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6428","1:6429","1:6430","1:6431","1:6432","1:6433","1:6434","1:6435","1:6436","1:6437","1:6438","1:6439","1:6440","1:6441","1:6442","1:6443","1:6444"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:195":{"id":"0:195","crate_id":0,"name":"break_words","span":{"filename":"src/core.rs","begin":[331,0],"end":[344,1]},"visibility":"public","docs":"Forcibly break words wider than `line_width` into smaller words.\n\nThis simply calls [`Word::break_apart`] on words that are too\nwide. This means that no extra `'-'` is inserted, the word is\nsimply broken into smaller pieces.","links":{"`Word::break_apart`":"0:311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["words",{"kind":"generic","inner":"I"}],["line_width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:7453","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","binding":{"equality":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\""}},"0:165":{"id":"0:165","crate_id":0,"name":"wrap_first_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[233,0],"end":[257,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with a first-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# First-Fit Algorithm\n\nThis implements a simple “greedy” algorithm: accumulate fragments\none by one and when a fragment no longer fits, start a new line.\nThere is no look-ahead, we simply take first fit of the fragments\nwe find.\n\nWhile fast and predictable, this algorithm can produce poor line\nbreaks when a long fragment is moved to a new line, leaving behind\na large gap:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms;\nuse textwrap::word_separators::{AsciiSpace, WordSeparator};\n\n// Helper to convert wrapped lines to a Vec<String>.\nfn lines_to_strings(lines: Vec<&[Word<'_>]>) -> Vec<String> {\n    lines.iter().map(|line| {\n        line.iter().map(|word| &**word).collect::<Vec<_>>().join(\" \")\n    }).collect::<Vec<_>>()\n}\n\nlet text = \"These few words will unfortunately not wrap nicely.\";\nlet words = AsciiSpace.find_words(text).collect::<Vec<_>>();\nassert_eq!(lines_to_strings(wrap_algorithms::wrap_first_fit(&words, &[15])),\n           vec![\"These few words\",\n                \"will\",  // <-- short line\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n\n// We can avoid the short line if we look ahead:\n#[cfg(feature = \"smawk\")]\nassert_eq!(lines_to_strings(wrap_algorithms::wrap_optimal_fit(&words, &[15])),\n           vec![\"These few\",\n                \"words will\",\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n```\n\nThe [`wrap_optimal_fit`] function was used above to get better\nline breaks. It uses an advanced algorithm which tries to avoid\nshort lines. This function is about 4 times faster than\n[`wrap_optimal_fit`].\n\n# Examples\n\nImagine you're building a house site and you have a number of\ntasks you need to execute. Things like pour foundation, complete\nframing, install plumbing, electric cabling, install insulation.\n\nThe construction workers can only work during daytime, so they\nneed to pack up everything at night. Because they need to secure\ntheir tools and move machines back to the garage, this process\ntakes much more time than the time it would take them to simply\nswitch to another task.\n\nYou would like to make a list of tasks to execute every day based\non your estimates. You can model this with a program like this:\n\n```\nuse textwrap::wrap_algorithms::wrap_first_fit;\nuse textwrap::core::{Fragment, Word};\n\n#[derive(Debug)]\nstruct Task<'a> {\n    name: &'a str,\n    hours: usize,   // Time needed to complete task.\n    sweep: usize,   // Time needed for a quick sweep after task during the day.\n    cleanup: usize, // Time needed for full cleanup if day ends with this task.\n}\n\nimpl Fragment for Task<'_> {\n    fn width(&self) -> usize { self.hours }\n    fn whitespace_width(&self) -> usize { self.sweep }\n    fn penalty_width(&self) -> usize { self.cleanup }\n}\n\n// The morning tasks\nlet tasks = vec![\n    Task { name: \"Foundation\",  hours: 4, sweep: 2, cleanup: 3 },\n    Task { name: \"Framing\",     hours: 3, sweep: 1, cleanup: 2 },\n    Task { name: \"Plumbing\",    hours: 2, sweep: 2, cleanup: 2 },\n    Task { name: \"Electrical\",  hours: 2, sweep: 1, cleanup: 2 },\n    Task { name: \"Insulation\",  hours: 2, sweep: 1, cleanup: 2 },\n    Task { name: \"Drywall\",     hours: 3, sweep: 1, cleanup: 2 },\n    Task { name: \"Floors\",      hours: 3, sweep: 1, cleanup: 2 },\n    Task { name: \"Countertops\", hours: 1, sweep: 1, cleanup: 2 },\n    Task { name: \"Bathrooms\",   hours: 2, sweep: 1, cleanup: 2 },\n];\n\n// Fill tasks into days, taking `day_length` into account. The\n// output shows the hours worked per day along with the names of\n// the tasks for that day.\nfn assign_days<'a>(tasks: &[Task<'a>], day_length: usize) -> Vec<(usize, Vec<&'a str>)> {\n    let mut days = Vec::new();\n    // Assign tasks to days. The assignment is a vector of slices,\n    // with a slice per day.\n    let assigned_days: Vec<&[Task<'a>]> = wrap_first_fit(&tasks, &[day_length]);\n    for day in assigned_days.iter() {\n        let last = day.last().unwrap();\n        let work_hours: usize = day.iter().map(|t| t.hours + t.sweep).sum();\n        let names = day.iter().map(|t| t.name).collect::<Vec<_>>();\n        days.push((work_hours - last.sweep + last.cleanup, names));\n    }\n    days\n}\n\n// With a single crew working 8 hours a day:\nassert_eq!(\n    assign_days(&tasks, 8),\n    [\n        (7, vec![\"Foundation\"]),\n        (8, vec![\"Framing\", \"Plumbing\"]),\n        (7, vec![\"Electrical\", \"Insulation\"]),\n        (5, vec![\"Drywall\"]),\n        (7, vec![\"Floors\", \"Countertops\"]),\n        (4, vec![\"Bathrooms\"]),\n    ]\n);\n\n// With two crews working in shifts, 16 hours a day:\nassert_eq!(\n    assign_days(&tasks, 16),\n    [\n        (14, vec![\"Foundation\", \"Framing\", \"Plumbing\"]),\n        (15, vec![\"Electrical\", \"Insulation\", \"Drywall\", \"Floors\"]),\n        (6, vec![\"Countertops\", \"Bathrooms\"]),\n    ]\n);\n```\n\nApologies to anyone who actually knows how to build a house and\nknows how long each step takes :-)","links":{"`wrap_optimal_fit`":"0:121"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fragments",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}],["line_widths",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"usize"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fragment","id":"0:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"b:5:541-0:293":{"id":"b:5:541-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6181":{"id":"1:6181","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6182","1:6183","1:6184","1:6185","1:6187","1:6189","1:6190"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:3016-0:302":{"id":"a:2:3016-0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9587":{"id":"2:9587","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9588","2:9590"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:23":{"id":"0:23","crate_id":0,"name":"WordSeparator","span":{"filename":"src/word_separators.rs","begin":[41,0],"end":[47,1]},"visibility":"public","docs":"Describes where words occur in a line of text.\n\nThe simplest approach is say that words are separated by one or\nmore ASCII spaces (`' '`). This works for Western languages\nwithout emojis. A more complex approach is to use the Unicode line\nbreaking algorithm, which finds break points in non-ASCII text.\n\nThe line breaks occur between words, please see the\n[`WordSplitter`](crate::word_splitters::WordSplitter) trait for\noptions of how to handle hyphenation of individual words.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::word_separators::{WordSeparator, AsciiSpace};\n\nlet words = AsciiSpace.find_words(\"Hello World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello \"), Word::from(\"World!\")]);\n```","links":{"crate::word_splitters::WordSplitter":"0:67"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:24"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"WordSeparatorClone","id":"0:26","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":["0:36","0:42","0:46"]}},"0:215":{"id":"0:215","crate_id":0,"name":"with_word_splitter","span":{"filename":"src/lib.rs","begin":[487,4],"end":[497,5]},"visibility":"public","docs":"Creates a new [`Options`] with the specified width and\nword splitter. Equivalent to\n\n```\n# use textwrap::Options;\n# use textwrap::word_splitters::{NoHyphenation, HyphenSplitter};\n# const word_splitter: NoHyphenation = NoHyphenation;\n# const width: usize = 80;\n# let actual = Options::with_word_splitter(width, word_splitter);\n# let expected =\nOptions {\n    width: width,\n    initial_indent: \"\",\n    subsequent_indent: \"\",\n    break_words: true,\n    #[cfg(feature = \"unicode-linebreak\")]\n    word_separator: textwrap::word_separators::UnicodeBreakProperties,\n    #[cfg(not(feature = \"unicode-linebreak\"))]\n    word_separator: textwrap::word_separators::AsciiSpace,\n    #[cfg(feature = \"smawk\")]\n    wrap_algorithm: textwrap::wrap_algorithms::OptimalFit,\n    #[cfg(not(feature = \"smawk\"))]\n    wrap_algorithm: textwrap::wrap_algorithms::FirstFit,\n    word_splitter: word_splitter,\n}\n# ;\n# assert_eq!(actual.width, expected.width);\n# assert_eq!(actual.initial_indent, expected.initial_indent);\n# assert_eq!(actual.subsequent_indent, expected.subsequent_indent);\n# assert_eq!(actual.break_words, expected.break_words);\n```\n\nThis constructor allows to specify the word splitter to be\nused. It is like a short-cut for\n`Options::new(w).word_splitter(s)`, but this function is a\n`const fn`. The given word splitter may be in a [`Box`], which\nthen can be coerced into a trait object for dynamic dispatch:\n\n```\nuse textwrap::Options;\nuse textwrap::word_splitters::{HyphenSplitter, NoHyphenation, WordSplitter};\n# const width: usize = 80;\n\n// This opt contains a boxed trait object as splitter.\n// The type annotation is important, otherwise it will be not a trait object\nlet mut opt: Options<_, _, Box<dyn WordSplitter>>\n    = Options::with_word_splitter(width, Box::new(NoHyphenation));\n// Its type is actually: `Options<AsciiSpace, Box<dyn word_splitters::WordSplitter>>`:\nlet opt_coerced: Options<_, _, Box<dyn WordSplitter>> = opt;\n\n// Thus, it can be overridden with a different word splitter.\nopt = Options::with_word_splitter(width, Box::new(HyphenSplitter));\n// Now, containing a `HyphenSplitter` instead.\n```\n\nSince the word splitter is given by value, which determines\nthe generic type parameter, it can be used to produce both an\n[`Options`] with static and dynamic dispatch, respectively.\nWhile dynamic dispatch allows to change the type of the inner\nword splitter at run time as seen above, static dispatch\nespecially can store the word splitter directly, without the\nneed for a box. This in turn allows it to be used in constant\nand static context:\n\n```\nuse textwrap::word_splitters::HyphenSplitter; use textwrap::{ Options};\nuse textwrap::word_separators::AsciiSpace;\nuse textwrap::wrap_algorithms::FirstFit;\n# const width: usize = 80;\n\n# #[cfg(all(not(feature = \"smawk\"), not(feature = \"unicode-linebreak\")))] {\nconst FOO: Options<FirstFit, AsciiSpace, HyphenSplitter> =\n    Options::with_word_splitter(width, HyphenSplitter);\nstatic BAR: Options<FirstFit, AsciiSpace, HyphenSplitter> = FOO;\n# }\n```","links":{"`Options`":"0:336","`Box`":"5:196"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["width",{"kind":"primitive","inner":"usize"}],["word_splitter",{"kind":"generic","inner":"WordSplit"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"2:12357":{"id":"2:12357","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15275"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:267":{"id":"0:267","crate_id":0,"name":"fmt","span":{"filename":"src/word_separators.rs","begin":[79,22],"end":[79,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5721":{"id":"5:5721","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12436":{"id":"2:12436","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:293":{"id":"0:293","crate_id":0,"name":"OptimalFit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[15,0],"end":[15,22]},"visibility":"public","docs":"Wrap words using an advanced algorithm with look-ahead.\n\nThis wrapping algorithm considers the entire paragraph to find\noptimal line breaks. Implemented by [`wrap_optimal_fit`], please\nsee that function for details and examples.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`wrap_optimal_fit`":"0:121"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:293","a:2:3016-0:293","a:2:3045-0:293","a:2:8351-0:293","a:2:8352-0:293","b:2:2937-0:293","b:2:2933-0:293","b:5:541-0:293","b:2:2948-0:293","b:2:2943-0:293","b:2:2609-0:293","b:2:2612-0:293","b:2:3667-0:293","0:106","0:295","0:297","0:300","0:298"]}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[114,22],"end":[114,27]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9381","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:292"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:336":{"id":"0:336","crate_id":0,"name":"Options","span":{"filename":"src/lib.rs","begin":[230,0],"end":[260,1]},"visibility":"public","docs":"Holds settings for wrapping and filling text.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::WrapAlgorithm","id":"0:140","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"word_separators::WordSeparator","id":"0:23","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"word_splitters::WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:341","0:342","0:343","0:344","0:345","0:346","0:347"],"impls":["0:209","0:212","0:216","a:2:3004-0:336","a:2:3016-0:336","a:2:3045-0:336","a:2:8351-0:336","a:2:8352-0:336","b:2:2937-0:336","b:2:2933-0:336","b:5:541-0:336","b:2:2948-0:336","b:2:2943-0:336","b:2:2609-0:336","b:2:2612-0:336","b:2:3667-0:336","0:200","0:206","0:354","0:348"]}},"2:12469":{"id":"2:12469","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15261"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:45593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3171":{"id":"2:3171","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2609-0:293":{"id":"b:2:2609-0:293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,0],"end":[293,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_separators::UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_splitters::HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:208"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:329":{"id":"0:329","crate_id":0,"name":"eq","span":{"filename":"src/core.rs","begin":[215,29],"end":[215,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:211":{"id":"0:211","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Creates a new [`Options`] with the specified width and static\ndispatch using the [`word_splitters::HyphenSplitter`].\nEquivalent to\n\n```\n# use textwrap::word_splitters::{HyphenSplitter, WordSplitter};\n# use textwrap::Options;\n# let width = 80;\n# let actual = Options::new(width);\n# let expected =\nOptions {\n    width: width,\n    initial_indent: \"\",\n    subsequent_indent: \"\",\n    break_words: true,\n    #[cfg(feature = \"unicode-linebreak\")]\n    word_separator: textwrap::word_separators::UnicodeBreakProperties,\n    #[cfg(not(feature = \"unicode-linebreak\"))]\n    word_separator: textwrap::word_separators::AsciiSpace,\n    #[cfg(feature = \"smawk\")]\n    wrap_algorithm: textwrap::wrap_algorithms::OptimalFit,\n    #[cfg(not(feature = \"smawk\"))]\n    wrap_algorithm: textwrap::wrap_algorithms::FirstFit,\n    word_splitter: textwrap::word_splitters::HyphenSplitter,\n}\n# ;\n# assert_eq!(actual.width, expected.width);\n# assert_eq!(actual.initial_indent, expected.initial_indent);\n# assert_eq!(actual.subsequent_indent, expected.subsequent_indent);\n# assert_eq!(actual.break_words, expected.break_words);\n```\n\nNote that the default word separator and wrap algorithms\nchanges based on the available Cargo features. The best\navailable algorithm is used by default.\n\nStatic dispatch means here, that the word splitter is stored as-is\nand the type is known at compile-time. Thus the returned value\nis actually a `Options<AsciiSpace, HyphenSplitter>`.\n\nDynamic dispatch on the other hand, means that the word\nseparator and/or word splitter is stored as a trait object\nsuch as a `Box<dyn word_splitters::WordSplitter>`. This way\nthe word splitter's inner type can be changed without changing\nthe type of this struct, which then would be just `Options` as\na short cut for `Options<Box<dyn\nword_separators::WordSeparator>, Box<dyn\nword_splitters::WordSplitter>>`.\n\nThe value and type of the word splitter can be choose from the\nstart using the [`Options::with_word_splitter`] constructor or\nchanged afterwards using the [`Options::word_splitter`]\nmethod. Whether static or dynamic dispatch is used, depends on\nwhether these functions are given a boxed\n[`word_splitters::WordSplitter`] or not. Take for example:\n\n```\nuse textwrap::Options;\nuse textwrap::word_splitters::{HyphenSplitter, NoHyphenation};\n# use textwrap::word_splitters::WordSplitter;\n# use textwrap::word_separators::AsciiSpace;\n# let width = 80;\n\n// uses HyphenSplitter with static dispatch\n// the actual type: Options<AsciiSpace, HyphenSplitter>\nlet opt = Options::new(width);\n\n// uses NoHyphenation with static dispatch\n// the actual type: Options<AsciiSpace, NoHyphenation>\nlet opt = Options::new(width).word_splitter(NoHyphenation);\n\n// uses HyphenSplitter with dynamic dispatch\n// the actual type: Options<AsciiSpace, Box<dyn word_splitters::WordSplitter>>\nlet opt: Options<_, _, _> = Options::new(width).word_splitter(Box::new(HyphenSplitter));\n\n// uses NoHyphenation with dynamic dispatch\n// the actual type: Options<AsciiSpace, Box<dyn word_splitters::WordSplitter>>\nlet opt: Options<_, _, _> = Options::new(width).word_splitter(Box::new(NoHyphenation));\n```\n\nNotice that the last two variables have the same type, despite\nthe different `WordSplitter` in use. Thus dynamic dispatch\nallows to change the word splitter at run-time without\nchanging the variables type.","links":{"`word_splitters::HyphenSplitter`":"0:286","`Options::with_word_splitter`":"0:336","`Options`":"0:336","`Options::word_splitter`":"0:336","`word_splitters::WordSplitter`":"0:67"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"b:5:541-0:336":{"id":"b:5:541-0:336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3016-0:286":{"id":"a:2:3016-0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:541-0:286":{"id":"b:5:541-0:286","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12454":{"id":"2:12454","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15261","self::pattern":"2:11984"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12376":{"id":"2:12376","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:45558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9381":{"id":"2:9381","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9382"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12434":{"id":"2:12434","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2660":{"id":"2:2660","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:5:541-0:261":{"id":"b:5:541-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2936":{"id":"2:2936","crate_id":2,"name":"into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:285":{"id":"0:285","crate_id":0,"name":"fmt","span":{"filename":"src/word_splitters.rs","begin":[98,22],"end":[98,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:270":{"id":"0:270","crate_id":0,"name":"UnicodeBreakProperties","span":{"filename":"src/word_separators.rs","begin":[132,0],"end":[132,34]},"visibility":"public","docs":"Find words using the Unicode line breaking algorithm.","links":{},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["a:2:3004-0:270","a:2:3016-0:270","a:2:3045-0:270","a:2:8351-0:270","a:2:8352-0:270","b:2:2937-0:270","b:2:2933-0:270","b:5:541-0:270","b:2:2948-0:270","b:2:2943-0:270","b:2:2609-0:270","b:2:2612-0:270","b:2:3667-0:270","0:46","0:272","0:274","0:277","0:275"]}},"0:7":{"id":"0:7","crate_id":0,"name":"indent","span":{"filename":"src/indentation.rs","begin":[52,0],"end":[75,1]},"visibility":"public","docs":"Indent each line by the given prefix.\n\n# Examples\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n  Second line.\\n\");\n```\n\nWhen indenting, trailing whitespace is stripped from the prefix.\nThis means that empty lines remain empty afterwards:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\n\\n\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n\\n\\n  Second line.\\n\");\n```\n\nNotice how `\"\\n\\n\\n\"` remained as `\"\\n\\n\\n\"`.\n\nThis feature is useful when you want to indent text and have a\nspace between your prefix and the text. In this case, you _don't_\nwant a trailing space on empty lines:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"foo = 123\\n\\nprint(foo)\\n\", \"# \"),\n           \"# foo = 123\\n#\\n# print(foo)\\n\");\n```\n\nNotice how `\"\\n\\n\"` became `\"\\n#\\n\"` instead of `\"\\n# \\n\"` which\nwould have trailing whitespace.\n\nLeading and trailing whitespace coming from the text itself is\nkept unchanged:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["prefix",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"0:222":{"id":"0:222","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[555,4],"end":[560,5]},"visibility":"public","docs":"Change [`self.subsequent_indent`]. The subsequent indentation\nis used on lines following the first line of output.\n\n# Examples\n\nCombining initial and subsequent indentation lets you format a\nsingle paragraph as a bullet list:\n\n```\nuse textwrap::{Options, wrap};\n\nlet options = Options::new(12)\n    .initial_indent(\"* \")\n    .subsequent_indent(\"  \");\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is\",\n                \"  a little\",\n                \"  example.\"]);\n\n// Without the `smawk` feature, the wrapping is a little different:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is a\",\n                \"  little\",\n                \"  example.\"]);\n```\n\n[`self.subsequent_indent`]: #structfield.subsequent_indent","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["indent",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:279":{"id":"b:2:2943-0:279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[124,0],"end":[144,1]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":"`HyphenSplitter` is the default `WordSplitter` used by\n[`Options::new`](super::Options::new). It will split words on any\nexisting hyphens in the word.\n\nIt will only use hyphens that are surrounded by alphanumeric\ncharacters, which prevents a word like `\"--foo-bar\"` from being\nsplit into `\"--\"` and `\"foo-bar\"`.","links":{"super::Options::new":"0:336"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"WordSplitter","id":"0:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:81"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3102":{"id":"2:3102","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3104"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3304":{"id":"2:3304","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3300","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:5:541-0:311":{"id":"b:5:541-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7904":{"id":"2:7904","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[98,16],"end":[98,20]},"visibility":{"restricted":{"parent":"0:56","path":"::word_splitters"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12438":{"id":"2:12438","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5420":{"id":"5:5420","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:196","`String`":"5:7602"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:279":{"id":"a:2:3004-0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NoHyphenation","id":"0:279","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:359":{"id":"0:359","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[229,16],"end":[229,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:261":{"id":"b:2:3667-0:261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12441":{"id":"2:12441","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8351-0:261":{"id":"a:2:8351-0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AsciiSpace","id":"0:261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:7002":{"id":"2:7002","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7003","2:7004","2:7005","2:7006","2:7007","2:7008","2:7009"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2603":{"id":"2:2603","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2605"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:8874":{"id":"2:8874","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875","2:8876","2:8877"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2609-0:270":{"id":"b:2:2609-0:270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7633":{"id":"2:7633","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7634","2:7635","2:7636","2:7637","2:7639","2:7642","2:7643","2:7644","2:7645","2:7647","2:7649","2:7650","2:7652","2:7655","2:7662","2:7664","2:7667","2:7668","2:7669","2:7671","2:7673","2:7676","2:7677","2:7678","2:7682","2:7685","2:7686","2:7687","2:7689","2:7690","2:7692","2:7702","2:7717","2:7719","2:7723","2:7732","2:7735","2:7737","2:7744","2:7751","2:7758","2:7767","2:7778","2:7785","2:7792","2:7793","2:7794","2:7806","2:7813","2:7825","2:7832","2:7833","2:7838","2:7841","2:7844","2:7845","2:7847","2:7849","2:7852","2:7855","2:7858","2:7861","2:7864","2:7867","2:7869","2:7871","2:7873","2:7875","2:7877","2:7878","2:7886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3665":{"id":"2:3665","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3666"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"2:9388":{"id":"2:9388","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9389"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:336":{"id":"a:2:3016-0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"WrapAlgo","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSep","kind":{"type":{"bounds":[],"default":null}}},{"name":"WordSplit","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSep"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WordSplit"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"generic","inner":"WrapAlgo"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"WrapAlgo"}},{"type":{"kind":"generic","inner":"WordSep"}},{"type":{"kind":"generic","inner":"WordSplit"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:236":{"id":"0:236","crate_id":0,"name":"unfill","span":{"filename":"src/lib.rs","begin":[793,0],"end":[837,1]},"visibility":"public","docs":"Unpack a paragraph of already-wrapped text.\n\nThis function attempts to recover the original text from a single\nparagraph of text produced by the [`fill`] function. This means\nthat it turns\n\n```text\ntextwrap: a small\nlibrary for\nwrapping text.\n```\n\nback into\n\n```text\ntextwrap: a small library for wrapping text.\n```\n\nIn addition, it will recognize a common prefix among the lines.\nThe prefix of the first line is returned in\n[`Options::initial_indent`] and the prefix (if any) of the the\nother lines is returned in [`Options::subsequent_indent`].\n\nIn addition to `' '`, the prefixes can consist of characters used\nfor unordered lists (`'-'`, `'+'`, and `'*'`) and block quotes\n(`'>'`) in Markdown as well as characters often used for inline\ncomments (`'#'` and `'/'`).\n\nThe text must come from a single wrapped paragraph. This means\nthat there can be no `\"\\n\\n\"` within the text.\n\n# Examples\n\n```\nuse textwrap::unfill;\n\nlet (text, options) = unfill(\"\\\n* This is an\n  example of\n  a list item.\n\");\n\nassert_eq!(text, \"This is an example of a list item.\\n\");\nassert_eq!(options.initial_indent, \"* \");\nassert_eq!(options.subsequent_indent, \"  \");\n```","links":{"`fill`":"0:230","`Options::initial_indent`":"0:336","`Options::subsequent_indent`":"0:336"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["text",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Options","id":"0:336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"resolved_path","inner":{"name":"wrap_algorithms::OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_separators::UnicodeBreakProperties","id":"0:270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"word_splitters::HyphenSplitter","id":"0:286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\""}},"a:2:3004-0:293":{"id":"a:2:3004-0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OptimalFit","id":"0:293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3004-0:302":{"id":"a:2:3004-0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FirstFit","id":"0:302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2933-0:311":{"id":"b:2:2933-0:311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Word","id":"0:311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9400":{"id":"2:9400","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}}},"paths":{"2:42582":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:11907":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:3171":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2708":{"crate_id":1,"path":["textwrap","Owned"],"kind":"typedef"},"2:42386":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1636":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6418":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"1:15264":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:22196":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9367":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"0:250":{"crate_id":0,"path":["textwrap","wrap_columns"],"kind":"function"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43927":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11207":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2691":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1362":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10717":{"crate_id":1,"path":["std","io","Initializer"],"kind":"struct"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:10126":{"crate_id":2,"path":["textwrap","IntoIter"],"kind":"typedef"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:15011":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:3708":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4289":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42020":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3014":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43513":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:9331":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:15267":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5538":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1316":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:42064":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:14658":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"2:42424":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:5206":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:11597":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10869":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"6:151":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:13047":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:14620":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:12209":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:14489":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:15275":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:44151":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3154":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:595":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:1249":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:4441":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:1192":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:8353":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10382":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5388":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:10226":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46924":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:49279":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:41979":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22132":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:7338":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:5713":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:5394":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:28662":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42624":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1274":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:10708":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"2:4222":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"2:9398":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:45855":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:4450":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3106":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"6:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:4722":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:45227":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:48621":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3323":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"2:3248":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:15278":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:7601":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:7002":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:49233":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10283":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21387":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:21265":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42653":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:9633":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4181":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:15283":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:45280":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:176":{"crate_id":0,"path":["textwrap","core","Fragment"],"kind":"trait"},"2:22100":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:932":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:3910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4321":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7863":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3156":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10837":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:11148":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:10174":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10780":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:872":{"crate_id":1,"path":["textwrap","Owned"],"kind":"typedef"},"5:4763":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"6:1738":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:14315":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46010":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2838":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10840":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:15260":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:45252":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3162":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:15266":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:9396":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11799":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:976":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45444":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:5599":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:13420":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:1961":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46034":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:15274":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8979":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2072":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10965":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:11739":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3031":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:14755":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"2:9392":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:42401":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3883":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:13717":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:44476":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3807":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"2:46876":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:10955":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2393":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2655":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11819":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8468":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:501":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2702":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:10431":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:15227":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:7090":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:21482":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3010":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:10160":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1270":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:7697":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"12:220":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:9384":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:3256":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3172":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:1215":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:537":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1419":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:4054":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:49205":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2929":{"crate_id":1,"path":["textwrap","Owned"],"kind":"typedef"},"6:82":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:21":{"crate_id":21,"path":["smawk","Matrix"],"kind":"trait"},"2:8352":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2306":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:5186":{"crate_id":5,"path":["textwrap","Owned"],"kind":"typedef"},"1:9187":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"6:1714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:8351":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42449":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:12281":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:34927":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:6907":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11131":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8079":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:9388":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"0:8":{"crate_id":0,"path":["textwrap","dedent"],"kind":"function"},"1:7117":{"crate_id":1,"path":["textwrap","Owned"],"kind":"typedef"},"5:1168":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1295":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11593":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:4713":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"5:5721":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2095":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7469":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:4296":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"0:165":{"crate_id":0,"path":["textwrap","wrap_algorithms","wrap_first_fit"],"kind":"function"},"1:4346":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:5709":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:6605":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:21557":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11994":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:3935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11774":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:9587":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4147":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:15268":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3158":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10304":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:10510":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:1945":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:14029":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42743":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:49381":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1301":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42958":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:45127":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"2:43641":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:10184":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"3:299":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:5519":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"12:116":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9956":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"2:49358":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43963":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:567":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"2:45791":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:13070":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:11466":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:49328":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5476":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46182":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"1:3037":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:43479":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:42370":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:48414":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"0:0":{"crate_id":0,"path":["textwrap"],"kind":"module"},"2:41995":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:1325":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:46038":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"0:302":{"crate_id":0,"path":["textwrap","wrap_algorithms","FirstFit"],"kind":"struct"},"6:4071":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3282":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:42563":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:6923":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"1:5104":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"22:53":{"crate_id":22,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"6:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43891":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:1948":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"2:45147":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3142":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6532":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43496":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43555":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7132":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:47646":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:155":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44391":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:45811":{"crate_id":2,"path":["textwrap","Searcher"],"kind":"typedef"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:11663":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11442":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:21403":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42610":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:45264":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44445":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:10246":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:9947":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:12961":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:12014":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:14245":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"2:42143":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:7025":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:14088":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:5961":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9244":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:3682":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4431":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10340":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"2:46172":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11004":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1292":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:6181":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:42041":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6520":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"0:84":{"crate_id":0,"path":["textwrap","word_splitters","split_words"],"kind":"function"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9962":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:45577":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:49290":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47348":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46264":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45568":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1852":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:47569":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:49253":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2982":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"2:8390":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:5785":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:49420":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:13118":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:22164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46226":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"2:49244":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45344":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:3132":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:46060":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:21550":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42432":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:42455":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:6063":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:14328":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:760":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"1:1205":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11108":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2812":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"2:44689":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:49305":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8417":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"0:175":{"crate_id":0,"path":["textwrap","core","display_width"],"kind":"function"},"1:692":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:14016":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"0:279":{"crate_id":0,"path":["textwrap","word_splitters","NoHyphenation"],"kind":"struct"},"6:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:7522":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:5526":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:4358":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1344":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:43650":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10903":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:4769":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10767":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11555":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:7":{"crate_id":0,"path":["textwrap","indent"],"kind":"function"},"2:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"1:6948":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"1:7472":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:12140":{"crate_id":2,"path":["textwrap","Searcher"],"kind":"typedef"},"2:21844":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:14742":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"0:121":{"crate_id":0,"path":["textwrap","wrap_algorithms","wrap_optimal_fit"],"kind":"function"},"0:270":{"crate_id":0,"path":["textwrap","word_separators","UnicodeBreakProperties"],"kind":"struct"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"22:47":{"crate_id":22,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"1:10979":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3081":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:43446":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:15259":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:42722":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8671":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8949":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:3993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3076":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:12847":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"0:91":{"crate_id":0,"path":["textwrap","wrap_algorithms"],"kind":"module"},"6:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:13489":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:13383":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3228":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11585":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12288":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:546":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7625":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8157":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:43504":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11656":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:13398":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:7385":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3098":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44492":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43488":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:12003":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2141":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3547":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2904":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7417":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:48197":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:3127":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5530":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10985":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:0":{"crate_id":20,"path":["unicode_linebreak"],"kind":"module"},"6:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:10961":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:1428":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:11867":{"crate_id":2,"path":["textwrap","Output"],"kind":"typedef"},"2:21908":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:3086":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6672":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:14679":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47420":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45548":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:47726":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:14239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1265":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2839":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47957":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:21441":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:6529":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9390":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:10173":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:7475":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4415":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:7613":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:10555":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:915":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:7633":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46026":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:574":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11615":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"5:5567":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"2:47317":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10185":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"5:2661":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5468":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:42702":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42712":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:13011":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:9329":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3787":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:42554":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42541":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2603":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"6:589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4066":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"2:43616":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3029":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3378":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7509":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:2898":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:47270":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10909":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2176":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7222":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"1:10261":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:9932":{"crate_id":2,"path":["textwrap","Output"],"kind":"typedef"},"2:8463":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7958":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10267":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"2:21182":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44400":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:48764":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:2951":{"crate_id":2,"path":["textwrap","Error"],"kind":"typedef"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3182":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:45743":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:12060":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2913":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"2:45398":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:21572":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9239":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"0:195":{"crate_id":0,"path":["textwrap","core","break_words"],"kind":"function"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:956":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:14075":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:657":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:7477":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3368":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1950":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6601":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"1:9232":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:15277":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11536":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:14059":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:3469":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:5169":{"crate_id":5,"path":["textwrap","Output"],"kind":"typedef"},"1:4145":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:13720":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49264":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:42633":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:3013":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:42931":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7562":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3449":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2783":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:13249":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:22036":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:10542":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"2:45462":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:3004":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4083":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1236":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42662":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"2:43632":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"0:67":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter"],"kind":"trait"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3045":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1334":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3371":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42733":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9316":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"0:336":{"crate_id":0,"path":["textwrap","Options"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3801":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:5192":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:2174":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:45186":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8049":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:13138":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:2663":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:3696":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41903":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:4188":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"5:2912":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7575":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:7901":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:7412":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3456":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:14483":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10498":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12769":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45890":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:46002":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:543":{"crate_id":5,"path":["textwrap","Owned"],"kind":"typedef"},"6:1518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2910":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47750":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4063":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:4039":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6201":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3016":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11648":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:4743":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"1:2717":{"crate_id":1,"path":["textwrap","Output"],"kind":"typedef"},"5:2905":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11700":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:15273":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:15282":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:10136":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42753":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11030":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47222":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:4148":{"crate_id":2,"path":["core","array","collect_into_array","Guard"],"kind":"struct"},"2:45697":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5101":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:3747":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44707":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7236":{"crate_id":1,"path":["textwrap","Item"],"kind":"typedef"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:21504":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"5:2927":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:3735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:1643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8457":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10493":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42572":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:12215":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:9362":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1938":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:12780":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10810":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:527":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:13579":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12793":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"2:12743":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:3435":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:5592":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8515":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11218":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:9115":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:47371":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:45118":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:3983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11690":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"5:379":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"5:7103":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain","BackshiftOnDrop"],"kind":"struct"},"2:3102":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10399":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3154":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:9332":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11201":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:44165":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3166":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:14223":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46006":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:45869":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:48150":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:1956":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:33770":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:8918":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"2:3012":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1154":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:7409":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:7904":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:11664":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:47141":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6824":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46235":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3989":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:10807":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:7062":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21370":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:10200":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11542":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:2671":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43624":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:8577":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"6:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"0:256":{"crate_id":0,"path":["textwrap","fill_inplace"],"kind":"function"},"1:10701":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:1089":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10547":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:973":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:4287":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3092":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:7460":{"crate_id":2,"path":["textwrap","IntoIter"],"kind":"typedef"},"2:3304":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9372":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"0:243":{"crate_id":0,"path":["textwrap","wrap"],"kind":"function"},"2:45208":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:3665":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:9069":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47467":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:22492":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2086":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:49127":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:44158":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:165":{"crate_id":20,"path":["unicode_linebreak","BreakClass"],"kind":"enum"},"1:11570":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10012":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8697":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"0:169":{"crate_id":0,"path":["textwrap","core"],"kind":"module"},"1:15265":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5377":{"crate_id":5,"path":["textwrap","Output"],"kind":"typedef"},"2:47036":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45498":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45312":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4099":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6565":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:11774":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:14105":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:42485":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45416":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10889":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"0:293":{"crate_id":0,"path":["textwrap","wrap_algorithms","OptimalFit"],"kind":"struct"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8578":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:45362":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8874":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:44433":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:5482":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:34990":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:21876":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:7459":{"crate_id":2,"path":["textwrap","Item"],"kind":"typedef"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:47203":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:10265":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2355":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"2:44699":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47110":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:46949":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1580":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3723":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:42924":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:21464":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7701":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:5107":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"2:42511":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:14006":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"2:46249":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:13051":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:14392":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42087":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:4651":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:43855":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:10754":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:1307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:22004":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46014":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:10445":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10218":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:5713":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10694":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:47005":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:1995":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1278":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3032":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3008":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:3493":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4060":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8581":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2615":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11921":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:3902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3170":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4107":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"1:14439":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5516":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49080":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"2:49224":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3071":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7515":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3300":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44677":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:22068":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8359":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:6427":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:6077":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"2:3009":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:45586":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10300":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10132":{"crate_id":2,"path":["textwrap","IntoIter"],"kind":"typedef"},"0:181":{"crate_id":0,"path":["textwrap","Target"],"kind":"typedef"},"2:10303":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11670":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4199":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42969":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:24919":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:11984":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11057":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43675":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7318":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:14333":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:10834":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:3459":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:4747":{"crate_id":1,"path":["textwrap","Iter"],"kind":"typedef"},"6:606":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:9381":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44467":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:7649":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:2917":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46855":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11997":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"1:6670":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7602":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21348":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:42110":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:9400":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11047":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:45903":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:808":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4743":{"crate_id":1,"path":["textwrap","Iter"],"kind":"typedef"},"2:42492":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5231":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:671":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10774":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:2662":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:45237":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:824":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:44415":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:47694":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:42690":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"1:10761":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5693":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3239":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:1371":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45100":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42357":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:5671":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:44406":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2338":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:45173":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1595":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"6:1574":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2901":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:7198":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1806":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:15261":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10368":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:12710":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:14011":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10913":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:3034":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:9394":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:45558":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1962":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:7416":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:43547":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:743":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:5156":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:5381":{"crate_id":5,"path":["textwrap","Output"],"kind":"typedef"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:7353":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:10960":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43783":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:48263":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:28839":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:12009":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:14302":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8735":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"2:45516":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46972":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:14766":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:15280":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:28804":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"20:276":{"crate_id":20,"path":["unicode_linebreak","BreakOpportunity"],"kind":"enum"},"2:10131":{"crate_id":2,"path":["textwrap","Item"],"kind":"typedef"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"2:33749":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:15270":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11703":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:8024":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:8003":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:10276":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:44172":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:45294":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10563":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:14470":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12695":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:1967":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"0:140":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"trait"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:13723":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:45674":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:15271":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6001":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:11779":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:44652":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8426":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8654":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:4368":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47831":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"2:2515":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46030":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:6979":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"2:3123":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42949":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:3787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:874":{"crate_id":1,"path":["textwrap","Owned"],"kind":"typedef"},"1:2237":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8890":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"1:10317":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"2:4291":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10524":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:2177":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2660":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:3110":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:729":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"0:56":{"crate_id":0,"path":["textwrap","word_splitters"],"kind":"module"},"6:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3454":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:45834":{"crate_id":2,"path":["textwrap","Searcher"],"kind":"typedef"},"2:49166":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:3873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:5823":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:9342":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:11447":{"crate_id":2,"path":["textwrap","Item"],"kind":"typedef"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"2:2907":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:21428":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45593":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:14092":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5965":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6688":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3921":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47988":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:7596":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:7680":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:4424":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:45049":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:3768":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1941":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:8308":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:3823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:15279":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10355":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1223":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42592":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1180":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7425":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:49343":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10195":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:21940":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4399":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"1:5940":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:5460":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:45199":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42681":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:1410":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:44668":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45880":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4190":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:12291":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:47183":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7368":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3215":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:1284":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"0:23":{"crate_id":0,"path":["textwrap","word_separators","WordSeparator"],"kind":"trait"},"1:15272":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:7493":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:858":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4380":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21972":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:3850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4101":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:3891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:5152":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:11723":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"1:11008":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7394":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"0:236":{"crate_id":0,"path":["textwrap","unfill"],"kind":"function"},"1:8315":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:509":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10744":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10722":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:940":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10335":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:12951":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:45217":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:14733":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1353":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:9459":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47521":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"2:3493":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4362":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1934":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"0:286":{"crate_id":0,"path":["textwrap","word_splitters","HyphenSplitter"],"kind":"struct"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:3762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44899":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6929":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:48954":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:6100":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"1:10804":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:43711":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:9402":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:45712":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45602":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:5985":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:7462":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7423":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47910":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1834":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:41931":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:3245":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:196":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42478":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6299":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11759":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:9064":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2212":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9510":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:9597":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:9628":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8057":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:8731":{"crate_id":1,"path":["textwrap","Target"],"kind":"typedef"},"1:634":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43747":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:7177":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45109":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:42642":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46901":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:43999":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42940":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2606":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:1887":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"5:936":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10584":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:4736":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47059":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:3842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:14065":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:21456":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44660":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47078":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:13991":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:15243":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46276":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:3836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:7304":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:46190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:7232":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:42178":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7802":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"5:1258":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:12717":{"crate_id":2,"path":["textwrap","Future"],"kind":"typedef"},"2:48071":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:48875":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1282":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:49017":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42601":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2625":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:15281":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:4647":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:48228":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:47498":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:42411":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:14455":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11719":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:10338":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:15232":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8143":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"5:5175":{"crate_id":5,"path":["textwrap","Output"],"kind":"typedef"},"1:7606":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42351":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2946":{"crate_id":2,"path":["textwrap","Error"],"kind":"typedef"},"5:5396":{"crate_id":5,"path":["textwrap","Owned"],"kind":"typedef"},"2:7449":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3137":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:42671":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8530":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:1550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3232":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:0":{"crate_id":21,"path":["smawk"],"kind":"module"},"6:1832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8150":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3243":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3242":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10037":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7439":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3114":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:45270":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12782":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"1:15262":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47594":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:7908":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10503":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:21585":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3444":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6603":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:1595":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7237":{"crate_id":1,"path":["textwrap","IntoIter"],"kind":"typedef"},"0:16":{"crate_id":0,"path":["textwrap","word_separators"],"kind":"module"},"6:1678":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"1:1259":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:1893":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"0:311":{"crate_id":0,"path":["textwrap","core","Word"],"kind":"struct"},"1:2235":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4375":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"6:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7400":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:3118":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:45611":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:14384":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:14352":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"2:10928":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"22:0":{"crate_id":22,"path":["unicode_width"],"kind":"module"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:674":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:3671":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:8913":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:47546":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:10417":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5701":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:1506":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:2667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5722":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11608":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:3022":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:10459":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:7497":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:42521":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:10125":{"crate_id":2,"path":["textwrap","Item"],"kind":"typedef"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:43572":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21520":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2780":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:5163":{"crate_id":5,"path":["textwrap","Output"],"kind":"typedef"},"1:11191":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43564":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:7965":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:6742":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"1:14042":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11735":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"0:237":{"crate_id":0,"path":["textwrap","refill"],"kind":"function"},"1:10589":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3803":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:7453":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:840":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:687":{"crate_id":5,"path":["textwrap","Target"],"kind":"typedef"},"6:1507":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1396":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:3954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7128":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:15269":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:3780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:6824":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10376":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10971":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:4429":{"crate_id":2,"path":["textwrap","Target"],"kind":"typedef"},"2:4413":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46022":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4422":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"0:261":{"crate_id":0,"path":["textwrap","word_separators","AsciiSpace"],"kind":"struct"},"0:230":{"crate_id":0,"path":["textwrap","fill"],"kind":"function"},"1:12906":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:15276":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:2920":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:533":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:15263":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3148":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:12716":{"crate_id":2,"path":["textwrap","Output"],"kind":"typedef"},"6:4017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:45137":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:45818":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46018":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8663":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44903":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7463":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:43819":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:14598":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6261":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"5:1191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4743":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:4862":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:3741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46073":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"2:45726":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:47164":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:13798":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3366":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"2:42471":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:13548":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:1303":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4406":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:10308":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"}},"external_crates":{"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_width","html_root_url":null},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"smawk","html_root_url":"https://docs.rs/smawk/0.3.1/"},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"unicode_linebreak","html_root_url":null}},"format_version":9}